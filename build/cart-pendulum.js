!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CP=e():t.CP=e()}(self,(function(){return(()=>{"use strict";var t,e={d:(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},i={};function n(t,e){this.min=t,this.max=e}function o(t,e){this.origin=t,this.end=e}function r(){this.barrierDistance=400,this.boxHalfSize=50,this.moveAcceleration=.2,this.limitAngle=.7,this.cart=new n(new t(-this.boxHalfSize,-30),new t(this.boxHalfSize,30)),this.pendulum=new o(new t(0,0),new t(0,100)),this.barrierLeft=new o(new t(-this.barrierDistance,-1e3),new t(-this.barrierDistance,1e3)),this.barrierRight=new o(new t(this.barrierDistance,-1e3),new t(this.barrierDistance,1e3)),this.reset()}function s(t,e){this.ori=t,this.decl=e}function a(){this.vel=new s(0,0),this.angle=new s(0,0),this.pos=new s(0,0),this.e=0}function h(){}function l(){}function c(){}return e.r(i),e.d(i,{Box:()=>n,Cart:()=>r,Line:()=>o,LinearModel:()=>a,LinearRegression:()=>s,Runner:()=>h,Training:()=>l,Utils:()=>c,Vector2:()=>t}),t=class{constructor(t,e){this.x=t,this.y=e}},n.prototype.getSize=function(){return new t(this.max.x-this.min.x,this.max.y-this.min.y)},n.prototype.draw=function(t){var e=this.getSize();t.lineWidth=3,t.strokeRect(this.min.x,this.min.y,e.x,e.y)},o.prototype.size=function(){return Math.sqrt(Math.pow(this.origin.x-this.end.x,2)+Math.pow(this.origin.y-this.end.y,2))},o.prototype.draw=function(t){t.lineWidth=3,t.beginPath(),t.moveTo(this.origin.x,this.origin.y),t.lineTo(this.end.x,this.end.y),t.stroke()},r.prototype.reset=function(){this.gameOver=!1,this.score=0,this.position=0,this.leftPressed=!1,this.rightPressed=!1,this.acceleration=0,this.friction=.99,this.velocity=2*Math.random()-1,this.velocity+=this.velocity<0?-.2:.2,this.angle=0},r.prototype.draw=function(t){this.barrierLeft.draw(t),this.barrierRight.draw(t),t.translate(this.position,0),t.strokeStyle="#FF0000",t.lineWidth=1,t.beginPath(),t.moveTo(100*Math.sin(-this.limitAngle),100*Math.cos(-this.limitAngle)),t.lineTo(0,0),t.lineTo(100*Math.sin(this.limitAngle),100*Math.cos(this.limitAngle)),t.stroke(),t.strokeStyle="#000000",t.lineWidth=3,this.pendulum.end.x=100*Math.sin(this.angle),this.pendulum.end.y=100*Math.cos(this.angle),this.pendulum.draw(t),this.cart.draw(t)},r.prototype.update=function(){this.gameOver||(this.leftPressed?this.acceleration=-this.moveAcceleration:this.rightPressed?this.acceleration=this.moveAcceleration:this.acceleration=0,this.velocity+=this.acceleration,this.velocity*=this.friction,this.position+=this.velocity,this.angle+=.03*this.angle+.005*-this.velocity,this.score++,(this.angle>this.limitAngle||this.angle<-this.limitAngle)&&(this.gameOver=!0),(this.position+this.boxHalfSize>this.barrierDistance||this.position-this.boxHalfSize<-this.barrierDistance)&&(this.gameOver=!0))},s.prototype.jitter=function(t){this.ori+=(Math.random()-.5)*t,this.decl+=(Math.random()-.5)*t},s.prototype.clone=function(){return new s(this.ori,this.decl)},a.prototype.jitter=function(t){this.vel.jitter(t),this.angle.jitter(t),this.pos.jitter(t),this.e+=(Math.random()-.5)*t},a.prototype.clone=function(){var t=new a;return t.vel=this.pos.clone(),t.angle=this.pos.clone(),t.pos=this.pos.clone(),t.e=this.e,t},a.prototype.control=function(t){var e=this.vel.decl*t.velocity+this.vel.ori,i=this.angle.decl*t.angle+this.angle.ori+e+(this.pos.decl*t.position+this.pos.ori);t.leftPressed=i<this.e,t.rightPressed=i>this.e},h.runHeadless=function(t,e,i){e=void 0!==e?e:1/0;var n=new r;if(i)var o=performance.now();for(;!n.gameOver&&n.score<e;)void 0!==t&&t(n),n.update();if(i){var s=performance.now();console.log(" - Simulation ended with "+n.score+" points, took "+(s-o)+".")}return n.score},h.runGraphical=function(t,e,i){var n=new r,o=t.getContext("2d"),s=0;!function r(){void 0!==e&&e(n),n.update(),n.gameOver&&(void 0!==i&&i(n,s),n.score>s&&(s=n.score),n.reset()),o.save(),o.clearRect(0,0,t.width,t.height),o.font="15px Arial",o.textAlign="left",o.fillText("Points: "+n.score,10,20),o.fillText("Max: "+s,10,40),o.transform(1,0,0,-1,0,t.height),o.translate(t.width/2,t.height/2),n.draw(o),o.restore(),requestAnimationFrame(r)}()},l.trainIterative=function(t,e,i,n){t=void 0!==t?t:500,e=void 0!==e?e:100,i=void 0!==i?i:5,n=void 0!==n?n:2e3,console.log(" - Training process starting. ",{epochs:t,iterations:e,runs:i});for(var o=new a,r=l.testModel(o,i,n),s=0;s<t;s++){console.log(" - Running epoch ",s," score ",r);for(var h=null,c=0,d=0;d<e;d++){var u=o.clone();u.jitter(1);var f=l.testModel(u,i,n);f>c&&(h=u,c=f)}if(c>=r&&(o=h,r=c),r>=n)break}return console.log(" - Training finished with score ",r," model ",o),o},l.trainRandom=function(t,e,i){t=void 0!==t?t:1e5,e=void 0!==e?e:5,i=void 0!==i?i:2e3,console.log(" - Training process starting. ",{iterations:t,runs:e});for(var n=null,o=0,r=0;r<t;r++){var s=new a;s.jitter(2);var h=l.testModel(s,e,i);if(h>o&&(n=s,o=h),console.log(" - Iteration ",r," score ",o),o>=i)break}return console.log(" - Training finished with score ",o," model ",n),n},l.testModel=function(t,e,i){for(var n=0,o=0;o<e;o++)n+=h.runHeadless((function(e){t.control(e)}),i);return n/e},c.writeFile=function(t,e){"object"==typeof t&&(t=JSON.stringify(t,null,"\t"));var i=new Blob([t],{type:"octet/stream"}),n=document.createElement("a");n.download=e,n.href=window.URL.createObjectURL(i),n.style.display="none",n.onclick=function(){document.body.removeChild(this)},document.body.appendChild(n),n.click()},c.readFile=function(t){var e=document.createElement("input");e.type="file",e.style.display="none",document.body.appendChild(e),e.onchange=function(){var i=e.files;if(0!==i.length){var n=new FileReader;n.onload=function(){var e=n.result;t(e)},n.readAsText(i[0]),document.body.removeChild(e)}},e.click()},i})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,