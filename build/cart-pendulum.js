!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CP=t():e.CP=t()}(self,(function(){return(()=>{"use strict";var e,t,i,r,s,n,o,a,l,h={d:(e,t)=>{for(var i in t)h.o(t,i)&&!h.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},c={};return h.r(c),h.d(c,{Box:()=>t,Cart:()=>r,Line:()=>i,LinearModel:()=>n,LinearRegression:()=>s,Runner:()=>o,Training:()=>a,Utils:()=>l,Vector2:()=>e}),e=class{constructor(e,t){this.x=e,this.y=t}},t=class{constructor(e,t){this.min=e,this.max=t}getSize(){return new e(this.max.x-this.min.x,this.max.y-this.min.y)}draw(e){var t;return t=this.getSize(),e.lineWidth=3,e.strokeRect(this.min.x,this.min.y,t.x,t.y)}},i=class{constructor(e,t){this.origin=e,this.end=t}size(){return Math.sqrt(Math.pow(this.origin.x-this.end.x,2)+Math.pow(this.origin.y-this.end.y,2))}draw(e){return e.lineWidth=3,e.beginPath(),e.moveTo(this.origin.x,this.origin.y),e.lineTo(this.end.x,this.end.y),e.stroke()}},r=class{constructor(){this.barrierDistance=400,this.boxHalfSize=50,this.moveAcceleration=.2,this.limitAngle=.7,this.cart=new t(new e(-this.boxHalfSize,-30),new e(this.boxHalfSize,30)),this.pendulum=new i(new e(0,0),new e(0,100)),this.barrierLeft=new i(new e(-this.barrierDistance,-1e3),new e(-this.barrierDistance,1e3)),this.barrierRight=new i(new e(this.barrierDistance,-1e3),new e(this.barrierDistance,1e3)),this.reset()}reset(){var e;return this.gameOver=!1,this.score=0,this.position=0,this.leftPressed=!1,this.rightPressed=!1,this.acceleration=0,this.friction=.99,this.velocity=2*Math.random()-1,this.velocity+=null!=(e=this.velocity<0)?e:-{.2:.2},this.angle=0}draw(e){return this.barrierLeft.draw(e),this.barrierRight.draw(e),e.translate(this.position,0),e.strokeStyle="#FF0000",e.lineWidth=1,e.beginPath(),e.moveTo(100*Math.sin(-this.limitAngle),100*Math.cos(-this.limitAngle)),e.lineTo(0,0),e.lineTo(100*Math.sin(this.limitAngle),100*Math.cos(this.limitAngle)),e.stroke(),e.strokeStyle="#000000",e.lineWidth=3,this.pendulum.end.x=100*Math.sin(this.angle),this.pendulum.end.y=100*Math.cos(this.angle),this.pendulum.draw(e),this.cart.draw(e)}update(){if(!this.gameOver)return this.leftPressed?this.acceleration=-this.moveAcceleration:this.rightPressed?this.acceleration=this.moveAcceleration:this.acceleration=0,this.velocity+=this.acceleration,this.velocity*=this.friction,this.position+=this.velocity,this.angle+=.03*this.angle+.005*-this.velocity,this.score++,(this.angle>this.limitAngle||this.angle<-this.limitAngle)&&(this.gameOver=!0),this.position+this.boxHalfSize>this.barrierDistance||this.position-this.boxHalfSize<-this.barrierDistance?this.gameOver=!0:void 0}},s=class e{constructor(e,t){this.ori=e,this.decl=t}jitter(e){return this.ori+=(Math.random()-.5)*e,this.decl+=(Math.random()-.5)*e}clone(){return new e(this.ori,this.decl)}},n=class e{constructor(){this.vel=new s(0,0),this.angle=new s(0,0),this.pos=new s(0,0),this.e=0}jitter(e){return this.vel.jitter(e),this.angle.jitter(e),this.pos.jitter(e),this.e+=(Math.random()-.5)*e}clone(){var t;return(t=new e).vel=this.pos.clone(),t.angle=this.pos.clone(),t.pos=this.pos.clone(),t.e=this.e,t}control(e){var t,i;return t=this.vel.decl*e.velocity+this.vel.ori,i=this.angle.decl*e.angle+this.angle.ori+t+(this.pos.decl*e.position+this.pos.ori),e.leftPressed=i<this.e,e.rightPressed=i>this.e}},o=class{static runHeadless(e,t,i){var s,n,o;for(t=void 0!==t?t:Infinity,s=new r,i&&(o=performance.now());!s.gameOver&&s.score<t;)void 0!==e&&e(s),s.update();return i&&(n=performance.now(),console.log(" - Simulation ended with "+s.score+" points, took "+(n-o)+".")),s.score}runGraphical(e,t,i){var s,n,o,a;return s=new r,n=e.getContext("2d"),o=0,(a=function(){return void 0!==t&&t(s),s.update(),s.gameOver&&(void 0!==i&&i(s,o),s.score>o&&(o=s.score),s.reset()),n.save(),n.clearRect(0,0,e.width,e.height),n.font="15px Arial",n.textAlign="left",n.fillText("Points: "+s.score,10,20),n.fillText("Max: "+o,10,40),n.transform(1,0,0,-1,0,e.height),n.translate(e.width/2,e.height/2),s.draw(n),n.restore(),requestAnimationFrame(a)})()}},a=class e{static trainIterative(t,i,r,s){var o,a,l,h,c,d,u,g;for(t=void 0!==t?t:500,i=void 0!==i?i:100,r=void 0!==r?r:5,s=void 0!==s?s:2e3,console.log(" - Training process starting. ",{epochs:t,iterations:i,runs:r}),o=new n,a=e.testModel(o,r,s),l=0;l<t;){for(console.log(" - Running epoch ",l," score ",a),h=null,c=0,d=0;d<i;)(u=o.clone()).jitter(1),(g=e.testModel(u,r,s))>c&&(h=u,c=g),d++;if(c>=a&&(o=h,a=c),a>=s)break;l++}return console.log(" - Training finished with score ",a," model ",o),o}static trainRandom(t,i,r){var s,o,a,l,h;for(t=void 0!==t?t:1e5,i=void 0!==i?i:5,r=void 0!==r?r:2e3,console.log(" - Training process starting. ",{iterations:t,runs:i}),s=null,o=0,a=0;a<t&&((l=new n).jitter(2),(h=e.testModel(l,i,r))>o&&(s=l,o=h),console.log(" - Iteration ",a," score ",o),!(o>=r));)a++;return console.log(" - Training finished with score ",o," model ",s),s}static testModel(e,t,i){var r,s,n;for(n=0,s=0;s<t;)r=function(t){e.control(t)},n+=o.runHeadless(r,i),s++;return n/t}},l=class{static writeFile(e,t){var i,r;"object"==typeof e&&(e=JSON.stringify(e,null,"\t")),i=new Blob([e],{type:"octet/stream"}),(r=document.createElement("a")).download=t,r.href=window.URL.createObjectURL(i),r.style.display="none",r.onclick=function(){document.body.removeChild(this)},document.body.appendChild(r),r.click()}static readFile(e){var t;return(t=document.createElement("input")).type="file",t.style.display="none",document.body.appendChild(t),t.onchange=function(){var i,r;if(0!==(i=t.files).length)return(r=new FileReader).onload=function(){var t;return t=r.result,e(t)},r.readAsText(i[0]),document.body.removeChild(t)},t.click()}},c})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,