!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CP=e():t.CP=e()}(self,(function(){return(()=>{"use strict";var t,e,i,s,r,n,o,a,h,l,c={d:(t,e)=>{for(var i in e)c.o(e,i)&&!c.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},d={};return c.r(d),c.d(d,{Box:()=>e,CartSimulation:()=>s,DataRecorder:()=>l,Line:()=>i,LinearModel:()=>n,LinearModelTrain:()=>a,LinearRegression:()=>r,Runner:()=>o,Utils:()=>h,Vector2:()=>t}),t=class{constructor(t,e){this.x=t,this.y=e}},e=class{constructor(t,e){this.min=t,this.max=e}getSize(){return new t(this.max.x-this.min.x,this.max.y-this.min.y)}draw(t){var e;return e=this.getSize(),t.lineWidth=3,t.strokeRect(this.min.x,this.min.y,e.x,e.y)}},i=class{constructor(t,e){this.origin=t,this.end=e}size(){return Math.sqrt(Math.pow(this.origin.x-this.end.x,2)+Math.pow(this.origin.y-this.end.y,2))}draw(t){return t.lineWidth=3,t.beginPath(),t.moveTo(this.origin.x,this.origin.y),t.lineTo(this.end.x,this.end.y),t.stroke()}},s=class{constructor(){this.barrierDistance=400,this.boxHalfSize=50,this.moveAcceleration=250,this.limitAngle=.8,this.friction=.5,this.pendulumGravity=1.4,this.pendulumMomentum=.01,this.cart=new e(new t(-this.boxHalfSize,-30),new t(this.boxHalfSize,30)),this.pendulum=new i(new t(0,0),new t(0,100)),this.barrierLeft=new i(new t(-this.barrierDistance,-1e3),new t(-this.barrierDistance,1e3)),this.barrierRight=new i(new t(this.barrierDistance,-1e3),new t(this.barrierDistance,1e3)),this.reset()}reset(){var t;return this.gameOver=!1,this.score=0,this.position=0,this.leftPressed=!1,this.rightPressed=!1,this.acceleration=0,this.velocity=100*(2*Math.random()-1),this.velocity+=null!=(t=this.velocity<0)?t:-{50:50},this.angle=0}draw(t){return this.barrierLeft.draw(t),this.barrierRight.draw(t),t.translate(this.position,0),t.strokeStyle="#FF0000",t.lineWidth=1,t.beginPath(),t.moveTo(100*Math.sin(-this.limitAngle),100*Math.cos(-this.limitAngle)),t.lineTo(0,0),t.lineTo(100*Math.sin(this.limitAngle),100*Math.cos(this.limitAngle)),t.stroke(),t.strokeStyle="#000000",t.lineWidth=3,this.pendulum.end.x=100*Math.sin(this.angle),this.pendulum.end.y=100*Math.cos(this.angle),this.pendulum.draw(t),this.cart.draw(t)}update(t){if(!this.gameOver)return this.leftPressed?this.acceleration=-this.moveAcceleration:this.rightPressed?this.acceleration=this.moveAcceleration:this.acceleration=0,this.velocity+=this.acceleration*t,this.velocity*=1-this.friction*t,this.position+=this.velocity*t,this.angle+=this.angle*this.pendulumGravity*t,this.angle-=this.velocity*this.pendulumMomentum*t,this.score+=t,(this.angle>this.limitAngle||this.angle<-this.limitAngle)&&(this.gameOver=!0),this.position+this.boxHalfSize>this.barrierDistance||this.position-this.boxHalfSize<-this.barrierDistance?this.gameOver=!0:void 0}},r=class t{constructor(t,e){this.ori=t,this.decl=e}jitter(t){return this.ori+=(Math.random()-.5)*t,this.decl+=(Math.random()-.5)*t}clone(){return new t(this.ori,this.decl)}},n=class t{constructor(){this.vel=new r(0,0),this.angle=new r(0,0),this.pos=new r(0,0),this.e=0}jitter(t){return this.vel.jitter(t),this.angle.jitter(t),this.pos.jitter(t),this.e+=(Math.random()-.5)*t}clone(){var e;return(e=new t).vel=this.pos.clone(),e.angle=this.pos.clone(),e.pos=this.pos.clone(),e.e=this.e,e}control(t){var e,i;return e=this.vel.decl*t.velocity+this.vel.ori,i=this.angle.decl*t.angle+this.angle.ori+e+(this.pos.decl*t.position+this.pos.ori),t.leftPressed=i<this.e,t.rightPressed=i>this.e}},o=class{static runHeadless(t,e,i){var r,n,o;for(e=void 0!==e?e:Infinity,r=new s,i&&(o=performance.now());!r.gameOver&&r.score<e;)void 0!==t&&t(r),r.update(.016666666666666666);return i&&(n=performance.now(),console.log(" - Simulation ended with "+r.score+" points, took "+(n-o)+".")),r.score}static runGraphical(t,e,i){var r,n,o,a,h;return r=new s,n=t.getContext("2d"),a=0,o=0,(h=function(s){var l;return s?(l=(s-o)/1e3,o=s):l=0,void 0!==e&&e(r),r.update(l),r.gameOver&&(void 0!==i&&i(r,a),r.score>a&&(a=r.score),r.reset()),n.save(),n.clearRect(0,0,t.width,t.height),n.font="15px Arial",n.textAlign="left",n.fillText("Points: "+r.score,10,20),n.fillText("Max: "+a,10,40),n.transform(1,0,0,-1,0,t.height),n.translate(t.width/2,t.height/2),r.draw(n),n.restore(),requestAnimationFrame(h)})()}},a=class t{static trainIterative(e,i,s,r){var o,a,h,l,c,d,u,g;for(e=void 0!==e?e:500,i=void 0!==i?i:100,s=void 0!==s?s:5,r=void 0!==r?r:2e3,console.log(" - Training process starting. ",{epochs:e,iterations:i,runs:s}),o=new n,a=t.testModel(o,s,r),h=0;h<e;){for(console.log(" - Running epoch ",h," score ",a),l=null,c=0,d=0;d<i;)(u=o.clone()).jitter(1),(g=t.testModel(u,s,r))>c&&(l=u,c=g),d++;if(c>=a&&(o=l,a=c),a>=r)break;h++}return console.log(" - Training finished with score ",a," model ",o),o}static trainRandom(e,i,s){var r,o,a,h,l;for(e=void 0!==e?e:1e5,i=void 0!==i?i:5,s=void 0!==s?s:2e3,console.log(" - Training process starting. ",{iterations:e,runs:i}),r=null,o=0,a=0;a<e&&((h=new n).jitter(2),(l=t.testModel(h,i,s))>o&&(r=h,o=l),console.log(" - Iteration ",a," score ",o),!(o>=s));)a++;return console.log(" - Training finished with score ",o," model ",r),r}static testModel(t,e,i){var s,r,n;for(n=0,r=0;r<e;)s=function(e){t.control(e)},n+=o.runHeadless(s,i),r++;return n/e}},h=class{static writeFile(t,e){var i,s;"object"==typeof t&&(t=JSON.stringify(t,null,"\t")),i=new Blob([t],{type:"octet/stream"}),(s=document.createElement("a")).download=e,s.href=window.URL.createObjectURL(i),s.style.display="none",s.onclick=function(){document.body.removeChild(this)},document.body.appendChild(s),s.click()}static readFile(t){var e;return(e=document.createElement("input")).type="file",e.style.display="none",document.body.appendChild(e),e.onchange=function(){var i,s;if(0!==(i=e.files).length)return(s=new FileReader).onload=function(){var e;return e=s.result,t(e)},s.readAsText(i[0]),document.body.removeChild(e)},e.click()}},l=class{constructor(){this.active=!0,this.data=[],this.bestScore=0,this.bestData=[]}getData(){return this.bestData}end(t){if(this.active)return t>this.bestScore&&(this.bestData=this.data,this.bestScore=t),this.data=[]}record(t){if(this.active)return this.data.push({input:[t.velocity,t.angle,t.position],output:[t.leftPressed,t.rightPressed]})}},d})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,