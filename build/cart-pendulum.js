/*! For license information please see cart-pendulum.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CP=e():t.CP=e()}(self,(function(){return(()=>{var t={137:function(t,e,r){!function(t,e){"use strict";function n(t){return Math.max(0,t)}function i(t,e){return t<=0?0:e}var s=Object.freeze({__proto__:null,activate:n,measure:i});function a(t){return 1/(1+Math.exp(-t))}function o(t,e){return t*(1-t)*e}var u=Object.freeze({__proto__:null,activate:a,measure:o});function h(t){return Math.tanh(t)}function l(t,e){return(1-t*t)*e}var c=Object.freeze({__proto__:null,activate:h,measure:l});function p(t){return t>0?t:.01*t}function d(t,e){return t>0?e:.01*e}var g=Object.freeze({__proto__:null,activate:p,measure:d}),f=Object.freeze({__proto__:null,relu:s,sigmoid:u,tanh:c,leakyRelu:g});class m{constructor(t){this.json={avgs:{error:0,iterations:0,testTime:0,trainTime:0},stats:{total:0,testSize:0,trainSize:0},sets:[]},this.initClassifier=t}testPartition(t,e,r){const n=this.initClassifier(),i=Date.now(),s=n.train(e,t),a=Date.now(),o=n.test(r),u=Date.now();return{...o,trainTime:a-i,testTime:u-a,iterations:s.iterations,error:s.error,total:o.total,network:n.toJSON()}}shuffleArray(t){for(let e=t.length-1;e>0;e--){const r=Math.floor(Math.random()*(e+1)),n=t[e];t[e]=t[r],t[r]=n}return t}train(t,e={},r=4){if(t.length<r)throw new Error(`Training set size is too small for ${t.length} k folds of ${r}`);this.shuffleArray(t);const n=t.length/r,i={trainTime:0,testTime:0,iterations:0,error:0},s={total:0,testSize:0,trainSize:0},a={total:0,testSize:0,trainSize:0,truePos:0,trueNeg:0,falsePos:0,falseNeg:0,precision:0,recall:0,accuracy:0},o=[];let u=null;for(let h=0;h<r;h++){const r=t.slice(0),l=r.splice(h*n,n),c=r,p=this.testPartition(e,c,l);null===u&&(u=p.hasOwnProperty("falseNeg")&&p.hasOwnProperty("falsePos")&&p.hasOwnProperty("trueNeg")&&p.hasOwnProperty("truePos"),u&&Object.assign(s,a)),i.iterations+=p.iterations,i.testTime+=p.testTime,i.trainTime+=p.trainTime,i.error+=p.error,s.total+=p.total,m.isBinaryStats(s)&&m.isBinaryPartitionResults(p)&&(s.accuracy+=p.accuracy,s.falseNeg+=p.falseNeg,s.falsePos+=p.falsePos,s.precision+=p.precision,s.recall+=p.recall,s.trueNeg+=p.trueNeg,s.truePos+=p.truePos),o.push(p)}return i.error/=r,i.iterations/=r,i.testTime/=r,i.trainTime/=r,m.isBinaryStats(s)&&(s.precision=s.truePos/(s.truePos+s.falsePos),s.recall=s.truePos/(s.truePos+s.falseNeg),s.accuracy=(s.trueNeg+s.truePos)/s.total),s.testSize=n,s.trainSize=t.length-n,this.json={avgs:i,stats:s,sets:o},this.json}toNeuralNetwork(){return this.fromJSON(this.json)}toJSON(){return this.json}fromJSON(t){const e=t.sets.reduce(((t,e)=>t.error<e.error?t:e));return this.initClassifier().fromJSON(e.network)}}m.isBinaryStats=t=>void 0!==t.accuracy,m.isBinaryResults=t=>void 0!==t.stats.accuracy,m.isBinaryPartitionResults=t=>void 0!==t.accuracy;let y=null;function x(t){y=t}function b(t,r){let n=y;return null===n&&(n=new e.GPU({mode:"gpu"}),x(n)),n.createKernel(t,r).setPipeline(!0)}function w(t,r,n){let i=y;return null===i&&(i=new e.GPU({mode:"gpu"}),x(i)),i.createKernelMap(t,r,n).setPipeline(!0)}function T(t){t instanceof e.Texture&&t.delete()}function v(t){if(!(t instanceof e.Texture)){if(Array.isArray(t))if("number"==typeof t[0])t.fill(0);else{if("number"==typeof t[0][0]){for(let e=0;e<t.length;e++)t[e].fill(0);return}if("number"==typeof t[0][0][0]){for(let e=0;e<t.length;e++){const r=t[e];for(let t=0;t<r.length;t++)r[t].fill(0)}return}}throw new Error("unhandled value")}t.clear()}function S(t){if(t instanceof e.Texture)return t.clone();if(t instanceof Float32Array)return t.slice(0);if(Array.isArray(t)){if("number"==typeof t[0])return t.slice(0);if("number"==typeof t[0][0]){const e=new Array(t.length);for(let r=0;r<t.length;r++)e[r]=t[r].slice(0);return e}if("number"==typeof t[0][0][0]){const e=new Array(t.length);for(let e=0;e<t.length;e++){const r=t[e],n=new Array(r.length);for(let t=0;t<r.length;t++)n[t]=r[t].slice(0)}return e}}throw new Error("unhandled value")}function A(t){let e=0;for(let r=0;r<this.constants.height;r++)for(let n=0;n<this.constants.width;n++)e+=t[r][n]**2;return e/this.constants.length}class _{constructor({width:t,height:e}){this.calculate=b(A,{output:[1],constants:{width:t,height:e,length:t*e},immutable:!0}),this.addAbsolute=b((function(t,e){return t[0]+Math.abs(e[0][0])}),{output:[1],immutable:!0}),this.add=b((function(t,e){return t[0]+e[0]}),{output:[1],immutable:!0}),this.divide=b((function(t,e){const r=e[0];return r>0?r/t:0}),{output:[1],immutable:!0})}}const k={width:1,height:1,depth:null,weights:null,deltas:null,praxis:null,praxisOpts:null};class E{constructor(t){this.praxis=null,this.predictKernel=null,this.compareKernel=null,this.settings=t?{...k,...t}:{...k},this.setupPraxis()}get width(){var t;return null!==(t=this.settings.width)&&void 0!==t?t:0}get height(){var t;return null!==(t=this.settings.height)&&void 0!==t?t:0}get depth(){var t;return null!==(t=this.settings.depth)&&void 0!==t?t:0}get weights(){return this.settings.weights}set weights(t){this.settings.weights=t}get deltas(){return this.settings.deltas}set deltas(t){this.settings.deltas=t}get id(){var t;return null!==(t=this.settings.id)&&void 0!==t?t:""}set id(t){this.settings.id=t}setupPraxis(){const{initPraxis:t,praxis:e,praxisOpts:r}=this.settings;this.praxis||(t?this.praxis=r?t(this,r):t(this):e&&(this.praxis=e))}validate(){if(Number.isNaN(this.height))throw new Error(`${this.constructor.name} layer height is not a number`);if(Number.isNaN(this.width))throw new Error(`${this.constructor.name} layer width is not a number`);if(this.height<1)throw new Error(`${this.constructor.name} layer height is less than 1`);if(this.width<1)throw new Error(`${this.constructor.name} layer width is less than 1`)}setupKernels(t){}reuseKernels(t){if(t.width!==this.width)throw new Error(`${this.constructor.name} kernel width mismatch ${t.width} is not ${this.width}`);if(t.height!==this.height)throw new Error(`${this.constructor.name} kernel width mismatch ${t.height} is not ${this.height}`);if(t.hasOwnProperty("predictKernel")&&null!==t.predictKernel){if(!t.predictKernel.immutable)throw new Error(`${t.constructor.name}.predictKernel is not reusable, set kernel.immutable = true`);this.predictKernel=t.predictKernel}if(t.hasOwnProperty("compareKernel")&&null!==t.compareKernel){if(!t.compareKernel.immutable)throw new Error(`${t.constructor.name}.compareKernel is not reusable, set kernel.immutable = true`);this.compareKernel=t.compareKernel}this.praxis=t.praxis}predict(t){}compare(t){}learn(t){const{weights:e}=this;if(!this.praxis)throw new Error("this.praxis not defined");this.weights=this.praxis.run(this,t),T(e),v(this.deltas)}toArray(){return Array.isArray(this.weights)?this.weights:this.weights.toArray()}toJSON(){return E.toJSON(this)}static toJSON(t){const{weights:r}=t;return{width:t.width,height:t.height,depth:t.depth,weights:L(r&&r instanceof e.Texture?r.toArray():r),type:t.constructor.name,praxisOpts:t.praxis?t.praxis.toJSON():null}}}function L(t){if(null===t)return null;if(Array.isArray(t)){if("number"==typeof t[0])return t;if(Array.isArray(t[0])&&"number"==typeof t[0][0])return t;if(Array.isArray(t[0][0])&&"number"==typeof t[0][0][0])return t;if(t[0]instanceof Float32Array)return t.map((t=>Array.from(t)));if(t[0][0]instanceof Float32Array)return t.map((t=>t.map((t=>Array.from(t)))))}else if(t)return Array.from(t);throw new Error("unexpected value")}function I(t){return new Float32Array(t)}function D(t,e){const r=new Array(e);for(let n=0;n<e;n++)r[n]=I(t);return r}function $(t,e,r){const n=new Array(r);for(let i=0;i<r;i++)n[i]=D(t,e);return n}class O extends E{constructor(t,e){super(e),this.inputLayer=t;const{width:r,height:n,depth:i}=this;this.predictKernel=null,this.compareKernel=null,this.validate(),i>0?(this.weights=$(r,n,i),this.deltas=$(r,n,i)):n>0&&(this.weights=D(r,n),this.deltas=D(r,n)),this.setupPraxis()}get width(){return this.inputLayer.width}get height(){return this.inputLayer.height}get depth(){return this.inputLayer.depth}}class C extends E{constructor(t,e){super(),this.settings=t,this.inputLayer=e}get width(){return this.inputLayer.width}get height(){return this.inputLayer.height}get depth(){return this.inputLayer.depth}get filterCount(){return this.settings.filterCount}get filterWidth(){return this.settings.filterWidth}get filterHeight(){return this.settings.filterHeight}get filters(){return this.settings.filters}set filters(t){this.settings.filters=t}get filterDeltas(){return this.settings.filterDeltas}set filterDeltas(t){this.settings.filterDeltas=t}}class F{constructor(){this.predictKernel=null,this.compareKernel=null,this.praxis=null}get width(){return this.settings.width}get height(){return this.settings.height}get depth(){return this.settings.depth}get weights(){return this.settings.weights}set weights(t){this.settings.weights=t}get deltas(){return this.settings.deltas}set deltas(t){this.settings.deltas=t}toJSON(){return E.toJSON(this)}}class R extends E{constructor(t,e){super({...e,width:t.width,height:t.height,depth:t.depth}),this.inputLayer=t}validate(){var t;if(super.validate(),this.width!==this.inputLayer.width)throw new Error(`width of ${this.width} does not match inputLayer.width of ${this.inputLayer.width}`);if(this.height!==this.inputLayer.height)throw new Error(`height of ${this.height} does not match inputLayer.height of ${this.inputLayer.height}`);if(this.depth!==(null!==(t=this.inputLayer.depth)&&void 0!==t?t:0))throw new Error(`depth of ${this.depth} does not match inputLayer.depth of ${this.inputLayer.depth}`)}}class z extends E{constructor(t,e,r){super(r),this.inputLayer1=t,this.inputLayer2=e,this.validate(),this.weights=D(this.width,this.height),this.deltas=D(this.width,this.height),this.setupPraxis()}}function M(t,e){return t[this.thread.y][this.thread.x]-e[this.thread.x]}function N(t,e){return t[this.thread.y][this.thread.x]-e[this.thread.y][this.thread.x]}class V extends E{constructor(t,e){if(super(t),this.inputLayer=e,this.validate(),this.depth)throw new Error("Target layer not implemented for depth");this.height?(this.weights=D(this.width,this.height),this.deltas=D(this.width,this.height),this.errors=D(this.width,this.height)):(this.weights=I(this.width),this.deltas=I(this.width),this.errors=I(this.width))}setupKernels(){1===this.width?this.compareKernel=b(M,{output:[this.width,this.height],immutable:!0}):this.compareKernel=b(N,{output:[this.width,this.height],immutable:!0})}predict(){T(this.weights),this.weights=S(this.inputLayer.weights),v(this.deltas)}compare(t){T(this.deltas),T(this.errors),T(this.inputLayer.deltas),this.deltas=this.compareKernel(this.weights,t),this.inputLayer.deltas=S(this.deltas),this.errors=S(this.deltas)}setupPraxis(){}}function P(t,e){return new V(t,e)}class K{}class G extends E{}class U extends E{}const B={toTable(t){const e=t.reduce(((t,e)=>Object.assign(t,e)),{});return B.toHash(e)},toTable2D(t){const e={};let r=0;for(let n=0;n<t.length;n++){const i=t[n];for(let t=0;t<i.length;t++){const n=i[t];for(const t in n)n.hasOwnProperty(t)&&!e.hasOwnProperty(t)&&(e[t]=r++)}}return e},toInputTable2D(t){const e={};let r=0;for(let n=0;n<t.length;n++){const i=t[n].input;for(let t=0;t<i.length;t++){const n=i[t];for(const t in n)n.hasOwnProperty(t)&&(e.hasOwnProperty(t)||(e[t]=r++))}}return e},toOutputTable2D(t){const e={};let r=0;for(let n=0;n<t.length;n++){const i=t[n].output;for(let t=0;t<i.length;t++){const n=i[t];for(const t in n)n.hasOwnProperty(t)&&(e.hasOwnProperty(t)||(e[t]=r++))}}return e},toHash(t){const e={};let r=0;const n=Object.keys(t);for(let t=0;t<n.length;t++)e[n[t]]=r++;return e},toArray(t,e,r){const n=new Float32Array(r);for(const r in t)t.hasOwnProperty(r)&&(n[t[r]]=e.hasOwnProperty(r)?e[r]:0);return n},toArrayShort(t,e){const r=[];for(const n in t)if(t.hasOwnProperty(n)){if(!e.hasOwnProperty(n))break;r[t[n]]=e[n]}return Float32Array.from(r)},toArrays(t,e,r){const n=[];for(let i=0;i<e.length;i++)n.push(this.toArray(t,e[i],r));return n},toObject(t,e){const r={};for(const n in t)t.hasOwnProperty(n)&&(r[n]=e[t[n]]);return r},toObjectPartial(t,e,r=0,n=0){const i={};let s=0;for(const a in t)t.hasOwnProperty(a)&&(r>0&&s++<r||n>0&&s++>=n||(i[a]=e[t[a]-r]));return i},dataShape(t){const e=[];let r,n;for(t.hasOwnProperty("input")?(e.push("datum"),r=t.input):Array.isArray(t)?t[0]&&t[0].input?(e.push("array","datum"),r=t[0].input):Array.isArray(t[0])?(e.push("array"),r=t[0]):r=t:r=t;r;)if(n=Object.keys(r)[0],Array.isArray(r)||"object"==typeof r.buffer){e.push("array");const t=r[parseInt(n)];if("number"==typeof t){e.push("number");break}r=t}else{if("object"!=typeof r||"object"==typeof r.buffer)throw new Error("unhandled signature");{e.push("object");const t=r[n];if("number"==typeof t){e.push("number");break}r=t}}return e},addKeys(t,e){if(Array.isArray(t))return e;let r=Object.keys(e).length;for(const n in t)t.hasOwnProperty(n)&&(e.hasOwnProperty(n)||(e[n]=r++));return e}};class j{constructor(t,e={}){this.layerTemplate=t,this.settings={...e},this.kernel=null}get width(){return this.layerTemplate.width}get height(){return this.layerTemplate.height}get depth(){return this.layerTemplate.depth}setupKernels(){}reuseKernels(t){if(t.width!==this.width)throw new Error(`${this.constructor.name} kernel width mismatch ${t.width} is not ${this.width}`);if(t.height!==this.height)throw new Error(`${this.constructor.name} kernel width mismatch ${t.height} is not ${this.height}`);t.hasOwnProperty("kernel")&&(this.kernel=t.kernel)}toJSON(){return{...this.settings}}}function W(t,e){return t[this.thread.y][this.thread.x]+this.constants.learningRate*e[this.thread.y][this.thread.x]}const H={learningRate:.3};class X extends j{constructor(t,e){super(t),this.settings={...H,...e},this.kernel=null}run(t){return this.kernel(t.weights,t.deltas)}setupKernels(){this.kernel=b(W,{output:[this.width,this.height],constants:{learningRate:this.settings.learningRate}})}}function q(t,e){return new X(t,e)}function Y(t){return t}function J(t,e,r,n){const i=t[this.thread.y][this.thread.x],s=n[this.thread.y][0],a=e[this.thread.y][this.thread.x],o=r[this.thread.x][0];return a+(this.constants.learningRate*s*o+this.constants.momentum*i)}const Z={learningRate:.3,momentum:.1,weightsLayer:null,incomingLayer:null,deltaLayer:null};class Q extends j{constructor(t,e){super(t),this.kernelMap=null,this.settings={...Z,...e},this.changes=D(t.width,t.height)}get learningRate(){return this.settings.learningRate}get momentum(){return this.settings.momentum}get weightsLayer(){return this.settings.weightsLayer}set weightsLayer(t){this.settings.weightsLayer=t}get deltaLayer(){return this.settings.deltaLayer}set deltaLayer(t){this.settings.deltaLayer=t}get incomingLayer(){return this.settings.incomingLayer}set incomingLayer(t){this.settings.incomingLayer=t}run(){const t=this.kernelMap(this.changes,this.weightsLayer.weights,this.incomingLayer.weights,this.deltaLayer.deltas);return this.changes=t.changes,t.result}setupKernels(){this.kernelMap=w({changes:Y},J,{output:[this.width,this.height],constants:{learningRate:this.learningRate,momentum:this.momentum}})}}function tt(t,e){return new Q(t,e)}function et(t,e,r){return r*e+(1-e)*t*t}function rt(t,e,r){return t>e?e:t<r?r:t}function nt(t,e,r){const n=e[this.thread.y][this.thread.x],i=rt(n,this.constants.clipValue,-this.constants.clipValue),s=t[this.thread.y][this.thread.x],a=r[this.thread.y][this.thread.x],o=et(n,this.constants.decayRate,a);return s+-this.constants.learningRate*i/Math.sqrt(o+this.constants.smoothEps)-this.constants.regularizationStrength*s}const it={decayRate:.999,regularizationStrength:1e-4,learningRate:.01,smoothEps:1e-8,clipValue:5};class st extends j{constructor(t,e={}){super(t),this.kernelMap=null,this.settings={...it,...e},this.momenta=D(t.width,t.height)}get clipValue(){return this.settings.clipValue}get decayRate(){return this.settings.decayRate}get learningRate(){return this.settings.learningRate}get regularizationStrength(){return this.settings.regularizationStrength}get smoothEps(){return this.settings.smoothEps}run(t){const{momenta:e,result:r}=this.kernelMap(t.weights,t.deltas,this.momenta);return T(this.momenta),this.momenta=e,r}setupKernels(){this.kernelMap=w({momenta:et},nt,{output:[this.width,this.height],constants:{clipValue:this.clipValue,decayRate:this.decayRate,learningRate:this.learningRate,regularizationStrength:this.regularizationStrength,smoothEps:this.smoothEps},functions:[rt],immutable:!0})}}function at(t,e){return new st(t,e)}const ot=st,ut=at;var ht=Object.freeze({__proto__:null,ArthurDeviationBiases:X,arthurDeviationBiases:q,ArthurDeviationWeights:Q,arthurDeviationWeights:tt,MomentumRootMeanSquaredPropagation:st,momentumRootMeanSquaredPropagation:at,MRmsProp:ot,mRmsProp:ut});function lt(t,e){t.hasOwnProperty("inputLayer")?lt(t.inputLayer,e):(t.hasOwnProperty("inputLayer1")&&lt(t.inputLayer1,e),t.hasOwnProperty("inputLayer2")&&lt(t.inputLayer2,e)),e(t)}function ct(t){const e=t.slice(0);for(let t=0;t<e.length;t++){let r=0;lt(e[t],(n=>{e.includes(n)||(e.splice(t+r,0,n),r++)}))}return e}function pt(t,e){if(t.width!==e.width)throw new Error(`Layer width mismatch of ${t.width} and ${e.width}`);if(t.height!==e.height)throw new Error(`Layer height mismatch of ${t.height} and ${e.height}`)}function dt(t,e){return t[this.thread.y][this.thread.x]+e[this.thread.y][this.thread.x]}class gt extends z{get width(){return this.inputLayer1.width}get height(){return this.inputLayer1.height}get depth(){return this.inputLayer1.depth}validate(){super.validate(),pt(this.inputLayer1,this.inputLayer2)}setupKernels(){this.predictKernel=b(dt,{output:[this.width,this.height],immutable:!0})}predict(){T(this.weights),this.weights=this.predictKernel(this.inputLayer1.weights,this.inputLayer2.weights),v(this.deltas)}compare(){T(this.inputLayer1.deltas),T(this.inputLayer2.deltas),this.inputLayer1.deltas=S(this.deltas),this.inputLayer2.deltas=S(this.deltas)}learn(){}}function ft(t,e,r){return new gt(t,e,r)}function mt(){return.4*Math.random()-.2}function yt(t,e){return Math.random()*(e-t)+t}function xt(){if(xt.returnV)return xt.returnV=!1,xt.vVal;const t=2*Math.random()-1,e=2*Math.random()-1,r=t*t+e*e;if(0===r||r>1)return xt();const n=Math.sqrt(-2*Math.log(r)/r);return xt.vVal=e*n,xt.returnV=!0,t*n}xt.returnV=!1,xt.vVal=0;var bt=Object.freeze({__proto__:null,randomFloat:yt,gaussRandom:xt,randomInteger:function(t,e){return Math.floor(Math.random()*(e-t)+t)},randomN:function(t,e){return t+xt()*e}});function wt(t,e=null){const r=new Float32Array(t);if(null===e)for(let e=0;e<t;e++)r[e]=mt();else for(let n=0;n<t;n++)r[n]=yt(-e,e);return r}function Tt(t,e,r){const n=new Array(e);for(let i=0;i<e;i++)n[i]=wt(t,r);return n}function vt(t,e,r,n){const i=new Array(r);for(let s=0;s<r;s++)i[s]=Tt(t,e,n);return i}const St={...k,std:null};class At extends U{constructor(t){super(),this.settings={...St,...t},this.setupPraxis(),this.validate(),this.weights||(this.weights=Tt(this.width,this.height,t.std)),this.deltas||(this.deltas=D(this.width,this.height))}predict(){}compare(){}}function _t(t){return new At(t)}function kt(t,e){let r=0;for(let n=0;n<this.constants.size;n++)r+=t[this.thread.y][n]*e[n][this.thread.x];return r}function Et(t,e,r){let n=e[this.thread.y][this.thread.x];for(let e=0;e<this.constants.size;e++)n+=t[this.thread.y][e]*r[this.thread.x][e];return n}function Lt(t,e,r){let n=e[this.thread.y][this.thread.x];for(let e=0;e<this.constants.size;e++)n+=t[e][this.thread.x]*r[e][this.thread.y];return n}class It extends z{constructor(){super(...arguments),this.compareKernel1=null,this.compareKernel2=null}get width(){return this.inputLayer2.width}set width(t){throw new Error("Cannot set width on Multiply")}get height(){return this.inputLayer1.height}set height(t){throw new Error("Cannot set height on Multiply")}get depth(){return this.inputLayer1.depth}set depth(t){throw new Error("Cannot set depth on Multiply")}validate(){if(super.validate(),this.inputLayer1.width!==this.inputLayer2.height)throw new Error(`Layer width mismatch of ${this.inputLayer1.width} and ${this.inputLayer2.height}`)}setupKernels(){this.predictKernel=b(kt,{output:[this.width,this.height],constants:{size:this.inputLayer2.height},immutable:!0}),this.compareKernel1=b(Et,{output:[this.inputLayer1.width,this.inputLayer1.height],constants:{size:this.inputLayer2.width},immutable:!0}),this.compareKernel2=b(Lt,{output:[this.inputLayer2.width,this.inputLayer2.height],constants:{size:this.inputLayer1.height},immutable:!0})}reuseKernels(t){super.reuseKernels(t),this.compareKernel1=t.compareKernel1,this.compareKernel2=t.compareKernel2}predict(){if(T(this.weights),!this.predictKernel)throw new Error("this.predictKernel is not set");this.weights=this.predictKernel(this.inputLayer1.weights,this.inputLayer2.weights),v(this.deltas)}compare(){if(!this.compareKernel1)throw new Error("this.compareKernel1 not set");if(!this.compareKernel2)throw new Error("this.compareKernel2 not set");const t=this.inputLayer1.deltas,e=this.inputLayer2.deltas,r=this.compareKernel1(this.deltas,this.inputLayer1.deltas,this.inputLayer2.weights),n=this.compareKernel2(this.deltas,this.inputLayer2.deltas,this.inputLayer1.weights);this.inputLayer2.deltas=n,this.inputLayer1.deltas=r,T(t),T(e)}setupPraxis(){}learn(){}toJSON(){return{...super.toJSON(),width:this.width,height:this.height}}}function Dt(t,e,r){return new It(t,e,r)}function $t(t){return 1/(1+Math.exp(-t[this.thread.y][this.thread.x]))}function Ot(t){return 1/(1+Math.exp(-t[this.thread.z][this.thread.y][this.thread.x]))}function Ct(t,e){const r=t[this.thread.y][this.thread.x];return r*(1-r)*e[this.thread.y][this.thread.x]}function Ft(t,e){const r=t[this.thread.z][this.thread.y][this.thread.x];return r*(1-r)*e[this.thread.z][this.thread.y][this.thread.x]}class Rt extends O{setupKernels(){this.depth>0?(this.predictKernel=b(Ot,{output:[this.width,this.height,this.depth],functions:[a],immutable:!0}),this.compareKernel=b(Ft,{output:[this.width,this.height,this.depth],functions:[o],immutable:!0})):(this.predictKernel=b($t,{output:[this.width,this.height],functions:[a],immutable:!0}),this.compareKernel=b(Ct,{output:[this.width,this.height],functions:[o],immutable:!0}))}predict(){T(this.weights),this.weights=this.predictKernel(this.inputLayer.weights),v(this.deltas)}compare(){T(this.inputLayer.deltas),this.inputLayer.deltas=this.compareKernel(this.weights,this.deltas)}}function zt(t,e){return new Rt(t,e)}function Mt(t,e){if("number"==typeof t.stride)return{strideX:t.stride,strideY:t.stride};{let r=e.stride,n=e.stride;return"number"==typeof t.strideX&&(r=t.strideX),"number"==typeof t.strideY&&(n=t.strideY),{strideX:r,strideY:n}}}function Nt(t,e){if("number"==typeof t.padding)return{paddingX:t.padding,paddingY:t.padding};{let r=e.padding,n=e.padding;return"number"==typeof t.paddingX&&(r=t.paddingX),"number"==typeof t.paddingY&&(n=t.paddingY),{paddingX:r,paddingY:n}}}function Vt(t,e){return new Float32Array(t).fill(e)}function Pt(t,e,r){const n=this.constants.paddingX-this.thread.x*this.constants.strideX,i=this.thread.x*this.constants.strideX-this.constants.paddingX,s=Math.min(this.constants.filterWidth,n+this.constants.inputWidth),a=this.constants.paddingY-this.thread.y*this.constants.strideY,o=this.thread.y*this.constants.strideY-this.constants.paddingY,u=Math.min(this.constants.filterHeight,a+this.constants.inputHeight);let h=0;for(let r=0;r<this.constants.inputDepth;r++)for(let l=Math.max(0,a),c=Math.max(0,o);l<u;l++,c++)for(let a=Math.max(0,n),o=Math.max(0,i);a<s;a++,o++)h+=e[r][l][a]*t[r][c][o];return h+r[this.thread.z]}function Kt(t,e,r){const n=Math.max(0,Math.ceil((this.constants.paddingX-this.thread.x)/this.constants.strideX)),i=n*this.constants.strideX+this.thread.x-this.constants.paddingX,s=Math.min(this.constants.deltaWidth,Math.floor((this.constants.inputWidth-1-this.thread.x+this.constants.paddingX)/this.constants.strideX)+1),a=Math.max(0,Math.ceil((this.constants.paddingY-this.thread.y)/this.constants.strideY)),o=a*this.constants.strideY+this.thread.y-this.constants.paddingY,u=Math.min(this.constants.deltaHeight,Math.floor((this.constants.inputHeight-1-this.thread.y+this.constants.paddingY)/this.constants.strideY)+1);let h=t[this.thread.z][this.thread.y][this.thread.x];for(let t=a,l=o;t<u;t++,l+=this.constants.strideY)for(let a=n,o=i;a<s;a++,o+=this.constants.strideX)h+=e[this.thread.z][l][o]*r[this.constants.deltaZ][t][a];return h}function Gt(t,e,r){const n=this.thread.x+this.constants.paddingX,i=n<this.constants.filterWidth?0:Math.floor((n-this.constants.filterWidth+this.constants.strideX)/this.constants.strideX),s=n-i*this.constants.strideX,a=Math.min(i+Math.floor(s/this.constants.strideX)+1,this.constants.deltaWidth),o=this.thread.y+this.constants.paddingY,u=o<this.constants.filterHeight?0:Math.floor((o-this.constants.filterHeight+this.constants.strideY)/this.constants.strideY),h=o-u*this.constants.strideY,l=Math.min(u+Math.floor(h/this.constants.strideY)+1,this.constants.deltaHeight);let c=t[this.thread.z][this.thread.y][this.thread.x],p=u;for(let t=h;p<l;t-=this.constants.strideY,p++){let n=i;for(let i=s;n<a;i-=this.constants.strideX,n++)c+=e[this.thread.z][t][i]*r[this.constants.deltaZ][p][n]}return c}function Ut(t,e){let r=0;for(let t=0;t<this.constants.deltaHeight;t++)for(let n=0;n<this.constants.deltaWidth;n++)r+=e[this.thread.z][t][n];return t[this.thread.z][this.thread.y][this.thread.x]+r}const Bt={stride:0,padding:0,bias:.1,filterCount:1,filterWidth:0,filterHeight:0};class jt extends C{constructor(t,e){var r,n,i;super(t,e),this.compareFilterDeltasKernel=null,this.compareInputDeltasKernel=null,this.compareBiasesKernel=null,this.settings={...Bt,...t,...Nt(t,Bt),...Mt(t,Bt)},this.weights=null!==(r=t.weights)&&void 0!==r?r:vt(this.width,this.height,this.depth),this.deltas=$(this.width,this.height,this.depth),this.biases=Vt(this.depth,this.bias),this.biasDeltas=null!==(n=t.biasDeltas)&&void 0!==n?n:wt(this.depth),this.filters=null!==(i=t.filters)&&void 0!==i?i:vt(this.filterWidth,this.filterHeight,this.filterCount),this.filterDeltas=$(this.filterWidth,this.filterHeight,this.filterCount),this.validate()}get strideX(){return this.settings.strideX}get strideY(){return this.settings.strideY}get paddingX(){return this.settings.paddingX}get paddingY(){return this.settings.paddingX}get width(){return Math.floor((this.inputLayer.width+2*this.paddingX-this.filterWidth)/this.strideX+1)}get height(){return Math.floor((this.inputLayer.height+2*this.paddingY-this.filterHeight)/this.strideY+1)}get bias(){return this.settings.bias}get depth(){return this.filterCount}get biases(){return this.settings.biases}set biases(t){this.settings.biases=t}get biasDeltas(){return this.settings.biasDeltas}set biasDeltas(t){this.settings.biasDeltas=t}get filters(){return this.settings.filters}set filters(t){this.settings.filters=t}get filterDeltas(){return this.settings.filterDeltas}set filterDeltas(t){this.settings.filterDeltas=t}setupKernels(){this.predictKernel=b(Pt,{constants:{inputWidth:this.inputLayer.width,inputHeight:this.inputLayer.height,inputDepth:this.inputLayer.depth,strideX:this.strideX,strideY:this.strideY,paddingX:this.paddingX,paddingY:this.paddingY,filterWidth:this.filterWidth,filterHeight:this.filterHeight},output:[this.width,this.height,this.depth],immutable:!0}),this.compareFilterDeltasKernel=b(Kt,{constants:{deltasWidth:this.width,deltasHeight:this.height,deltasDepth:this.depth,inputWidth:this.inputLayer.width,inputHeight:this.inputLayer.height,inputDepth:this.inputLayer.depth,strideX:this.strideX,strideY:this.strideY,paddingX:this.paddingX,paddingY:this.paddingY,filterWidth:this.filterWidth,filterHeight:this.filterHeight},output:[this.width,this.height,this.depth],immutable:!0}),this.compareInputDeltasKernel=b(Gt,{constants:{filterCount:this.filterCount},output:[this.inputLayer.width,this.inputLayer.height,this.inputLayer.depth],immutable:!0}),this.compareBiasesKernel=b(Ut,{output:[1,1,this.depth],constants:{deltaWidth:this.width,deltaHeight:this.height},immutable:!0})}predict(){this.weights=this.predictKernel(this.inputLayer.weights,this.filters,this.biases)}compare(){const{filterDeltas:t,biasDeltas:e}=this;this.filterDeltas=this.compareFilterDeltasKernel(t,this.inputLayer.weights,this.deltas),T(t),this.biasDeltas=this.compareBiasesKernel(e,this.deltas),T(e),T(this.deltas),this.deltas=this.compareInputDeltasKernel(this.filters,this.inputLayer.deltas),T(this.inputLayer.deltas),this.inputLayer.deltas=S(this.deltas)}learn(t){const{weights:e}=this;this.weights=this.praxis.run(this,t),T(e),v(this.deltas)}}function Wt(t){return t}function Ht(t){return Math.random()<this.constants.probability?0:t[this.thread.y][this.thread.x]}function Xt(t){return t[this.thread.y][this.thread.x]*this.constants.probability}function qt(t,e){return 0===t[this.thread.y][this.thread.x]?0:e[this.thread.y][this.thread.x]}const Yt={...k,probability:.5};class Jt extends C{constructor(t,e){super(e,t),this.predictKernelMap=null,this.settings={...Yt,...e},this.dropouts=null,this.validate()}setupKernels(t){const e=[this.width,this.height];t?(this.predictKernelMap=w({dropouts:Wt},Ht,{output:e,immutable:!0}),this.compareKernel=b(qt,{output:e,immutable:!0})):this.predictKernelMap=w({},Xt,{output:e,immutable:!0})}predict(){T(this.weights),this.dropouts&&T(this.dropouts);const{result:t,dropouts:e}=this.predictKernelMap(this.inputLayer.weights);this.weights=t,this.dropouts=e}compare(){T(this.deltas),this.deltas=this.compareKernel(this.dropouts,this.inputLayer.deltas)}}function Zt(t,e,r){let n=0,i=0;for(let r=0;r<this.constants.inputHeight;r++)for(let s=0;s<this.constants.inputWidth;s++)n+=t[r][s]*e[this.thread.x][i],i++;return n+r[this.thread.x]}function Qt(t,e,r){let n=0,i=0;for(let r=0;r<this.constants.inputDepth;r++)for(let s=0;s<this.constants.inputHeight;s++)for(let a=0;a<this.constants.inputWidth;a++)n+=t[r][s][a]*e[this.thread.x][i],i++;return n+r[this.thread.x]}function te(t,e,r){let n=0;const i=this.thread.x+this.thread.y*this.output.x;for(let t=0;t<this.constants.filterCount;t++)n+=r[t][i]*e[0][t];return n+t[this.thread.y][this.thread.x]}function ee(t,e,r){let n=0;const i=this.thread.x+this.thread.y*this.output.x;for(let t=0;t<this.constants.filterCount;t++)n+=r[t][i]*e[0][t];return n+t[this.thread.z][this.thread.y][this.thread.x]}function re(t,e){return t[this.thread.x]+e[this.thread.y][this.thread.x]}function ne(t,e,r){return t[this.thread.y][this.thread.x]+e[this.thread.y][this.thread.x]*r[this.constants.deltaY][this.constants.deltaX]}function ie(t,e,r){const n=Math.floor(this.thread.x/(this.constants.inputWidth*this.constants.inputHeight)),i=Math.floor((this.thread.x-n*this.constants.inputWidth*this.constants.inputHeight)/this.constants.inputWidth),s=this.thread.x-this.constants.inputWidth*(i+this.constants.inputHeight*n);return t[this.thread.y][this.thread.x]+e[n][i][s]*r[0][this.thread.y]}class se extends C{constructor(t,e){super(t,e),this.compareFilterDeltasKernel=null,this.compareInputDeltasKernel=null,this.compareBiasesKernel=null,this.settings={...t},this.validate();const r=e.width*e.height*e.depth;this.biases=Vt(this.height,this.bias),this.biasDeltas=I(this.height),this.filters=Tt(r,this.height),this.filterDeltas=D(r,this.height),this.depth>0?(this.weights=vt(this.width,this.height,this.depth),this.deltas=$(this.width,this.height,this.depth)):this.height>0&&(this.weights=Tt(this.width,this.height),this.deltas=D(this.width,this.height))}get bias(){return this.settings.bias}get biases(){return this.settings.biases}set biases(t){this.settings.biases=t}get biasDeltas(){return this.settings.biases}set biasDeltas(t){this.settings.biasDeltas=t}validate(){if(super.validate(),this.depth>0)throw new Error("depth not supported")}setupKernels(){const{inputLayer:t}=this,e=t.width*t.height*t.depth;t.depth>0?(this.predictKernel=b(Qt,{output:[this.width,this.height],constants:{inputHeight:t.height,inputWidth:t.width,inputDepth:t.depth}}),this.compareFilterDeltasKernel=b(ie,{output:[e,this.height],constants:{inputWidth:t.width,inputHeight:t.height},immutable:!0}),this.compareInputDeltasKernel=b(ee,{output:[t.width,t.height,t.depth],constants:{filterCount:this.height},immutable:!0})):(this.predictKernel=b(Zt,{output:[this.width,this.height],constants:{inputHeight:t.height,inputWidth:t.width}}),this.compareFilterDeltasKernel=b(ne,{output:[e,this.height],constants:{inputWidth:t.width}}),this.compareInputDeltasKernel=b(te,{output:[t.width,t.height],constants:{filterCount:this.height}})),this.compareBiasesKernel=b(re,{output:[this.width,this.height]})}predict(){this.weights=this.predictKernel(this.inputLayer.weights,this.filters,this.biases)}compare(){const t=this.inputLayer.deltas;this.inputLayer.deltas=this.compareInputDeltasKernel(t,this.deltas,this.filters),T(t);const{biasDeltas:e,filterDeltas:r}=this;this.biasDeltas=this.compareBiasesKernel(this.biases,this.deltas),this.filterDeltas=this.compareFilterDeltasKernel(r,this.inputLayer.weights,this.deltas),T(e),T(r)}}function ae(t){return-t[this.thread.y][this.thread.x]}class oe extends R{constructor(t,e){super(t,e),this.validate()}setupKernels(){this.predictKernel=b(ae,{output:[this.width,this.height]})}predict(){this.weights=this.predictKernel(this.inputLayer.weights)}}function ue(t,e){return new oe(t,e)}function he(t,e){return t[this.thread.y][this.thread.x]*e[this.thread.y][this.thread.x]}function le(t,e){return t[this.thread.y][this.thread.x]*e[this.thread.y][this.thread.x]}class ce extends z{get width(){return this.inputLayer1.width}get height(){return this.inputLayer1.height}get depth(){return this.inputLayer1.depth}validate(){super.validate(),pt(this.inputLayer1,this.inputLayer2)}setupKernels(){this.predictKernel=b(he,{output:[this.width,this.height],immutable:!0}),this.compareKernel=b(le,{output:[this.width,this.height],immutable:!0})}predict(){T(this.weights),this.weights=this.predictKernel(this.inputLayer1.weights,this.inputLayer2.weights),v(this.deltas)}compare(){T(this.inputLayer1.deltas),T(this.inputLayer2.deltas),this.inputLayer1.deltas=this.compareKernel(this.inputLayer2.weights,this.deltas),this.inputLayer2.deltas=this.compareKernel(this.inputLayer1.weights,this.deltas)}}function pe(t,e,r){return new ce(t,e,r)}function de(t){return new Float32Array(t).fill(1)}function ge(t,e){const r=new Array(e);for(let n=0;n<e;n++)r[n]=de(t);return r}class fe extends U{constructor(t){super(t),this.validate(),this.weights=ge(this.width,this.height),this.deltas=D(this.width,this.height)}}function me(t){return new fe(t)}function ye(t){return h(t[this.thread.y][this.thread.x])}function xe(t){return h(t[this.thread.z][this.thread.y][this.thread.x])}function be(t,e){return l(t[this.thread.y][this.thread.x],e[this.thread.y][this.thread.x])}function we(t,e){return l(t[this.thread.z][this.thread.y][this.thread.x],e[this.thread.z][this.thread.y][this.thread.x])}class Te extends O{setupKernels(){this.depth>0?(this.predictKernel=b(xe,{output:[this.width,this.height,this.depth],functions:[h],immutable:!0}),this.compareKernel=b(we,{output:[this.width,this.height,this.depth],functions:[l],immutable:!0})):(this.predictKernel=b(ye,{output:[this.width,this.height],functions:[h],immutable:!0}),this.compareKernel=b(be,{output:[this.width,this.height],functions:[l],immutable:!0}))}predict(){T(this.weights),this.weights=this.predictKernel(this.inputLayer.weights),v(this.deltas)}compare(){T(this.inputLayer.deltas),this.inputLayer.deltas=this.compareKernel(this.weights,this.deltas)}}function ve(t,e){return new Te(t,e)}class Se extends U{constructor(t){super(t),this.validate(),this.weights=D(this.width,this.height),this.deltas=D(this.width,this.height)}predict(){}compare(){}}function Ae(t){return new Se(t)}const _e={weights:null};class ke extends G{constructor(t){super({..._e,...t}),this.reshapeInput=null,this.validate(),this.reshapeInput=null,this.deltas=D(this.width,this.height)}setupKernels(){1===this.width&&(this.predict=this.predict1D,this.reshapeInput=b((function(t){return t[this.thread.y]}),{output:[1,this.height],immutable:!0}))}reuseKernels(t){this.reshapeInput=t.reshapeInput}predict(t){if((Array.isArray(t)||t instanceof Float32Array)&&"number"==typeof t[0]&&t.length===this.height*this.width)T(this.weights),this.weights=function(t,r){return new e.Input(t,r)}(t,[this.width,this.height]);else{if(!Array.isArray(t)||t.length!==this.height||!(Array.isArray(t[0])||t[0]instanceof Float32Array)||t[0].length!==this.width)throw new Error("Inputs are not of sized correctly");this.weights=S(t)}v(this.deltas)}predict1D(t){this.weights&&T(this.weights),this.reshapeInput?this.weights=this.reshapeInput(t):this.weights=t,v(this.deltas)}compare(){}}function Ee(t){return p(t[this.thread.y][this.thread.x])}function Le(t){return p(t[this.thread.z][this.thread.y][this.thread.x])}function Ie(t,e){return d(t[this.thread.y][this.thread.x],e[this.thread.y][this.thread.x])}function De(t,e){return d(t[this.thread.z][this.thread.y][this.thread.x],e[this.thread.z][this.thread.y][this.thread.x])}class $e extends O{setupKernels(){const{width:t,height:e,depth:r}=this.inputLayer;this.depth>0?(this.predictKernel=b(Le,{output:[t,e,r],functions:[p],immutable:!0}),this.compareKernel=b(De,{output:[t,e,r],functions:[d],immutable:!0})):(this.predictKernel=b(Ee,{output:[t,e],functions:[p],immutable:!0}),this.compareKernel=b(Ie,{output:[t,e],functions:[d],immutable:!0}))}predict(){T(this.weights),this.weights=this.predictKernel(this.inputLayer.weights),v(this.deltas)}compare(){const{deltas:t}=this;this.deltas=this.compareKernel(this.weights,t),T(t)}}function Oe(t){return t}function Ce(t){return t}function Fe(t){const e=this.constants.paddingX-this.thread.x*this.constants.strideX,r=this.thread.x*this.constants.strideX-this.constants.paddingX,n=Math.min(this.constants.filterWidth,e+this.constants.inputWidth),i=this.constants.paddingY-this.thread.y*this.constants.strideY,s=this.thread.y*this.constants.strideY-this.constants.paddingY,a=Math.min(this.constants.filterHeight,i+this.constants.inputHeight);let o=-99999;for(let u=Math.max(0,i),h=Math.max(0,s);u<a;u++,h++)for(let i=Math.max(0,e),s=Math.max(0,r);i<n;i++,s++)if(h>=0&&h<this.constants.inputHeight&&s>=0&&s<this.constants.inputWidth){const e=t[this.thread.z][h][s];e>o&&(o=e)}return o}function Re(t,e,r){const n=Math.floor(this.thread.x/this.output.x*this.constants.outputWidth),i=Math.floor(this.thread.y/this.output.y*this.constants.outputHeight);let s=0;for(let a=0;a<this.constants.inputHeight;a++)for(let o=0;o<this.constants.inputWidth;o++){const u=r[a][o],h=e[a][o];u===n&&h===i&&(s+=t[a][o])}return s}const ze={padding:0,stride:0,filterWidth:0,filterHeight:0,filterCount:0};class Me extends C{constructor(t,e){super(t,e),this.predictKernelMap=null,this.settings={...t,...Mt(t,ze),...Nt(t,ze)},this.weights=vt(this.width,this.height,this.depth),this.deltas=$(this.width,this.height,this.depth),this.filters=vt(this.filterWidth,this.filterHeight,this.filterCount),this.filterDeltas=$(this.filterWidth,this.filterHeight,this.filterCount),this.validate()}get strideX(){return this.settings.strideX}get strideY(){return this.settings.strideY}get paddingX(){return this.settings.paddingX}get paddingY(){return this.settings.paddingY}get width(){return Math.floor((this.inputLayer.width+2*this.paddingX-this.filterWidth)/this.strideX+1)}get height(){return Math.floor((this.inputLayer.height+2*this.paddingY-this.filterHeight)/this.strideY+1)}get depth(){return this.settings.filterCount}get filterCount(){return this.settings.filterCount}get switchX(){return this.settings.switchX}set switchX(t){this.settings.switchX=t}get switchY(){return this.settings.switchY}set switchY(t){this.settings.switchY=t}setupKernels(){this.predictKernelMap=w({switchX:Ce,switchY:Oe},Fe,{output:[this.width,this.height,this.depth],constants:{inputWidth:this.inputLayer.width,inputHeight:this.inputLayer.height,paddingX:this.paddingX,paddingY:this.paddingY,filterHeight:this.filterHeight,filterWidth:this.filterWidth}}),this.compareKernel=b(Re,{output:[this.inputLayer.width,this.inputLayer.height,this.inputLayer.depth],constants:{inputWidth:this.inputLayer.width,inputHeight:this.inputLayer.height,outputWidth:this.width,outputHeight:this.height}})}predict(){const{result:t,switchX:e,switchY:r}=this.predictKernelMap(this.inputLayer.weights);this.switchX=e,this.switchY=r,this.weights=t}compare(){const t=this.inputLayer.deltas;this.inputLayer.deltas=this.compareKernel(this.deltas,this.switchX,this.switchY),T(t)}}class Ne extends F{constructor(t){super(),this.praxis=null,this.predictKernel=null,this.compareKernel=null,this.settings={},this.recurrentInput=t,this.validate()}get width(){return this.recurrentInput.width}get height(){return this.recurrentInput.height}get depth(){return this.recurrentInput.depth}get deltas(){return this.recurrentInput.deltas}set deltas(t){const e=this.recurrentInput.deltas;this.recurrentInput.deltas=t,T(e)}get weights(){return this.recurrentInput.weights}set weights(t){const e=this.recurrentInput.weights;this.recurrentInput.weights=t,T(e)}validate(){if(E.prototype.validate.call(this),this.width!==this.recurrentInput.width)throw new Error(`${this.constructor.name} layer width ${this.width} and ${this.recurrentInput.constructor.name} width (${this.recurrentInput.width}) are not same`);if(this.height!==this.recurrentInput.height)throw new Error(`${this.constructor.name} layer height ${this.height} and ${this.recurrentInput.constructor.name} width (${this.recurrentInput.height}) are not same`)}setDimensions(t,e){this.recurrentInput.width=t,this.recurrentInput.height=e}predict(){}compare(){}learn(){}setupKernels(){}reuseKernels(){}}class Ve extends F{constructor(t){super(),this.praxis=null,this.settings={},this.predictKernel=null,this.compareKernel=null,t&&(this.settings={...t})}setDimensions(t,e){this.praxis=null,this.settings={...this.settings,width:t,height:e,weights:D(t,e),deltas:D(t,e)}}setupKernels(){}reuseKernels(){}predict(){}compare(){}learn(t){const{weights:e}=this;this.weights=this.praxis.run(this,t),T(e),v(this.deltas)}}function Pe(){return new Ve}function Ke(t){return n(t[this.thread.y][this.thread.x])}function Ge(t,e){return i(t[this.thread.y][this.thread.x],e[this.thread.y][this.thread.x])}function Ue(t){return n(t[this.thread.z][this.thread.y][this.thread.x])}function Be(t,e){return i(t[this.thread.z][this.thread.y][this.thread.x],e[this.thread.z][this.thread.y][this.thread.x])}class je extends O{setupKernels(){const{width:t,height:e,depth:r}=this.inputLayer;r>0?(this.predictKernel=b(Ue,{output:[t,e,r],functions:[n],immutable:!0}),this.compareKernel=b(Be,{output:[t,e,r],functions:[i],immutable:!0})):(this.predictKernel=b(Ke,{output:[t,e],functions:[n],immutable:!0}),this.compareKernel=b(Ge,{output:[t,e],functions:[i],immutable:!0}))}predict(){T(this.weights),this.weights=this.predictKernel(this.inputLayer.weights),v(this.deltas)}compare(){T(this.inputLayer.deltas),this.inputLayer.deltas=this.compareKernel(this.weights,this.deltas)}}function We(t,e){return new je(t,e)}class He extends E{constructor(t,e){super(t),this.inputLayer=e,this.validate()}predict(){T(this.weights),this.weights=S(this.inputLayer.weights)}learn(){}}function Xe(t){let e=-1/0;for(let r=0;r<this.constants.inputHeight;r++)for(let n=0;n<this.constants.inputWidth;n++){const i=t[r][n];i>e&&(e=i)}return e}function qe(t){let e=-1/0;for(let r=0;r<this.constants.inputDepth;r++)for(let n=0;n<this.constants.inputHeight;n++)for(let i=0;i<this.constants.inputWidth;i++){const s=t[r][n][i];s>e&&(e=s)}return e}function Ye(t){let e=0;for(let r=0;r<this.constants.inputHeight;r++)for(let n=0;n<this.constants.inputWidth;n++)e+=t[r][n];return e}function Je(t){let e=0;for(let r=0;r<this.constants.inputDepth;r++)for(let n=0;n<this.constants.inputHeight;n++)for(let i=0;i<this.constants.inputWidth;i++)e+=t[r][n][i];return e}function Ze(t,e){return Math.exp(t[this.thread.x]-e[0])}function Qe(t,e){return Math.exp(t[this.thread.z][this.thread.y][this.thread.x]-e[0])}function tr(t,e){return t[this.thread.y][this.thread.x]/e[0]}function er(t,e){return t[this.thread.z][this.thread.y][this.thread.x]/e[0]}function rr(t,e){let r=0;return this.thread.x+this.thread.y*this.output.x===t&&(r=1),-(r-e[this.thread.y][this.thread.x])}function nr(t,e){let r=0;return this.thread.x+this.thread.y*this.output.x+this.thread.z*this.output.x*this.output.y===t&&(r=1),-(r-e[this.thread.z][this.thread.y][this.thread.x])}class ir extends R{constructor(t,e){super(t,e),this.errors=null,this.getExponentialsKernel=null,this.getMaxValueKernel=null,this.getSumKernel=null,this.validate(),this.depth>0?(this.weights=vt(this.width,this.height,this.depth),this.deltas=$(this.width,this.height,this.depth)):this.height>0?(this.weights=Tt(this.width,this.height),this.deltas=D(this.width,this.height)):(this.weights=wt(this.width),this.deltas=I(this.width))}setupKernels(){const{width:t,height:e,depth:r}=this;r>0?(this.getExponentialsKernel=b(Qe,{output:[t,e,r]}),this.getMaxValueKernel=b(qe,{output:[1,1,1],constants:{inputWidth:t,inputHeight:e,inputDepth:r}}),this.getSumKernel=b(Je,{output:[1,1,1],constants:{inputWidth:t,inputHeight:e,inputDepth:r}}),this.predictKernel=b(er,{output:[t,e,r]}),this.compareKernel=b(nr,{output:[t,e,r],immutable:!0})):(this.getExponentialsKernel=b(Ze,{output:[t,e]}),this.getMaxValueKernel=b(Xe,{output:[1,1],constants:{inputWidth:t,inputHeight:e}}),this.getSumKernel=b(Ye,{output:[1,1],constants:{inputWidth:t,inputHeight:e}}),this.predictKernel=b(tr,{output:[t,e]}),this.compareKernel=b(rr,{output:[t,e],immutable:!0}))}predict(){const t=this.getMaxValueKernel(this.inputLayer.weights),e=this.getExponentialsKernel(this.inputLayer.weights,t),r=this.getSumKernel(e);this.weights=this.predictKernel(e,r)}compare(t){const{deltas:e,errors:r}=this;this.errors=this.compareKernel(t[0],e),this.deltas=S(this.errors),T(e),T(r);const n=this.inputLayer.deltas;this.inputLayer.deltas=S(this.deltas),T(n)}}class sr extends E{constructor(t,e){super(e),this.inputLayer=t}predict(){T(this.weights),this.weights=S(this.inputLayer.weights),this.validate()}learn(){}}function ar(t){return t[this.thread.x][this.thread.y]}const or=ar;class ur extends R{get width(){return this.inputLayer.height}get height(){return this.inputLayer.width}constructor(t){super(t),this.validate()}setupKernels(){this.predictKernel=b(ar,{output:[this.height,this.width]}),this.compareKernel=b(or,{output:[this.width,this.height]})}predict(){this.weights=this.predictKernel(this.inputLayer.weights),v(this.deltas)}compare(){this.inputLayer.deltas=this.compareKernel(this.deltas)}}const hr={Activation:O,Internal:F,InternalModel:K,EntryPoint:G,Filter:C,Model:U,Modifier:R,Operator:z,Target:V};var lr=Object.freeze({__proto__:null,layerTypes:hr,Add:gt,add:ft,arthurFeedForward:function(t,e){const{height:r}=t,n=_t({id:"weights",height:r,width:e.height,initPraxis:function(t,e){const r=tt(t,e);return r.setupKernels(),r}}),i=_t({id:"biases",height:r,initPraxis:function(t,e){const r=q(t,e);return r.setupKernels(),r}}),s=zt(ft(Dt(n,e),i)),a=n.praxis;return a.weightsLayer=n,a.incomingLayer=e,a.deltaLayer=s,s},BaseLayer:E,baseLayerDefaultSettings:k,Convolution:jt,convolution:function(t,e){return new jt(t,e)},Dropout:Jt,dropout:function(t,e){return new Jt(t,e)},feedForward:function(t,e){const{height:r,praxisOpts:n=null}=t,i=_t({id:"weights",height:r,width:e.height,praxisOpts:n}),s=_t({id:"biases",height:r,praxisOpts:n});return zt(ft(Dt(i,e,{praxisOpts:n}),s,{praxisOpts:n}),{praxisOpts:n})},FullyConnected:se,fullyConnected:function(t,e){return new se(t,e)},gru:function(t,e,r){const{height:n}=t,i=_t({height:n,width:r.height}),s=_t({width:n,height:n}),a=Ae({height:n}),o=zt(ft(ft(Dt(i,r),Dt(s,e)),a)),u=_t({height:n,width:r.height}),h=_t({width:n,height:n}),l=Ae({height:n}),c=zt(ft(ft(Dt(u,r),Dt(h,e)),l)),p=_t({height:n,width:r.height}),d=_t({width:n,height:n}),g=Ae({height:n}),f=ve(ft(ft(Dt(p,r),Dt(d,pe(c,e))),g));return ft(pe(ft(me({width:o.width,height:o.height}),ue(o)),f),pe(e,o))},Input:ke,input:function(t){return new ke(t)},LeakyRelu:$e,leakyRelu:function(t,e){return new $e(t,e)},lstmCell:function(t,e,r){const{height:n}=t;if("number"!=typeof n)throw new Error("no settings.height given");r.setDimensions&&r.setDimensions(1,n);const i=_t({height:n,width:e.height,std:.08,id:"inputGateWeights"}),s=_t({width:n,height:n,std:.08,id:"inputGatePeepholes"}),a=Ae({height:n,id:"inputGateBias"}),o=zt(ft(ft(Dt(i,e),Dt(s,r)),a),{id:"inputGate"}),u=_t({height:n,width:e.height,std:.08,id:"forgetGateWeights"}),h=_t({width:n,height:n,std:.08,id:"forgetGatePeepholes"}),l=Ae({height:n,id:"forgetGateBias"}),c=zt(ft(ft(Dt(u,e),Dt(h,r)),l),{id:"forgetGate"}),p=_t({height:n,width:e.height,std:.08,id:"outputGateWeights"}),d=_t({width:n,height:n,std:.08,id:"outputGatePeepholes"}),g=Ae({height:n,id:"outputGateBias"}),f=zt(ft(ft(Dt(p,e),Dt(d,r)),g),{id:"outputGate"}),m=_t({height:n,width:e.height,std:.08,id:"memoryWeights"}),y=_t({width:n,height:n,std:.08,id:"memoryPeepholes"}),x=Ae({height:n,id:"memoryBias"}),b=ve(ft(ft(Dt(m,e),Dt(y,r)),x),{id:"memory"}),w=pe(c,r,{id:"retainCell"}),T=pe(o,b,{id:"writeCell"});return pe(f,ve(ft(w,T,{id:"cell"})),{id:"activations"})},Multiply:It,multiply:Dt,MultiplyElement:ce,multiplyElement:pe,Negative:oe,negative:ue,Ones:fe,ones:me,output:function(t,e){const{height:r}=t,n=_t({height:r,width:e.height,id:"outputGate",std:.08}),i=_t({height:r,id:"output",std:.08}),s=Dt(n,e,{id:"outputGateConnected"});return P({id:"target",...t},ft(s,i))},Pool:Me,pool:function(t,e){return new Me(t,e)},Random:At,random:_t,RecurrentInput:Ne,RecurrentZeros:Ve,rnnCell:function(t,e,r){const{height:n}=t;if("number"!=typeof n)throw new Error("height not set");r.setDimensions&&r.setDimensions(1,n);const i=_t({id:"weight",height:n,width:e.height,std:.08}),s=_t({id:"transition",height:n,width:n,std:.08}),a=Ae({id:"bias",height:n});return We(ft(ft(Dt(i,e),Dt(s,r)),a))},Regression:He,regression:function(t,e){return new He(t,e)},Relu:je,relu:We,Sigmoid:Rt,sigmoid:zt,SoftMax:ir,softMax:function(t,e){return new ir(t,e)},SVM:sr,svm:function(t,e){return new sr(t,e)},Tanh:Te,tanh:ve,Target:V,target:P,Transpose:ur,transpose:function(t){return new ur(t)},Zeros:Se,zeros:Ae});const cr=Object.keys(lr);function pr(t,e,r){if(!cr.find((e=>e===t.type)))return null;const n=lr[t.type];if(n.prototype instanceof hr.Filter){if(!e)throw new Error("inputLayer missing");return new n(t,e)}if(n.prototype instanceof hr.Activation||n.prototype instanceof hr.Modifier){if(!e)throw new Error("inputLayer missing");return new n(e,t)}if(n.prototype instanceof hr.Internal)return new n(t);if(n.prototype instanceof hr.Operator){if(!e)throw new Error("inputLayer1 missing");if(!r)throw new Error("inputLayer2 missing");return new n(e,r,t)}if(n.prototype instanceof hr.InternalModel||n.prototype instanceof hr.EntryPoint||n.prototype instanceof hr.Model)return new n(t);if(n===V){if(!e)throw new Error("inputLayer missing");return new n(t,e)}return null}class dr{constructor(t,e){this.prop=null,this.table={},this.length=0;const r=this.table;if(e){this.prop=e;for(let n=0;n<t.length;n++){const i=t[n][e];for(const t in i)i.hasOwnProperty(t)&&(r.hasOwnProperty(t)||(r[t]=this.length++))}}else if(Array.isArray(t)&&Array.isArray(t[0]))for(let e=0;e<t.length;e++){const n=t[e];for(let t=0;t<n.length;t++){const e=n[t];for(const t in e)e.hasOwnProperty(t)&&(r.hasOwnProperty(t)||(r[t]=this.length++))}}else for(let e=0;e<t.length;e++){const n=t[e];for(const t in n)n.hasOwnProperty(t)&&(r.hasOwnProperty(t)||(r[t]=this.length++))}}}const gr={learningRate:.3,binaryThresh:.5,initPraxis:(t,e)=>{var r;return at(t,null!==(r=t.settings.praxisOpts)&&void 0!==r?r:e)}},fr={iterations:2e4,errorThresh:.005,log:!1,logPeriod:10,learningRate:.3,callbackPeriod:10,errorCheckInterval:100,timeout:1/0};class mr{constructor(t={}){this.trainOpts={},this.layers=null,this._inputLayer=null,this._hiddenLayers=null,this._outputLayer=null,this._model=null,this.meanSquaredError=null,this.inputLookup=null,this.inputLookupLength=null,this.outputLookup=null,this.outputLookupLength=null,this.options={...gr,...t},this._updateTrainingOptions({...fr,...t})}static _validateTrainingOptions(t){const{iterations:e,errorThresh:r,log:n,logPeriod:i,learningRate:s,callback:a,callbackPeriod:o,timeout:u}=t,h={iterations:()=>"number"==typeof e&&e>0,errorThresh:()=>"number"==typeof r&&r>0&&r<1,log:()=>"function"==typeof n||"boolean"==typeof n,logPeriod:()=>"number"==typeof i&&i>0,learningRate:()=>"number"==typeof s&&s>0&&s<1,callback:()=>"function"==typeof a||null===a,callbackPeriod:()=>"number"==typeof o&&o>0,timeout:()=>"number"==typeof u&&u>0};Object.keys(fr).forEach((e=>{if(h.hasOwnProperty(e)&&!h[e]()){const r=t[e];throw new Error(`[${e}, ${(null!=r?r:"undefined").toString()}] is out of normal training range, your network will probably not train.`)}}))}_setLogMethod(t){this.trainOpts.log="function"==typeof t?t:!!t&&console.log}_updateTrainingOptions(t){var e;this.trainOpts={...fr,...this.trainOpts,...t},mr._validateTrainingOptions(this.trainOpts),this._setLogMethod(null!==(e=t.log)&&void 0!==e?e:this.trainOpts.log);const{callback:r,callbackPeriod:n,errorCheckInterval:i}=this.trainOpts;r&&n!==i&&console.warn(`options.callbackPeriod with value of ${(null!=n?n:"undefined").toString()} does not match options.errorCheckInterval with value of ${(null!=i?i:"undefined").toString()}, if logging error, it will repeat.  These values may need to match`)}_connectOptionsLayers(){const{inputLayerIndex:t,outputLayerIndex:e,layers:r}=this.options;if(!r)throw new Error("this.options.layers in unexpected state");if("number"!=typeof t)throw new Error("inputLayerIndex not a number");if("number"!=typeof e)throw new Error("inputLayerIndex not a number");const n=r[t];if(!n)throw new Error("inputLayer not found in this.options.layers");const i=r[e];if(!i)throw new Error("outputLayer not found in this.options.layers");return this._inputLayer=n,this._hiddenLayers=r.slice(t,e-t),this._outputLayer=i,r}_connectNewLayers(){const{inputLayer:t,outputLayer:e}=this.options;if(!t)throw new Error("inputLayer not defined");const r=[];this._inputLayer=t();const n=this._connectHiddenLayers(this._inputLayer);if(!e)throw new Error("outputLayer not defined");return this._outputLayer=e(n[n.length-1],n.length),r.push(this._inputLayer),r.push(...n),r.push(this._outputLayer),ct(r)}_connectHiddenLayers(t){this._hiddenLayers=[];const e=[],{hiddenLayers:r}=this.options;if(!r)throw new Error("hiddenLayers not defined");for(let n=0;n<r.length;n++){const i=r[n](t,n);e.push(i),this._hiddenLayers.push(i),t=i}return e}initialize(){this.layers=this.options.layers?this._connectOptionsLayers():this._connectNewLayers(),this.initializeLayers(this.layers),this._model=this.layers.filter((t=>t instanceof U))}initializeLayers(t){var e,r;for(let n=0;n<t.length;n++){const i=t[n];i.setupKernels(!0),i instanceof U&&null===i.praxis&&"function"==typeof this.options.initPraxis&&(i.praxis=this.options.initPraxis(i,null!==(r=null!==(e=i.settings.praxisOpts)&&void 0!==e?e:this.options.praxisOpts)&&void 0!==r?r:{}),i.praxis.setupKernels())}const n=t[t.length-1];this.meanSquaredError=new _({width:n.width,height:n.height})}run(t){let r;if(Array.isArray(t)||t.buffer)r=t;else{if(!this.inputLookup)throw new Error("input is incompatible with net");r=B.toArray(this.inputLookup,t,this.inputLookupLength)}let n=this.runInput(r);return n instanceof e.Texture&&(n=n.toArray()),this.outputLookup?B.toObject(this.outputLookup,n):n}runInput(t){if(!this.layers)throw new Error("not initialized");this.layers[0].predict(t);for(let t=1;t<this.layers.length;t++)this.layers[t].predict();return this.layers[this.layers.length-1].weights}train(t,e={}){const{preparedData:r,status:n,endTime:i}=this._prepTraining(t,e);let s=!0;const a=()=>this._calculateTrainingError(r),o=()=>this._trainPatterns(r);for(;s;)s=this._trainingTick(n,i,a,o);return n}_trainingTick(t,e,r,n){const{trainOpts:i}=this;return!(t.iterations>=i.iterations||t.error<=i.errorThresh||Date.now()>=e||("function"==typeof i.log&&t.iterations%i.logPeriod==0?(t.error=r(),i.log(`iterations: ${t.iterations}, training error: ${t.error}`)):t.iterations%i.errorCheckInterval==0?t.error=r():n(),i.callback&&t.iterations%i.callbackPeriod==0&&i.callback(Object.assign(t)),t.iterations++,0))}_prepTraining(t,e){this._updateTrainingOptions(e);const r=this.formatData(t),n=this.trainOpts.timeout?Date.now()+this.trainOpts.timeout:0;return this.verifyIsInitialized(),{preparedData:this.transferData(r),status:{error:1,iterations:0},endTime:n}}verifyIsInitialized(){this._model||this.initialize()}_calculateTrainingError(t){let r=new Float32Array([0]);const n=this.meanSquaredError;for(let e=0;e<t.length;++e){const i=r,s=this._trainPattern(t[e].input,t[e].output,!0);r=n.add(r,s),T(s),T(i)}const i=n.divide(t.length,r);if(T(r),i instanceof e.Texture){const t=i.toArray();return T(i),t[0]}return i[0]}_trainPatterns(t){for(let e=0;e<t.length;++e)this._trainPattern(t[e].input,t[e].output,!1)}_trainPattern(t,e,r){var n;if(this.runInput(t),this._calculateDeltas(e),this.adjustWeights(),r){if(!(null===(n=this._outputLayer)||void 0===n?void 0:n.errors))throw new Error("outputLayer.errors not defined");return this.meanSquaredError.calculate(this._outputLayer.errors)}return null}_calculateDeltas(t){const e=this.layers;for(let r=e.length-1;r>-1;r--)e[r].compare(t)}adjustWeights(){const t=this._model;for(let e=0;e<t.length;e++)t[e].learn(this.trainOpts.learningRate)}formatData(t){if(!Array.isArray(t)){const e=[];e.push(t),t=e}const e=t[0].input;let r;if(!Array.isArray(t)||Array.isArray(e)||e instanceof Float32Array)r=t;else{if(!this.inputLookup){const e=new dr(t,"input");this.inputLookup=e.table,this.inputLookupLength=e.length}r=t.map((t=>({input:B.toArray(this.inputLookup,t.input,this.inputLookupLength)})),this)}const n=t[0].output;if(!(Array.isArray(n)||n instanceof Float32Array)){if(!this.outputLookup){const e=new dr(t,"output");this.outputLookup=e.table,this.outputLookupLength=e.length}r=t.map(((t,e)=>{const n=B.toArray(this.outputLookup,t.output,this.inputLookupLength);return{input:r[e].input,output:n}}),this)}return r}transferData(t){const e=new Array(t.length),r=b((function(t){return t[this.thread.x]}),{output:[t[0].input.length],immutable:!0}),n=b((function(t){return t[this.thread.x]}),{output:[t[0].output.length],immutable:!0});for(let i=0;i<t.length;i++){const s=t[i];e[i]={input:r(s.input),output:n(s.output)}}return e}test(){throw new Error(`${this.constructor.name}-test is not yet implemented`)}toJSON(){var t;if(this.layers||this.initialize(),!(this._model&&this.layers&&this._inputLayer&&this._hiddenLayers&&this._outputLayer))throw new Error("network is not initialized");const e=[];for(let t=0;t<this.layers.length;t++){const r=this.layers[t],n=r.toJSON();r.hasOwnProperty("inputLayer")?n.inputLayerIndex=this.layers.indexOf(r.inputLayer):r.hasOwnProperty("inputLayer1")&&r.hasOwnProperty("inputLayer2")&&(n.inputLayer1Index=this.layers.indexOf(r.inputLayer1),n.inputLayer2Index=this.layers.indexOf(r.inputLayer2)),e.push(n)}return{type:this.constructor.name,sizes:null!==(t=this.options.sizes)&&void 0!==t?t:[this._inputLayer.height].concat(this._hiddenLayers.map((t=>t.height))).concat([this._outputLayer.height]),outputLayerIndex:this.layers.indexOf(this._outputLayer),layers:e,inputLayerIndex:this.layers.indexOf(this._inputLayer)}}static fromJSON(t,e){var r,n,i,s;const a=t.layers,o=[],u=e?null!==(r=pr(a[0]))&&void 0!==r?r:e(a[0]):pr(a[0]);if(!u)throw new Error("unable to find layer");o.push(u);for(let t=1;t<a.length;t++){const r=a[t];if(void 0===r.inputLayerIndex&&void 0===r.inputLayer1Index&&void 0===r.inputLayer2Index){const t=e?null!==(n=pr(r))&&void 0!==n?n:e(r):pr(r);if(!t)throw new Error("unable to find layer");o.push(t)}else if("number"==typeof r.inputLayerIndex){const t=o[r.inputLayerIndex];if(!t)throw new Error("inputLayer1 not found");const n=e?null!==(i=pr(r,t))&&void 0!==i?i:e(r,t):pr(r,t);if(!n)throw new Error("unable to find layer");o.push(n)}else{if("number"!=typeof r.inputLayer1Index)throw new Error("Cannot create network from provided JSON. inputLayer1Index not defined.");if("number"!=typeof r.inputLayer2Index)throw new Error("Cannot create network from provided JSON. inputLayer2Index not defined.");const t=o[r.inputLayer1Index],n=o[r.inputLayer2Index];if(void 0===t)throw new Error(`Cannot create network from provided JSON. layer of index ${r.inputLayer1Index} not found.`);if(void 0===n)throw new Error(`Cannot create network from provided JSON. layer of index ${r.inputLayer2Index} not found.`);const i=e?null!==(s=pr(r,t,n))&&void 0!==s?s:e(r,t,n):pr(r,t,n);if(!i)throw new Error("unable to find layer");o.push(i)}}return new this({...t,layers:o})}toFunction(){throw new Error(`${this.constructor.name}-toFunction is not yet implemented`)}createTrainStream(){throw new Error(`${this.constructor.name}-createTrainStream is not yet implemented`)}}var yr="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==r.g?r.g:"undefined"!=typeof self?self:{};var xr=function(t,e,r){return t(r={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&r.path)}},r.exports),r.exports}((function(t,e){var r=yr&&yr.__assign||function(){return r=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},r.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.thaw=e.Block=e.Thaw=void 0;var n=function(){function t(e,n){var i=this;void 0===n&&(n={});var s=r(r({},t.defaultSettings),n),a=s.each,o=s.done;this.i=0,this.isStopped=!1,this.items=e,this.options=n,this.tick=function(){if(!i.isStopped&&(i.timeout=setTimeout(i.tick,0),!t.thawing)){var e=i.items[i.i];if(i.i>=i.items.length)return null!==o&&(t.thawing=!0,o(),t.thawing=!1),i.isStopped=!0,void clearTimeout(i.timeout);null!==a?(t.thawing=!0,a(e,i.i),t.thawing=!1):void 0!==e&&e(),i.i++}},t.thaws.push(this),n.delay||this.tick()}return Object.defineProperty(t,"isThawing",{get:function(){return t.thawing},enumerable:!1,configurable:!0}),t.stopAll=function(){for(var e=0;e<t.thaws.length;e++)t.thaws[e].stop()},t.prototype.makeReady=function(){return!!this.isStopped&&(this.isStopped=!1,!0)},t.prototype.add=function(t){return this.items.push(t),this.makeReady()&&this.tick(),this},t.prototype.insert=function(t){return this.items.splice(this.i,0,t),this.makeReady()&&this.tick(),this},t.prototype.addArray=function(t){return this.items=this.items.concat(t),this.makeReady()&&this.tick(),this},t.prototype.insertArray=function(t){var e=this.items.splice(0,this.i),r=this.items;return this.items=e.concat(t,r),this.makeReady()&&this.tick(),this},t.prototype.stop=function(){return this.isStopped=!0,clearTimeout(this.timeout),this.options.done&&this.options.done(),this},t.thawing=!1,t.thaws=[],t.defaultSettings={each:null,done:null},t}();function i(t,e){return new n(t,e)}e.Thaw=n,e.thaw=i;var s=function(){function t(t,e){void 0===e&&(e=200),this.index=0,this.thaws=[],this.count=e,this.options=t}return t.prototype.add=function(t){return this.next().add(t),this},t.prototype.addArray=function(t){return this.next().addArray(t),this},t.prototype.insert=function(t){return this.next().insert(t),this},t.prototype.insertArray=function(t){return this.next().insertArray(t),this},t.prototype.stop=function(){for(var t=0;t<this.thaws.length;t++)this.thaws[t].stop();return this},t.prototype.next=function(){var t,e=this.thaws;return e.length<this.count?(t=new n([],this.options),e.push(t)):t=e[this.index]||null,this.index++,this.index>=this.count&&(this.index=0),t},t}();e.Block=s,"undefined"!=typeof window&&(window.Thaw=n,window.thaw=i,window.Thaw.Block=s)}));function br(t){const e=[];for(let r=0;r<t.length;r++)e.push(Float32Array.from(t[r]));return e}function wr(t,e){const r=[];for(let e=0;e<t.length;e++)r.push(Float32Array.from(t[e]));for(let t=0;t<e.length;t++)r.push(Float32Array.from(e[t]));return r}function Tr(t){const e=[];for(let r=0;r<t.length;r++)e.push(Float32Array.from([t[r]]));return e}function vr(t,e){const r=[];for(let e=0;e<t.length;e++)r.push(Float32Array.from([t[e]]));for(let t=0;t<e.length;t++)r.push(Float32Array.from([e[t]]));return r}function Sr(t){return Float32Array.from(t)}function Ar(t,e,r,n,i,s){const a=[];for(let e=0;e<t.length;e++){const n=t[e],s=new Float32Array(i);for(const t in n)n.hasOwnProperty(t)&&(s[r[t]]=n[t]);a.push(s)}for(let t=0;t<e.length;t++){const r=e[t],i=new Float32Array(s);for(const t in r)r.hasOwnProperty(t)&&(i[n[t]]=r[t]);a.push(i)}return a}function _r(t){const e=[];for(const r in t)t.hasOwnProperty(r)&&e.push(Float32Array.from([t[r]]));return e}function kr(t,e){const r=[];for(const e in t)t.hasOwnProperty(e)&&r.push(Float32Array.from([t[e]]));for(const t in e)e.hasOwnProperty(t)&&r.push(Float32Array.from([e[t]]));return r}function Er(t,e,r){const n=new Float32Array(r);for(const r in t)t.hasOwnProperty(r)&&(n[e[r]]=t[r]);return n}function Lr(t){return Array.isArray(t)||t instanceof Float32Array?Math.max(...t):Math.max(...Object.values(t))}function Ir(t){let e=0;for(let r=0;r<t.length;r++)e+=t[r]**2;return e/t.length}function Dr(t,e){if(t.buffer instanceof ArrayBuffer)return null;if(Array.isArray(t))return Sr;if(!e)throw new Error("table is not Object");const{length:r}=Object.keys(e);return t=>{const n=new Float32Array(r);for(const r in e)e.hasOwnProperty(r)&&(n[e[r]]=t[r]||0);return n}}class $r{constructor(t={}){this.options={inputSize:0,outputSize:0,binaryThresh:.5},this.trainOpts={activation:"sigmoid",iterations:2e4,errorThresh:.005,log:!1,logPeriod:10,leakyReluAlpha:.01,learningRate:.3,momentum:.1,callbackPeriod:10,timeout:1/0,beta1:.9,beta2:.999,epsilon:1e-8},this.sizes=[],this.outputLayer=-1,this.biases=[],this.weights=[],this.outputs=[],this.deltas=[],this.changes=[],this.errors=[],this.errorCheckInterval=1,this.inputLookup=null,this.inputLookupLength=0,this.outputLookup=null,this.outputLookupLength=0,this._formatInput=null,this._formatOutput=null,this.runInput=t=>(this.setActivation(),this.runInput(t)),this.calculateDeltas=t=>(this.setActivation(),this.calculateDeltas(t)),this.biasChangesLow=[],this.biasChangesHigh=[],this.changesLow=[],this.changesHigh=[],this.iterations=0,this.options={...this.options,...t},this.updateTrainingOptions(t);const{inputSize:e,hiddenLayers:r,outputSize:n}=this.options;e&&n&&(this.sizes=[e].concat(null!=r?r:[]).concat([n]))}initialize(){if(!this.sizes.length)throw new Error("Sizes must be set before initializing");this.outputLayer=this.sizes.length-1,this.biases=new Array(this.outputLayer),this.weights=new Array(this.outputLayer),this.outputs=new Array(this.outputLayer),this.deltas=new Array(this.outputLayer),this.changes=new Array(this.outputLayer),this.errors=new Array(this.outputLayer);for(let t=0;t<=this.outputLayer;t++){const e=this.sizes[t];if(this.deltas[t]=I(e),this.errors[t]=I(e),this.outputs[t]=I(e),t>0){this.biases[t]=wt(e),this.weights[t]=new Array(e),this.changes[t]=new Array(e);for(let r=0;r<e;r++){const e=this.sizes[t-1];this.weights[t][r]=wt(e),this.changes[t][r]=I(e)}}}this.setActivation(),"adam"===this.trainOpts.praxis&&this._setupAdam()}setActivation(t){const e=null!=t?t:this.trainOpts.activation;switch(e){case"sigmoid":this.runInput=this._runInputSigmoid,this.calculateDeltas=this._calculateDeltasSigmoid;break;case"relu":this.runInput=this._runInputRelu,this.calculateDeltas=this._calculateDeltasRelu;break;case"leaky-relu":this.runInput=this._runInputLeakyRelu,this.calculateDeltas=this._calculateDeltasLeakyRelu;break;case"tanh":this.runInput=this._runInputTanh,this.calculateDeltas=this._calculateDeltasTanh;break;default:throw new Error(`Unknown activation ${e}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`)}}get isRunnable(){return this.sizes.length>0}run(t){if(!this.isRunnable)throw new Error("network not runnable");let e;if(e=this.inputLookup?B.toArray(this.inputLookup,t,this.inputLookupLength):t,e.length!==this.sizes[0])throw new Error(`input is not in correct length of ${this.sizes[0]}`);const r=this.runInput(e).slice(0);return this.outputLookup?B.toObject(this.outputLookup,r):r}_runInputSigmoid(t){this.outputs[0]=t;let e=null;for(let r=1;r<=this.outputLayer;r++){const n=this.sizes[r],i=this.weights[r],s=this.biases[r],a=this.outputs[r];for(let e=0;e<n;e++){const r=i[e];let n=s[e];for(let e=0;e<r.length;e++)n+=r[e]*t[e];a[e]=1/(1+Math.exp(-n))}e=t=a}if(!e)throw new Error("output was empty");return e}_runInputRelu(t){this.outputs[0]=t;let e=null;for(let r=1;r<=this.outputLayer;r++){const n=this.sizes[r],i=this.weights[r],s=this.biases[r],a=this.outputs[r];for(let e=0;e<n;e++){const r=i[e];let n=s[e];for(let e=0;e<r.length;e++)n+=r[e]*t[e];a[e]=n<0?0:n}e=t=a}if(!e)throw new Error("output was empty");return e}_runInputLeakyRelu(t){this.outputs[0]=t;const{leakyReluAlpha:e}=this.trainOpts;let r=null;for(let n=1;n<=this.outputLayer;n++){const i=this.sizes[n],s=this.weights[n],a=this.biases[n],o=this.outputs[n];for(let r=0;r<i;r++){const n=s[r];let i=a[r];for(let e=0;e<n.length;e++)i+=n[e]*t[e];o[r]=Math.max(i,e*i)}r=t=o}if(!r)throw new Error("output was empty");return r}_runInputTanh(t){this.outputs[0]=t;let e=null;for(let r=1;r<=this.outputLayer;r++){const n=this.sizes[r],i=this.weights[r],s=this.biases[r],a=this.outputs[r];for(let e=0;e<n;e++){const r=i[e];let n=s[e];for(let e=0;e<r.length;e++)n+=r[e]*t[e];a[e]=Math.tanh(n)}e=t=a}if(!e)throw new Error("output was empty");return e}verifyIsInitialized(t){this.sizes.length||(this.sizes=[],this.sizes.push(t[0].input.length),this.options.hiddenLayers?this.options.hiddenLayers.forEach((t=>{this.sizes.push(t)})):this.sizes.push(Math.max(3,Math.floor(t[0].input.length/2))),this.sizes.push(t[0].output.length),this.initialize())}updateTrainingOptions(t){const e={...this.trainOpts,...t};this.validateTrainingOptions(e),this.trainOpts=e,this.setLogMethod(this.trainOpts.log)}validateTrainingOptions(t){const e={activation:()=>["sigmoid","relu","leaky-relu","tanh"].includes(t.activation),iterations:()=>{const e=t.iterations;return"number"==typeof e&&e>0},errorThresh:()=>{const e=t.errorThresh;return"number"==typeof e&&e>0&&e<1},log:()=>{const e=t.log;return"function"==typeof e||"boolean"==typeof e},logPeriod:()=>{const e=t.logPeriod;return"number"==typeof e&&e>0},leakyReluAlpha:()=>{const e=t.leakyReluAlpha;return"number"==typeof e&&e>0&&e<1},learningRate:()=>{const e=t.learningRate;return"number"==typeof e&&e>0&&e<1},momentum:()=>{const e=t.momentum;return"number"==typeof e&&e>0&&e<1},callback:()=>{const e=t.callback;return"function"==typeof e||void 0===e},callbackPeriod:()=>{const e=t.callbackPeriod;return"number"==typeof e&&e>0},timeout:()=>{const e=t.timeout;return"number"==typeof e&&e>0},praxis:()=>{const e=t.praxis;return!e||"adam"===e},beta1:()=>{const e=t.beta1;return e>0&&e<1},beta2:()=>{const e=t.beta2;return e>0&&e<1},epsilon:()=>{const e=t.epsilon;return e>0&&e<1}};for(const r in e){const n=t;if(!e[r]())throw new Error(`[${r}, ${n[r]}] is out of normal training range, your network will probably not train.`)}}getTrainOptsJSON(){const{activation:t,iterations:e,errorThresh:r,log:n,logPeriod:i,leakyReluAlpha:s,learningRate:a,momentum:o,callbackPeriod:u,timeout:h,praxis:l,beta1:c,beta2:p,epsilon:d}=this.trainOpts;return{activation:t,iterations:e,errorThresh:r,log:"function"==typeof n||"boolean"==typeof n&&n,logPeriod:i,leakyReluAlpha:s,learningRate:a,momentum:o,callbackPeriod:u,timeout:h===1/0?"Infinity":h,praxis:l,beta1:c,beta2:p,epsilon:d}}setLogMethod(t){this.trainOpts.log="function"==typeof t?t:!!t&&this.logTrainingStatus}logTrainingStatus(t){console.log(`iterations: ${t.iterations}, training error: ${t.error}`)}calculateTrainingError(t){let e=0;for(let r=0;r<t.length;++r)e+=this.trainPattern(t[r],!0);return e/t.length}trainPatterns(t){for(let e=0;e<t.length;++e)this.trainPattern(t[e])}trainingTick(t,e,r){const{callback:n,callbackPeriod:i,errorThresh:s,iterations:a,log:o,logPeriod:u}=this.trainOpts;return!(e.iterations>=a||e.error<=s||Date.now()>=r||(e.iterations++,o&&e.iterations%u==0?(e.error=this.calculateTrainingError(t),o(e)):e.iterations%this.errorCheckInterval==0?e.error=this.calculateTrainingError(t):this.trainPatterns(t),n&&e.iterations%i==0&&n({iterations:e.iterations,error:e.error}),0))}prepTraining(t,e={}){this.updateTrainingOptions(e);const r=this.formatData(t),n=Date.now()+this.trainOpts.timeout;return this.verifyIsInitialized(r),{preparedData:r,status:{error:1,iterations:0},endTime:n}}train(t,e={}){const{preparedData:r,status:n,endTime:i}=this.prepTraining(t,e);for(;this.trainingTick(r,n,i););return n}async trainAsync(t,e={}){const{preparedData:r,status:n,endTime:i}=this.prepTraining(t,e);return await new Promise(((t,e)=>{try{const e=new xr.Thaw(new Array(this.trainOpts.iterations),{delay:!0,each:()=>this.trainingTick(r,n,i)||e.stop(),done:()=>t(n)});e.tick()}catch(t){e(t)}}))}trainPattern(t,e){return this.runInput(t.input),this.calculateDeltas(t.output),this.adjustWeights(),e?Ir(this.errors[this.outputLayer]):null}_calculateDeltasSigmoid(t){for(let e=this.outputLayer;e>=0;e--){const r=this.sizes[e],n=this.outputs[e],i=this.errors[e],s=this.deltas[e],a=this.weights[e+1];for(let o=0;o<r;o++){const r=n[o];let u=0;if(e===this.outputLayer)u=t[o]-r;else{const t=this.deltas[e+1];for(let e=0;e<t.length;e++)u+=t[e]*a[e][o]}i[o]=u,s[o]=u*r*(1-r)}}}_calculateDeltasRelu(t){for(let e=this.outputLayer;e>=0;e--){const r=this.sizes[e],n=this.outputs[e],i=this.weights[e+1],s=this.deltas[e+1],a=this.errors[e],o=this.deltas[e];for(let u=0;u<r;u++){const r=n[u];let h=0;if(e===this.outputLayer)h=t[u]-r;else for(let t=0;t<s.length;t++)h+=s[t]*i[t][u];a[u]=h,o[u]=r>0?h:0}}}_calculateDeltasLeakyRelu(t){const e=this.trainOpts.leakyReluAlpha;for(let r=this.outputLayer;r>=0;r--){const n=this.sizes[r],i=this.outputs[r],s=this.deltas[r+1],a=this.weights[r+1],o=this.errors[r],u=this.deltas[r];for(let h=0;h<n;h++){const n=i[h];let l=0;if(r===this.outputLayer)l=t[h]-n;else for(let t=0;t<s.length;t++)l+=s[t]*a[t][h];o[h]=l,u[h]=n>0?l:e*l}}}_calculateDeltasTanh(t){for(let e=this.outputLayer;e>=0;e--){const r=this.sizes[e],n=this.outputs[e],i=this.deltas[e+1],s=this.weights[e+1],a=this.errors[e],o=this.deltas[e];for(let u=0;u<r;u++){const r=n[u];let h=0;if(e===this.outputLayer)h=t[u]-r;else for(let t=0;t<i.length;t++)h+=i[t]*s[t][u];a[u]=h,o[u]=(1-r*r)*h}}}adjustWeights(){const{learningRate:t,momentum:e}=this.trainOpts;for(let r=1;r<=this.outputLayer;r++){const n=this.outputs[r-1],i=this.sizes[r],s=this.deltas[r],a=this.changes[r],o=this.weights[r],u=this.biases[r];for(let r=0;r<i;r++){const i=s[r];for(let s=0;s<n.length;s++){let u=a[r][s];u=t*i*n[s]+e*u,a[r][s]=u,o[r][s]+=u}u[r]+=t*i}}}_setupAdam(){this.biasChangesLow=[],this.biasChangesHigh=[],this.changesLow=[],this.changesHigh=[],this.iterations=0;for(let t=0;t<=this.outputLayer;t++){const e=this.sizes[t];if(t>0){this.biasChangesLow[t]=I(e),this.biasChangesHigh[t]=I(e),this.changesLow[t]=new Array(e),this.changesHigh[t]=new Array(e);for(let r=0;r<e;r++){const e=this.sizes[t-1];this.changesLow[t][r]=I(e),this.changesHigh[t][r]=I(e)}}}this.adjustWeights=this._adjustWeightsAdam}_adjustWeightsAdam(){this.iterations++;const{iterations:t}=this,{beta1:e,beta2:r,epsilon:n,learningRate:i}=this.trainOpts;for(let s=1;s<=this.outputLayer;s++){const a=this.outputs[s-1],o=this.sizes[s],u=this.deltas[s],h=this.changesLow[s],l=this.changesHigh[s],c=this.weights[s],p=this.biases[s],d=this.biasChangesLow[s],g=this.biasChangesHigh[s];for(let s=0;s<o;s++){const o=u[s];for(let u=0;u<a.length;u++){const p=o*a[u],d=h[s][u]*e+(1-e)*p,g=l[s][u]*r+(1-r)*p*p,f=d/(1-Math.pow(e,t)),m=g/(1-Math.pow(r,t));h[s][u]=d,l[s][u]=g,c[s][u]+=i*f/(Math.sqrt(m)+n)}const f=u[s],m=d[s]*e+(1-e)*f,y=g[s]*r+(1-r)*f*f,x=d[s]/(1-Math.pow(e,t)),b=g[s]/(1-Math.pow(r,t));d[s]=m,g[s]=y,p[s]+=i*x/(Math.sqrt(b)+n)}}}formatData(t){if(!Array.isArray(t[0].input))if(this.inputLookup)this.inputLookupLength=Object.keys(this.inputLookup).length;else{const e=new dr(t,"input");this.inputLookup=e.table,this.inputLookupLength=e.length}if(!Array.isArray(t[0].output))if(this.outputLookup)this.outputLookupLength=Object.keys(this.outputLookup).length;else{const e=new dr(t,"output");this.outputLookup=e.table,this.outputLookupLength=e.length}if(this._formatInput||(this._formatInput=Dr(t[0].input,this.inputLookup)),this._formatOutput||(this._formatOutput=Dr(t[0].output,this.outputLookup)),this._formatInput&&this._formatOutput){const e=[];for(let r=0;r<t.length;r++)e.push({input:this._formatInput(t[r].input),output:this._formatOutput(t[r].output)});return e}if(this._formatInput){const e=[];for(let r=0;r<t.length;r++)e.push({input:this._formatInput(t[r].input),output:t[r].output});return e}if(this._formatOutput){const e=[];for(let r=0;r<t.length;r++)e.push({input:t[r].input,output:this._formatOutput(t[r].output)});return e}return t}addFormat(t){var e,r;Array.isArray(t.input)&&"number"==typeof t.input[0]||(this.inputLookup=B.addKeys(t.input,null!==(e=this.inputLookup)&&void 0!==e?e:{}),this.inputLookup&&(this.inputLookupLength=Object.keys(this.inputLookup).length)),Array.isArray(t.output)&&"number"==typeof t.output[0]||(this.outputLookup=B.addKeys(t.output,null!==(r=this.outputLookup)&&void 0!==r?r:{}),this.outputLookup&&(this.outputLookupLength=Object.keys(this.outputLookup).length))}test(t){const{preparedData:e}=this.prepTraining(t),r=[];let n=0;if(1===e[0].output.length){let t=0,i=0,s=0,a=0;for(let o=0;o<e.length;o++){const u=this.runInput(e[o].input),h=e[o].output,l=u[0]>this.options.binaryThresh?1:0,c=h[0];if(l!==c){const t=e[o];r.push({input:t.input,output:t.output,actual:l,expected:c})}0===l&&0===c?a++:1===l&&1===c?s++:0===l&&1===c?i++:1===l&&0===c&&t++,n+=Ir(u.map(((t,e)=>h[e]-t)))}return{error:n/e.length,misclasses:r,total:e.length,trueNeg:a,truePos:s,falseNeg:i,falsePos:t,precision:s>0?s/(s+t):0,recall:s>0?s/(s+i):0,accuracy:(a+s)/e.length}}for(let t=0;t<e.length;t++){const i=this.runInput(e[t].input),s=e[t].output,a=i.indexOf(Lr(i)),o=s.indexOf(Lr(s));if(a!==o){const n=e[t];r.push({input:n.input,output:n.output,actual:a,expected:o})}n+=Ir(i.map(((t,e)=>s[e]-t)))}return{error:n/e.length,misclasses:r,total:e.length}}toJSON(){var t,e;this.isRunnable||this.initialize();const r=this.weights.map((t=>t.map((t=>Array.from(t))))),n=this.biases.map((t=>Array.from(t))),i=[],s=this.sizes.length-1;for(let a=0;a<=s;a++)i.push({weights:null!==(t=r[a])&&void 0!==t?t:[],biases:null!==(e=n[a])&&void 0!==e?e:[]});return{type:"NeuralNetwork",sizes:[...this.sizes],layers:i,inputLookup:this.inputLookup?{...this.inputLookup}:null,inputLookupLength:this.inputLookupLength,outputLookup:this.outputLookup?{...this.outputLookup}:null,outputLookupLength:this.outputLookupLength,options:{...this.options},trainOpts:this.getTrainOptsJSON()}}fromJSON(t){if(this.options={inputSize:0,outputSize:0,binaryThresh:.5,...t.options},t.hasOwnProperty("trainOpts")){const e={...t.trainOpts,timeout:"Infinity"===t.trainOpts.timeout?1/0:t.trainOpts.timeout};this.updateTrainingOptions(e)}this.sizes=t.sizes,this.initialize(),this.inputLookup=t.inputLookup?{...t.inputLookup}:null,this.inputLookupLength=t.inputLookupLength,this.outputLookup=t.outputLookup?{...t.outputLookup}:null,this.outputLookupLength=t.outputLookupLength;const e=t.layers,r=this.weights.map(((t,r)=>e[r].weights.map((t=>Float32Array.from(t))))),n=this.biases.map(((t,r)=>Float32Array.from(e[r].biases)));for(let t=0;t<=this.outputLayer;t++)this.weights[t]=r[t]||[],this.biases[t]=n[t]||[];return this}toFunction(t){const{activation:e,leakyReluAlpha:r}=this.trainOpts;let n=!1;const i=(t,s)=>{if(0===t)return`(input[${s}]||0)`;const a=this.weights[t][s],o=this.biases[t][s];if(!a)throw new Error(`weights at layerIndex ${t} & nodeIndex ${s} not found`);if(!o)throw new Error(`bias as layerIndex ${t} & nodeIndex ${s} not found`);const u=[];a.forEach(((e,r)=>{e<0?u.push(`${e}*${i(t-1,r)}`):u.push(`+${e}*${i(t-1,r)}`)}));const h=`(${o.toString()}${u.join("")})`;switch(e){case"sigmoid":return`1/(1+1/Math.exp(${h}))`;case"relu":return n=!0,`((v=${h})<0?0:v)`;case"leaky-relu":return n=!0,`Math.max((v=${h}),${r}*v)`;case"tanh":return`Math.tanh(${h})`;default:throw new Error(`Unknown activation ${e}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`)}};function s(t){if(t.find((t=>t.includes('"'))))throw new Error("key contains '\"', which is not compatible")}const a=[];let o,u="";if(this.inputLookup&&(s(Object.keys(this.inputLookup)),u=`input = new Float32Array([${Object.keys(this.inputLookup).map((t=>`input["${t}"]`)).join(",")}]);`),this.sizes.length<1)throw new Error("No layers");for(let t=0;t<this.sizes[this.outputLayer];t++)a.push(i(this.outputLayer,t));if(this.outputLookup){const t=Object.keys(this.outputLookup);s(t),o=`{${t.map(((t,e)=>`"${t}":${a[e]}`)).join(",")}}`}else o=`[${a.join(",")}]`;const h=`${u}${n?"var v;":""}return ${o};`;return new Function("input",t?t(h):h)}}function Or(t,e,r){let n=e[this.thread.x];for(let e=0;e<this.constants.size;e++)n+=t[this.thread.x][e]*r[e];return 1/(1+Math.exp(-n))}function Cr(t,e,r){let n=e[this.thread.x];for(let e=0;e<this.constants.size;e++)n+=t[this.thread.x][e]*r[e];return n<0?0:n}function Fr(t,e,r){let n=e[this.thread.x];for(let e=0;e<this.constants.size;e++)n+=t[this.thread.x][e]*r[e];return n<0?0:.01*n}function Rr(t,e,r){let n=e[this.thread.x];for(let e=0;e<this.constants.size;e++)n+=t[this.thread.x][e]*r[e];return Math.tanh(n)}function zr(t,e){return e-t}function Mr(t,e){return t*e*(1-e)}function Nr(t,e){return e>0?t:0}function Vr(t,e){return e>0?t:.01*t}function Pr(t,e){return(1-e*e)*t}function Kr(t,e,r,n){let i=0;for(let s=0;s<e;s++)i+=n[s]*r[s][t];return i}function Gr(t,e,r,n,i){return t*n*i+e*r}function Ur(t,e){return t+e}function Br(t,e){return t[this.thread.x]+e[this.thread.x]*this.constants.learningRate}function jr(t){let e=0;for(let r=0;r<this.constants.size;r++)e+=t[r]**2;return e/this.constants.size}class Wr extends $r{constructor(t={}){super(t),this.texturizeInputData=()=>{throw new Error("not yet setup")},this.forwardPropagate=[],this.backwardPropagate=[],this.changesPropagate=[],this.biasesPropagate=[],this.getMSE=()=>{throw new Error("not yet setup")},this._addMSE=()=>{throw new Error("not yet setup")},this._divideMSESum=()=>{throw new Error("not yet setup")},this.outputs=[],this.deltas=[],this.errors=[],this.weights=[],this.changes=[],this.biases=[],this.runInput=t=>{let e;this.outputs[0]=t;for(let r=1;r<=this.outputLayer;r++)T(this.outputs[r]),this.outputs[r]=this.forwardPropagate[r](this.weights[r],this.biases[r],t),e=t=this.outputs[r];return e},this.calculateDeltas=t=>{for(let e=this.outputLayer;e>0;e--){let r;T(this.deltas[e]),T(this.errors[e]),r=e===this.outputLayer?this.backwardPropagate[e](this.outputs[e],t):this.backwardPropagate[e](this.weights[e+1],this.outputs[e],this.deltas[e+1]),this.deltas[e]=r.result,this.errors[e]=r.error}},this.errorCheckInterval=100,this.gpu=new e.GPU({mode:t.mode})}initialize(){super.initialize(),this.buildRunInput(),this.buildCalculateDeltas(),this.buildGetChanges(),this.buildChangeBiases(),this.buildGetMSE()}setActivation(){}trainPattern(t,e){return this.runInput(t.input),this.calculateDeltas(t.output),this.adjustWeights(),e?this.getMSE(this.errors[this.outputLayer]):null}calculateTrainingError(t){let r=new Float32Array([0]);for(let e=0;e<t.length;++e){const n=r,i=this.trainPattern(t[e],!0);r=this._addMSE(r,i),T(i),T(n)}const n=this._divideMSESum(t.length,r);return T(r),(n instanceof e.Texture?n.toArray():n)[0]}adjustWeights(){this.getChanges(),this.changeBiases()}buildRunInput(){let t=null;switch(this.trainOpts.activation){case"sigmoid":t=Or;break;case"relu":t=Cr;break;case"leaky-relu":t=Fr;break;case"tanh":t=Rr;break;default:throw new Error(`Unknown activation ${this.trainOpts.activation}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`)}for(let e=1;e<=this.outputLayer;e++)this.forwardPropagate[e]=this.gpu.createKernel(t,{output:[this.sizes[e]],pipeline:!0,constants:{size:this.sizes[e-1]},immutable:!0});this.texturizeInputData=this.gpu.createKernel((function(t){return t[this.thread.x]}),{output:[this.sizes[1]],pipeline:!0,immutable:!0})}buildCalculateDeltas(){let t;switch(this.trainOpts.activation){case"sigmoid":t=Mr;break;case"relu":t=Nr;break;case"leaky-relu":t=Vr;break;case"tanh":t=Pr;break;default:throw new Error(`Unknown activation ${this.trainOpts.activation}. Available activations are: 'sigmoid', 'relu', 'leaky-relu', 'tanh'`)}t=e.alias(e.utils.getMinifySafeName((()=>t)),t),this.gpu.addFunction(t);for(let e=this.outputLayer;e>0;e--)e===this.outputLayer?this.backwardPropagate[this.outputLayer]=this.gpu.createKernelMap({error:zr},(function(e,r){const n=e[this.thread.x],i=r[this.thread.x];return t(zr(n,i),n)}),{output:[this.sizes[this.outputLayer]],pipeline:!0,immutable:!0}):this.backwardPropagate[e]=this.gpu.createKernelMap({error:Kr},(function(e,r,n){const i=r[this.thread.x];return t(Kr(this.thread.x,this.constants.size,e,n),i)}),{output:[this.sizes[e]],pipeline:!0,constants:{size:this.sizes[e+1]},immutable:!0})}buildGetChanges(){for(let t=1;t<=this.outputLayer;t++)this.changesPropagate[t]=this.gpu.createKernelMap({weights:Ur,changes:Gr},(function(t,e,r,n){return Ur(Gr(this.constants.learningRate,this.constants.momentum,n[this.thread.y][this.thread.x],e[this.thread.y],t[this.thread.x]),r[this.thread.y][this.thread.x])}),{output:[this.sizes[t-1],this.sizes[t]],pipeline:!0,constants:{size:this.sizes[t-1],learningRate:this.trainOpts.learningRate,momentum:this.trainOpts.momentum},immutable:!0})}getChanges(){for(let t=1;t<=this.outputLayer;t++){const e=this.weights[t],r=this.changes[t],n=this.changesPropagate[t](this.outputs[t-1],this.deltas[t],e,r);T(e),T(r),this.weights[t]=n.weights,this.changes[t]=n.changes,T(n.result)}}buildChangeBiases(){for(let t=1;t<=this.outputLayer;t++)this.biasesPropagate[t]=this.gpu.createKernel(Br,{output:[this.sizes[t]],pipeline:!0,constants:{learningRate:this.trainOpts.learningRate},immutable:!0})}changeBiases(){for(let t=1;t<=this.outputLayer;t++){const e=this.biases[t];this.biases[t]=this.biasesPropagate[t](e,this.deltas[t]),T(e)}}buildGetMSE(){this.getMSE=this.gpu.createKernel(jr,{output:[1],constants:{size:this.sizes[this.outputLayer]},pipeline:!0,immutable:!0}),this._addMSE=this.gpu.createKernel((function(t,e){return t[0]+e[0]}),{output:[1],pipeline:!0,immutable:!0}),this._divideMSESum=this.gpu.createKernel((function(t,e){const r=e[0];return r>0?r/t:0}),{output:[1]})}run(t){if(!this.isRunnable)throw new Error("network not runnable");let r;r=this.inputLookup?B.toArray(this.inputLookup,t,this.inputLookupLength):t;const n=this.runInput(r),i=n instanceof e.Texture?n.toArray():n;return this.outputLookup?B.toObject(this.outputLookup,i):i}prepTraining(t,e={}){this.updateTrainingOptions(e);const r=this.formatData(t),n=Date.now()+this.trainOpts.timeout;this.verifyIsInitialized(r);const i=this.gpu.createKernel((function(t){return t[this.thread.x]}),{output:[r[0].output.length],pipeline:!0,immutable:!0});return{preparedData:r.map((t=>({input:this.texturizeInputData(t.input),output:i(t.output)}))),status:{error:1,iterations:0},endTime:n}}toFunction(){throw new Error(`${this.constructor.name}-toFunction is not yet implemented`)}toJSON(){var t,r;null===this.sizes&&this.initialize();const n=this.weights.map((t=>(t instanceof e.Texture?t.toArray():t).map((t=>Array.from(t))))),i=this.biases.map((t=>Array.from(t instanceof e.Texture?t.toArray():t))),s=[];for(let e=0;e<=this.outputLayer;e++)s.push({weights:null!==(t=n[e])&&void 0!==t?t:[],biases:null!==(r=i[e])&&void 0!==r?r:[]});return{type:"NeuralNetworkGPU",sizes:[...this.sizes],layers:s,inputLookup:this.inputLookup?{...this.inputLookup}:null,inputLookupLength:this.inputLookupLength,outputLookup:this.outputLookup?{...this.outputLookup}:null,outputLookupLength:this.outputLookupLength,options:{...this.options},trainOpts:this.getTrainOptsJSON()}}}class Hr extends F{constructor(){super(...arguments),this.settings={},this.layer=null}setLayer(t){this.layer=t}get width(){if(!this.layer)throw new Error("layer not set");return this.layer.width}set width(t){throw new Error(`${this.constructor.name}-width is not yet implemented`)}get height(){if(!this.layer)throw new Error("layer not set");return this.layer.height}set height(t){throw new Error(`${this.constructor.name}-height is not yet implemented`)}get deltas(){if(!this.layer)throw new Error("layer not set");return this.layer.deltas}set deltas(t){if(!this.layer)throw new Error("layer not set");T(this.layer.deltas),this.layer.deltas=t}get weights(){if(!this.layer)throw new Error("layer not set");return this.layer.weights}set weights(t){if(!this.layer)throw new Error("layer not set");T(this.layer.weights),this.layer.weights=t}predict(){}compare(){}learn(){throw new Error("no longer using")}setupKernels(){}reuseKernels(){}}class Xr extends mr{constructor(t={}){super(t),this.trainOpts={},this._outputConnection=null,this._layerSets=[],this._hiddenLayerOutputIndices=[],this._model=null}_connectLayers(){if(!this.options.inputLayer)throw new Error("inputLayer not found");if(!this.options.outputLayer)throw new Error("outputLayer not found");const t=this.options.inputLayer(),e=this._connectHiddenLayers(t);return{inputLayer:t,hiddenLayers:e,outputLayer:this.options.outputLayer(e[e.length-1],-1)}}_connectLayersDeep(){const t=[],e=this._layerSets[this._layerSets.length-1];let r=0;function n(r){const n=e.indexOf(r);if(n<0)throw new Error("unable to find layer");return t[n]}function i(t){return{...t.settings,weights:null,deltas:null,praxis:null}}for(let s=0;s<e.length;s++){const a=e[s];let o;if(a instanceof O)o=new a.constructor(n(a.inputLayer),i(a));else if(a instanceof G)o=new a.constructor(i(a));else if(a instanceof C)o=new a.constructor(i(a.inputLayer),n(a.inputLayer));else if(a instanceof F){const t=e[this._hiddenLayerOutputIndices[r++]];if(a instanceof Hr)throw new Error("unfinished");if(a instanceof Ne)o=new Ne(t);else{if(!(a instanceof Ve))throw new Error(`hidden layer ${a.constructor.name} extends unknown hidden layer`);o=new Ne(t)}}else if(a instanceof K||a instanceof U)o=a;else if(a instanceof R)o=new a.constructor(n(a.inputLayer),i(a.inputLayer));else if(a instanceof z)o=new a.constructor(n(a.inputLayer1),n(a.inputLayer2),i(a));else{if(!(a instanceof V))throw new Error(`hidden layer ${a.constructor.name} extends unknown hidden layer`);o=new a.constructor(i(a),n(a.inputLayer))}t.push(o)}return t}_connectHiddenLayers(t){const e=[];if(!this.options.hiddenLayers)throw new Error("hiddenLayers not defined");for(let r=0;r<this.options.hiddenLayers.length;r++){const n=new Ve,i=this.options.hiddenLayers[r](t,n,r);t=i,e.push(i)}return e}initialize(){let t;if(this._outputConnection=new Hr,this.options.layers)t=this._connectOptionsLayers();else{const{inputLayer:e,hiddenLayers:r,outputLayer:n}=this._connectLayers();t=ct([e,...r,n]),this._hiddenLayerOutputIndices=r.map((e=>t.indexOf(e))),this._inputLayer=e,this._hiddenLayers=r,this._outputLayer=n}this.layers=t,this._layerSets=[t],this._model=t.filter((t=>t instanceof U||t instanceof K)),this.initializeLayers(t)}initializeDeep(){const t=this._connectLayersDeep();for(let e=0;e<t.length;e++)t[e].setupKernels(!0);this._layerSets.push(t)}run(t){for(;this._layerSets.length<=t.length;)this.initializeDeep();const r=this.runInputs(t);return r instanceof e.Texture?r.toArray():r}runInput(t){throw new Error("use .runInputs()")}runInputs(t){for(;this._layerSets.length<t.length;)this.initializeDeep();const e=t.length-1;for(let r=0;r<=e;r++){const e=this._layerSets[r];e[0].predict(t[r]);for(let t=1;t<e.length;t++)e[t].predict()}const r=this._layerSets[e],n=r[r.length-1].weights;return this.end(),n}train(t,e={}){const{preparedData:r,status:n,endTime:i}=this._prepTraining(t,e);let s=!0;const a=()=>this._calculateTrainingError(r),o=()=>this._trainPatterns(r);for(;s;)s=this._trainingTick(n,i,a,o);return n}end(){const t=this._layerSets.length-1,e=this._layerSets[t];e[0].predict([new Float32Array([0])]);for(let t=1;t<e.length;t++)e[t].predict()}transferData(t){return t}_prepTraining(t,e){this._updateTrainingOptions(e);const r=this.trainOpts.timeout?Date.now()+this.trainOpts.timeout:0;return this.verifyIsInitialized(),{preparedData:this.transferData(t),status:{error:1,iterations:0},endTime:r}}_calculateTrainingError(t){if(!this.meanSquaredError)throw new Error("this.meanSquaredError not setup");let r=new Float32Array(1);for(let e=0;e<t.length;++e){const n=r,i=this._trainPattern(t[e],!0);r=this.meanSquaredError.add(r,i),T(i),T(n)}const n=this.meanSquaredError.divide(t.length,r);return T(r),n instanceof e.Texture?n.toArray()[0]:n[0]}formatData(t){return t}_calculateDeltas(t){const e=this._layerSets[this._layerSets.length-1];for(let t=e.length-2;t>=0;t--)e[t].compare();for(let e=t.length-2;e>=0;e--){const r=this._layerSets[e];r[r.length-1].compare(t[e+1]);for(let t=r.length-2;t>=0;t--)r[t].compare()}}adjustWeights(){var t;const e=this._model;for(let r=0;r<e.length;r++)e[r].learn(null!==(t=this.options.learningRate)&&void 0!==t?t:0)}_trainPatterns(t){for(let e=0;e<t.length;++e)this._trainPattern(t[e],!1)}_trainPattern(t,e){if(this.runInputs(t),this._calculateDeltas(t),this.adjustWeights(),e){if(!this.meanSquaredError)throw new Error("this.meanSquaredError not setup");let e=new Float32Array(1);for(let r=0,n=t.length-1;r<=n;r++){const t=this._layerSets[r],n=t[t.length-1],i=e;e=this.meanSquaredError.addAbsolute(i,n.errors),T(i)}return S(this.meanSquaredError.divide(t.length,e))}return null}}class qr{constructor(t,e){this.rows=0,this.columns=0,t&&(this.rows=t),e&&(this.columns=e),this.weights=I(this.rows*this.columns),this.deltas=I(this.rows*this.columns)}getWeight(t,e){const r=this.columns*t+e;if(r<0||r>=this.weights.length)throw new Error("get accessor is skewed");return this.weights[r]}setWeight(t,e,r){const n=this.columns*t+e;if(n<0||n>=this.weights.length)throw new Error("set accessor is skewed");return this.weights[n]=r,this}getDelta(t,e){const r=this.columns*t+e;if(r<0||r>=this.deltas.length)throw new Error("get accessor is skewed");return this.deltas[r]}setDelta(t,e,r){const n=this.columns*t+e;if(n<0||n>=this.weights.length)throw new Error("set accessor is skewed");return this.deltas[n]=r,this}toJSON(){return{rows:this.rows,columns:this.columns,weights:Array.from(this.weights.slice(0))}}static fromJSON(t){const e=new qr(t.rows,t.columns);for(let r=0,n=t.rows*t.columns;r<n;r++)e.weights[r]=t.weights[r];return e}static fromArray(t){const e=new qr(t.length,t[0].length);return e.fromArray(t),e}deltasToArray(){return this.toArray("deltas")}weightsToArray(){return this.toArray("weights")}toArray(t="weights"){const e=new Array(this.rows);return this.iterate({row:t=>{e[t]=new Array(this.columns)},column:(r,n)=>{"weights"===t?e[r][n]=this.getWeight(r,n):"deltas"===t&&(e[r][n]=this.getDelta(r,n))}}),e}fromArray(t,e="weights"){if(t.length!==this.rows)throw new Error("rows do not match");if(t[0].length!==this.columns)throw new Error("columns do not match");return this.iterate({column:(r,n)=>{const i=t[r][n];if("number"!=typeof i)throw new Error("value not number");"weights"===e?this.setWeight(r,n,i):"deltas"===e&&this.setDelta(r,n,i)}}),this}iterate(t){const e=this.rows,r=this.columns;for(let n=0;n<e;n++){t.row&&t.row(n);for(let e=0;e<r;e++)t.column&&t.column(n,e)}return this}}class Yr extends qr{constructor(t,e,r){super(t,e),this.std=r;for(let t=0,e=this.weights.length;t<e;t++)this.weights[t]=yt(-r,r)}}class Jr{constructor(t,e=0){this.values=t,this.indexTable={},this.characterTable={},this.characters=[],this.specialIndexes=[],this.isSetup=!1,void 0!==t&&this.setup(t,e)}setup(t,e=0){if(this.isSetup)throw new Error("DataFormatter is already setup");this.values=t,this.buildCharactersFromIterable(t),this.buildTables(e),t[0].input&&this.addInputOutput(),this.addUnrecognized(),this.isSetup=!0}buildCharactersFromIterable(t){const e={};for(let r=0,n=t.length;r<n;r++){const n=t[r];if(n.hasOwnProperty("length")){const t=n;for(let r=0,n=t.length;r<n;r++){const n=t[r];e.hasOwnProperty(n)||(e[n]=!0,this.characters.push(n))}}else if("number"==typeof n){if(e.hasOwnProperty(n))continue;e[n]=!0,this.characters.push(n)}else if("boolean"==typeof n){const t=n.toString();if(e.hasOwnProperty(t))continue;e[t]=!0,this.characters.push(t)}else if(Array.isArray(n)&&"string"==typeof n[0])for(let t=0;t<n.length;t++){const r=n[t];e.hasOwnProperty(r)||(e[r]=!0,this.characters.push(r))}else if(!Array.isArray(n)||"number"!=typeof n[0]&&"boolean"!=typeof n[0]){if(!n.hasOwnProperty("input")||!n.hasOwnProperty("output"))throw new Error("Unhandled value");{const{input:t,output:r}=n;Array.isArray(t)?this.addCharacters(t,e):this.addCharacters(t.toString(),e),Array.isArray(r)?this.addCharacters(r,e):this.addCharacters(r.toString(),e)}}else for(let t=0;t<n.length;t++){const i=n[t].toString();e.hasOwnProperty(r)||(e[i]=!0,this.characters.push(i))}}}addCharacters(t,e){for(let r=0;r<t.length;r++){const n=t[r].toString();e.hasOwnProperty(n)||(e[n]=!0,this.characters.push(n))}}buildTables(t){const e=this.characters.length;for(let r=0;r<e;r++){const e=this.characters[r];r>=t&&(this.indexTable[e]=r,this.characterTable[r]=e)}}toIndexes(t,e=0){const r=[],{indexTable:n}=this;switch(typeof t){case"number":case"boolean":t=t.toString()}for(let i=0,s=t.length;i<s;i++){const s=t[i].toString();let a=n[s];if(void 0===a){if(!n.unrecognized)throw new Error(`unrecognized character "${s}"`);a=n.unrecognized}a<e||r.push(a)}return r}toIndexesInputOutput(t,e,r=0){const n=this.toIndexesValue(t,r,!0);return void 0===e?n:n.concat(this.toIndexesValue(e,r,!1))}toIndexesValue(t,e,r){if("string"==typeof t)t=t.split("");else if("number"==typeof t||"boolean"==typeof t)t=t.toString().split("");else{if(!Array.isArray(t)||"number"!=typeof t[0]&&"boolean"!=typeof t[0]&&"string"!=typeof t[0])throw new Error("unrecognized value");t=t.map((t=>t.toString()))}return r&&(t=t.concat(["stop-input","start-output"])),this.toIndexes(t,e)}toCharacters(t,e=0){const r=[],{indexTable:n,characterTable:i}=this;for(let s=0,a=t.length;s<a;s++){const a=t[s];if(a<e)continue;let o=i[a];if(void 0===o){if(!n.unrecognized)throw new Error(`unrecognized index "${a}"`);o=i[n.unrecognized]}else null!==o&&r.push(o.toString())}return r}toString(t,e){return this.toCharacters(t,e).join("")}addInputOutput(){this.addSpecial("stop-input"),this.addSpecial("start-output")}addUnrecognized(){this.addSpecial("unrecognized")}static fromAllPrintable(t,e=["\n"]){for(let t=32;t<=126;t++)e.push(String.fromCharCode(t));return new Jr(e,t)}static fromAllPrintableInputOutput(t,e=["\n"]){const r=Jr.fromAllPrintable(t,e);return r.addInputOutput(),r.addUnrecognized(),r}static fromStringInputOutput(t,e){const r=Array.from(new Set(t)).join(""),n=new Jr(r.split(""),e);return n.addInputOutput(),n.addUnrecognized(),n.isSetup=!0,n}static fromArrayInputOutput(t,e){const r=[];for(let e=0;e<t.length;e++){const n=t[e];r.push(Zr(n.input),Zr(n.output))}const n=Array.isArray(r)?r.flat():r,i=new Jr(Array.from(new Set(n)),e);return i.addInputOutput(),i.addUnrecognized(),i.isSetup=!0,i}static fromString(t,e=0){const r=Array.from(new Set(t)).join("");return new Jr(r.split(""),e)}toJSON(){return{indexTable:this.indexTable,characterTable:this.characterTable,values:this.values,characters:this.characters,specialIndexes:this.specialIndexes}}static fromJSON(t){const e=new Jr;return e.indexTable=t.indexTable,e.characterTable=t.characterTable,e.values=t.values,e.characters=t.characters,e.specialIndexes=t.specialIndexes,e}addSpecial(t,e=null){const r=this.indexTable[t]=this.characters.length;this.characterTable[r]=e,this.specialIndexes.push(this.characters.length),this.characters.push(t)}toFunctionString(){return`\nvar characterTable = ${JSON.stringify(this.characterTable)};\nvar indexTable = ${JSON.stringify(this.indexTable)};\nvar characters = ${JSON.stringify(this.characters)};\nvar dataFormatter = {\n  toIndexes: function ${this.toIndexes.toString()},\n  toIndexesInputOutput: function ${this.toIndexesInputOutput.toString()},\n  toCharacters: function ${this.toCharacters.toString()},\n  toIndexesValue: function ${this.toIndexesValue.toString()},\n};`}formatDataIn(t,e){var r;return void 0===t?[]:Array.isArray(t)&&"number"==typeof t[0]?t:(null===(r=this.indexTable)||void 0===r?void 0:r.hasOwnProperty("stop-input"))?this.toIndexesInputOutput(t,e):this.toIndexes(t)}formatDataOut(t,e){return this.toCharacters(e).join("")}format(t){if(!("number"!=typeof t[0]||Array.isArray(t[0])||t[0].hasOwnProperty("input")&&t[0].hasOwnProperty("output")))return t;const e=[];if("string"==typeof t[0]||"number"==typeof t[0]||Array.isArray(t[0]))if(this.isSetup)for(let r=0,n=t.length;r<n;r++)e.push(this.formatDataIn(t[r]));else{this.setup(t);for(let r=0;r<t.length;r++)e.push(this.formatDataIn(Zr(t[r])))}else{if(!t[0].input||!t[0].output)throw new Error("unrecognized data");this.isSetup||this.setup(t);for(let r=0,n=t.length;r<n;r++)e.push(this.formatDataIn(Zr(t[r].input),Zr(t[r].output)))}return e}}function Zr(t){if("string"==typeof t)return t;if("number"==typeof t)return t.toString();if("boolean"==typeof t)return t.toString();if(Array.isArray(t)&&"string"==typeof t[0])return t;if("boolean"==typeof t[0])return t.map((t=>t.toString()));if("number"==typeof t[0])return t.map((t=>t.toString()));throw new Error("unrecognized value, expected string[], string, number[], number, boolean[], or boolean")}function Qr(t,e,r){for(let n=0;n<e.weights.length;n++)t.weights[n]=e.weights[n]+r.weights[n],t.deltas[n]=0}function tn(t,e,r){for(let n=0;n<t.deltas.length;n++)e.deltas[n]=t.deltas[n],r.deltas[n]=t.deltas[n]}function en(t){for(let e=0;e<t.weights.length;e++)t.weights[e]=1,t.deltas[e]=0}function rn(t,e){t.rows=e.rows,t.columns=e.columns,t.weights=e.weights.slice(0),t.deltas=e.deltas.slice(0);for(let r=0;r<e.weights.length;r++)t.weights[r]=-e.weights[r],t.deltas[r]=0}function nn(t,e,r){const n=e.rows,i=e.columns,s=r.columns;for(let a=0;a<n;a++){const n=i*a,o=s*a;for(let a=0;a<s;a++){let u=0;for(let t=0;t<i;t++){const i=n+t,o=s*t+a;u+=e.weights[i]*r.weights[o],e.deltas[i]=0,r.deltas[o]=0}t.weights[o+a]=u}}}function sn(t,e,r){const n=e.rows,i=e.columns,s=r.columns;for(let a=0;a<n;a++){const n=i*a,o=s*a;for(let a=0;a<s;a++)for(let u=0;u<i;u++){const i=n+u,h=s*u+a,l=t.deltas[o+a];e.deltas[i]+=r.weights[h]*l,r.deltas[h]+=e.weights[i]*l}}}function an(t,e,r){const{weights:n}=e;for(let i=0;i<n.length;i++)t.weights[i]=e.weights[i]*r.weights[i],t.deltas[i]=0}function on(t,e,r){for(let n=0;n<e.weights.length;n++)e.deltas[n]=r.weights[n]*t.deltas[n],r.deltas[n]=e.weights[n]*t.deltas[n]}function un(t,e){for(let r=0;r<e.weights.length;r++)t.weights[r]=Math.max(0,e.weights[r]),t.deltas[r]=0}function hn(t,e){for(let r=0;r<t.deltas.length;r++)e.deltas[r]=e.weights[r]>0?t.deltas[r]:0}function ln(t,e,r){const{columns:n}=e,i=n*r;for(let r=0;r<n;r++)t.weights[r]=e.weights[i+r],t.deltas[r]=0}function cn(t,e,r){const{columns:n}=e,i=n*r;for(let r=0;r<n;r++)e.deltas[i+r]=t.deltas[r]}function pn(t,e){for(let r=0;r<e.weights.length;r++)t.weights[r]=1/(1+Math.exp(-e.weights[r])),t.deltas[r]=0}function dn(t,e){for(let r=0;r<t.deltas.length;r++){const n=t.weights[r];e.deltas[r]=n*(1-n)*t.deltas[r]}}function gn(t){const e=new qr(t.rows,t.columns);let r=-999999;for(let e=0;e<t.weights.length;e++)t.weights[e]>r&&(r=t.weights[e]);let n=0;for(let i=0;i<t.weights.length;i++)e.weights[i]=Math.exp(t.weights[i]-r),n+=e.weights[i];for(let r=0;r<t.weights.length;r++)e.weights[r]/=n;return e}function fn(t,e){for(let r=0;r<e.weights.length;r++)t.weights[r]=Math.tanh(e.weights[r]),t.deltas[r]=0}function mn(t,e){for(let r=0;r<t.deltas.length;r++){const n=t.weights[r];e.deltas[r]=(1-n*n)*t.deltas[r]}}class yn{constructor(){this.states=[],this.inputRow=0}add(t,e){if(t.weights.length!==e.weights.length)throw new Error("misaligned matrices");const r=new qr(t.rows,t.columns);return this.states.push({name:"add",product:r,left:t,right:e,forwardFn:Qr,backpropagationFn:tn}),r}allOnes(t,e){const r=new qr(t,e);return this.states.push({name:"allOnes",product:r,left:r,forwardFn:en,backpropagationFn:()=>{}}),r}cloneNegative(t){const e=new qr(t.rows,t.columns);return this.states.push({name:"cloneNegative",product:e,left:t,forwardFn:rn,backpropagationFn:()=>{}}),e}subtract(t,e){if(t.weights.length!==e.weights.length)throw new Error("misaligned matrices");return this.add(this.add(this.allOnes(t.rows,t.columns),this.cloneNegative(t)),e)}multiply(t,e){if(t.columns!==e.rows)throw new Error("misaligned matrices");const r=new qr(t.rows,e.columns);return this.states.push({name:"multiply",product:r,left:t,right:e,forwardFn:nn,backpropagationFn:sn}),r}multiplyElement(t,e){if(t.weights.length!==e.weights.length)throw new Error("misaligned matrices");const r=new qr(t.rows,t.columns);return this.states.push({name:"multiplyElement",product:r,left:t,right:e,forwardFn:an,backpropagationFn:on}),r}relu(t){const e=new qr(t.rows,t.columns);return this.states.push({name:"relu",product:e,left:t,forwardFn:un,backpropagationFn:hn}),e}input(t){return this.states.push({name:"input",product:t,forwardFn:e=>{if(this.inputValue){if(this.inputValue.length!==e.weights.length)throw new Error("this.inputValue is of wrong dimensions");e.weights=t.weights=this.inputValue}},backpropagationFn:()=>{}}),t}inputMatrixToRow(t){const e=this,r=new qr(t.columns,1);return this.states.push({name:"inputMatrixToRow",product:r,left:t,get right(){return e.inputRow},forwardFn:ln,backpropagationFn:cn}),r}sigmoid(t){const e=new qr(t.rows,t.columns);return this.states.push({name:"sigmoid",product:e,left:t,forwardFn:pn,backpropagationFn:dn}),e}tanh(t){const e=new qr(t.rows,t.columns);return this.states.push({name:"tanh",product:e,left:t,forwardFn:fn,backpropagationFn:mn}),e}observe(t){return this.states.push({name:"observe",product:new qr,forwardFn:()=>{},backpropagationFn:()=>{}}),t}runIndex(t=0){this.inputRow=t;let e=this.states[0];for(let t=0,r=this.states.length;t<r;t++)e=this.states[t],e.hasOwnProperty("forwardFn")&&e.forwardFn(e.product,e.left,e.right);return e.product}runInput(t){this.inputValue=t;let e=this.states[0];for(let t=0,r=this.states.length;t<r;t++)e=this.states[t],e.hasOwnProperty("forwardFn")&&e.forwardFn(e.product,e.left,e.right);return e.product}backpropagate(){let t=this.states.length,e=this.states[0];for(;t-- >0;)e=this.states[t],e.hasOwnProperty("backpropagationFn")&&e.backpropagationFn(e.product,e.left,e.right);return e.product}backpropagateIndex(t=0){this.inputRow=t;let e=this.states.length,r=this.states[0];for(;e-- >0;)r=this.states[e],r.hasOwnProperty("backpropagationFn")&&r.backpropagationFn(r.product,r.left,r.right);return r.product}predictTarget(t,e){let r=0;const n=this.runInput(t);for(let t=0;t<n.weights.length;t++){const i=n.weights[t]-e[t];r+=Math.abs(i),n.deltas[t]=i}return r}predictTargetIndex(t,e){const r=this.runIndex(t),n=r,i=gn(r);return n.deltas=i.weights.slice(0),n.deltas[e]-=1,-Math.log2(i.weights[e])}}function xn(t){const{weights:e}=t;let r=e[0],n=0;for(let t=1;t<e.length;t++){const i=e[t];i<r||(n=t,r=i)}return n}function bn(t){const e=yt(0,1),r=t.weights;let n=0,i=0;for(;;){if(n+=r[i],n>e)return i;i++}}const wn={iterations:2e4,errorThresh:.005,log:!1,logPeriod:10,learningRate:.01,callbackPeriod:10,timeout:1/0},Tn=()=>({inputSize:20,inputRange:20,hiddenLayers:[20,20],outputSize:20,decayRate:.999,smoothEps:1e-8,regc:1e-6,clipval:5,maxPredictionLength:100,dataFormatter:new Jr});class vn{constructor(t={}){this.options={...Tn()},this.trainOpts={...wn},this.stepCache={},this.runs=0,this.ratioClipped=0,this.model=Object.seal({isInitialized:!1,input:new qr(0,0),hiddenLayers:[],output:new qr(0,0),equations:[],allMatrices:[],equationConnections:[],outputConnector:new Yr(0,0,.08)}),this.initialLayerInputs=[],this.options={...this.options,...t},this.updateTrainingOptions({...wn}),t.json&&this.fromJSON(t.json)}initialize(){const{dataFormatter:t}=this.options;(null==t?void 0:t.characters.length)&&(this.options.inputSize=this.options.inputRange=this.options.outputSize=t.characters.length),this.model=this.mapModel()}createHiddenLayers(){const{hiddenLayers:t,inputSize:e}=this.options,r=[];r.push(this.getHiddenLayer(t[0],e));let n=t[0];for(let e=1;e<t.length;e++){const i=t[e];r.push(this.getHiddenLayer(i,n)),n=i}return r}getHiddenLayer(t,e){return{weight:new Yr(t,e,.08),transition:new Yr(t,t,.08),bias:new qr(t,1)}}getEquation(t,e,r,n){if(!n.weight||!n.transition||!n.bias)throw new Error("hiddenLayer does not have expected properties");const i=t.relu.bind(t),s=t.add.bind(t),a=t.multiply.bind(t);return i(s(s(a(n.weight,e),a(n.transition,r)),n.bias))}createInputMatrix(){const{inputRange:t,inputSize:e}=this.options;if(t<1)throw new Error("this.options.inputRange not an expected number");if(e<1)throw new Error("this.options.inputSize not an expected number");return new Yr(t+1,e,.08)}createOutputMatrices(){const{outputSize:t,hiddenLayers:e}=this.options,r=Sn(e);return{outputConnector:new Yr(t+1,r,.08),output:new qr(t+1,1)}}bindEquation(){const{model:t}=this,{hiddenLayers:e}=this.options,r=new yn,n=[],i=t.equationConnections.length>0?Sn(t.equationConnections):this.initialLayerInputs;let s=this.getEquation(r,r.inputMatrixToRow(t.input),i[0],t.hiddenLayers[0]);n.push(s);for(let a=1,o=e.length;a<o;a++){if(!i[a])throw new Error(`Cannot find equation at index ${a}`);s=this.getEquation(r,s,i[a],t.hiddenLayers[a]),n.push(s)}t.equationConnections.push(n),r.add(r.multiply(t.outputConnector,s),t.output),t.equations.push(r)}mapModel(){const t=[];this.initialLayerInputs=this.options.hiddenLayers.map((t=>new qr(t,1)));const e=this.createInputMatrix();t.push(e);const r=this.createHiddenLayers();if(!r.length)throw new Error("net.hiddenLayers not set");for(let e=0,n=r.length;e<n;e++){const n=r[e];for(const e in n)n.hasOwnProperty(e)&&t.push(n[e])}const{output:n,outputConnector:i}=this.createOutputMatrices();return t.push(i),t.push(n),Object.seal({isInitialized:!0,input:e,hiddenLayers:r,output:n,equations:[],allMatrices:t,equationConnections:[],outputConnector:i})}trainInput(t){this.runs++;const{model:e}=this,r=t.length;let n,i=0;for(;e.equations.length<=t.length+1;)this.bindEquation();for(let s=-1,a=t.length;s<a;s++){const a=s+1;n=e.equations[a];const o=-1===s?0:t[s]+1,u=s===r-1?0:t[s+1]+1;i+=n.predictTargetIndex(o,u)}return Math.pow(2,i/(r-1))/100}backpropagate(t){let e=t.length;const{model:r}=this,{equations:n}=r;for(;e>0;)n[e].backpropagateIndex(t[e-1]+1),e--;n[0].backpropagateIndex(0)}adjustWeights(){const{regc:t,clipval:e,decayRate:r,smoothEps:n}=this.options,{trainOpts:i,model:s,stepCache:a}=this,{learningRate:o}=i,{allMatrices:u}=s;let h=0,l=0;for(let i=0;i<u.length;i++){const s=u[i],{weights:c,deltas:p}=s;i in a||(a[i]=I(s.rows*s.columns));const d=a[i];for(let i=0;i<c.length;i++){let s=p[i];const a=c[i];d[i]=d[i]*r+(1-r)*s*s,s>e?(s=e,h++):s<-e&&(s=-e,h++),l++,c[i]=a+-o*s/Math.sqrt(d[i]+n)-t*a}}this.ratioClipped=h/l}get isRunnable(){return!this.model||0!==this.model.equations.length||(console.error("No equations bound, did you run train()?"),!1)}checkRunnable(){if(!this.isRunnable)throw new Error("Network not runnable")}run(t=[],e=!1,r=1){const n=this.options.maxPredictionLength+(null!==t?t.length:0)+(this.options.dataFormatter?this.options.dataFormatter.specialIndexes.length:0);this.checkRunnable();const i=this.options.dataFormatter&&t.length>0?this.options.dataFormatter.formatDataIn(t):t,{model:s}=this,a=[];let o=0;for(;;){const t=0===o?0:o<i.length?i[o-1]+1:a[o-1];for(;s.equations.length<=o;)this.bindEquation();const l=s.equations[o].runIndex(t),c=new qr(s.output.rows,s.output.columns);if(h=l,(u=c).rows=h.rows,u.columns=h.columns,u.weights=h.weights.slice(0),u.deltas=h.deltas.slice(0),1!==r&&e)for(let t=0,e=c.weights.length;t<e;t++)c.weights[t]/=r;const p=gn(c),d=e?bn(p):xn(p);if(o++,0===d)break;if(o>=n)break;a.push(d)}var u,h;return this.options.dataFormatter.formatDataOut(i,a.slice(i.length).map((t=>t-1)))}verifyIsInitialized(){this.model.isInitialized||this.initialize()}updateTrainingOptions(t){var e;this.trainOpts={...wn,...t},this.validateTrainingOptions(this.trainOpts),this.setLogMethod(null!==(e=t.log)&&void 0!==e?e:this.trainOpts.log)}validateTrainingOptions(t){const e={iterations:()=>{const e=t.iterations;return"number"==typeof e&&e>0},errorThresh:()=>{const e=t.errorThresh;return"number"==typeof e&&e>0&&e<1},log:()=>{const e=t.log;return"function"==typeof e||"boolean"==typeof e},logPeriod:()=>{const e=t.logPeriod;return"number"==typeof e&&e>0},learningRate:()=>{const e=t.learningRate;return"number"==typeof e&&e>0&&e<1},callback:()=>{const e=t.callback;return"function"==typeof e||void 0===e},callbackPeriod:()=>{const e=t.callbackPeriod;return"number"==typeof e&&e>0},timeout:()=>{const e=t.timeout;return"number"==typeof e&&e>0}};for(const r in e){const n=t;if(!e[r]())throw new Error(`[${r}, ${n[r]}] is out of normal training range, your network will probably not train.`)}}setLogMethod(t){this.trainOpts.log="function"==typeof t?t:!!t&&console.log}prepTraining(t,e){var r;this.updateTrainingOptions(e);const n=this.options.dataFormatter.format(t),i=Date.now()+(null!==(r=this.trainOpts.timeout)&&void 0!==r?r:0);return this.verifyIsInitialized(),{preparedData:n,status:{error:1,iterations:0},endTime:i}}train(t,e={}){var r;this.trainOpts=e={...wn,...e};const{iterations:n,errorThresh:i,logPeriod:s,callback:a,callbackPeriod:o}=this.trainOpts,u=!0===e.log?console.log:e.log;let h,l,c=1/0;if(null===(r=this.options)||void 0===r?void 0:r.dataFormatter)l=this.options.dataFormatter.format(t);else{if(!Array.isArray(t)||!Array.isArray(t[0])||"number"!=typeof t[0][0])throw new Error("training not in expected format of number[][]");l=t}for(this.verifyIsInitialized(),h=0;h<n&&c>i;h++){let e=0;for(let t=0;t<l.length;t++)e+=this.trainPattern(l[t],!0);if(c=e/t.length,isNaN(c))throw new Error("Network error rate is unexpected NaN, check network configurations and try again. Most probably input format is not correct or training data is not enough. ");u&&h%s==0&&u(`iterations: ${h}, training error: ${c}`),a&&h%o==0&&a({error:c,iterations:h})}return{error:c,iterations:h}}addFormat(){throw new Error("not yet implemented")}toJSON(){this.model.isInitialized||this.initialize();const{model:t,options:e}=this;return{type:this.constructor.name,options:{...e,dataFormatter:e.dataFormatter.toJSON()},trainOpts:{...this.trainOpts,timeout:this.trainOpts.timeout===1/0?"Infinity":this.trainOpts.timeout},input:t.input.toJSON(),hiddenLayers:t.hiddenLayers.map((t=>{const e={};for(const r in t)t.hasOwnProperty(r)&&(e[r]=t[r].toJSON());return e})),outputConnector:this.model.outputConnector.toJSON(),output:this.model.output.toJSON()}}fromJSON(t){const{options:e}=t,r=[],n=qr.fromJSON(t.input);r.push(n);const i=[];t.hiddenLayers.forEach((t=>{const e={};for(const n in t)e[n]=qr.fromJSON(t[n]),r.push(e[n]);i.push(e)}));const s=qr.fromJSON(t.outputConnector);r.push(s);const a=qr.fromJSON(t.output);return r.push(a),e.dataFormatter?this.options={...Tn(),...e,dataFormatter:Jr.fromJSON(e.dataFormatter)}:this.options={...Tn(),...e,dataFormatter:new Jr},this.model=Object.seal({isInitialized:!0,input:n,hiddenLayers:i,output:a,allMatrices:r,outputConnector:s,equations:[],equationConnections:[]}),this.initialLayerInputs=this.options.hiddenLayers.map((t=>new qr(t,1))),this.bindEquation(),this}toFunction(t){const{model:e}=this,{equations:r}=this.model,n=r[1],{states:i}=n,s=JSON.stringify(this.toJSON());function a(t){const n=e.equationConnections[0],{states:i}=r[0];for(let e=0,r=i.length;e<r;e++)if(i[e].product===t)return e;return n.indexOf(t)}function o(t,r){if(!t||!t.rows||!t.columns)return"null";if(t===e.input)return"json.input";if(t===e.outputConnector)return"json.outputConnector";if(t===e.output)return"json.output";for(let r=0,n=e.hiddenLayers.length;r<n;r++){const n=e.hiddenLayers[r];for(const e in n)if(n.hasOwnProperty(e)&&n[e]===t)return`json.hiddenLayers[${r}].${e}`}return function(t,e){for(let r=0,n=i.length;r<n;r++){const n=i[r];if(r===e){const e=a(t);return e>-1&&(t===n.left||t===n.right)?`typeof prevStates[${e}] === 'object' ? prevStates[${e}].product : new Matrix(${t.rows}, ${t.columns})`:`new Matrix(${t.rows}, ${t.columns})`}if(t===n.product)return`states[${r}].product`;if(t===n.right)return`states[${r}].right`;if(t===n.left)return`states[${r}].left`}return""}(t,r)}function u(t){const e=t.toString().split("{");e.shift();const r=e.join("{").split("}");return r.pop(),r.join("}").split("\n").join("\n        ").replace("product.deltas[i] = 0;","").replace("product.deltas[column] = 0;","").replace("left.deltas[leftIndex] = 0;","").replace("right.deltas[rightIndex] = 0;","").replace("product.deltas = left.deltas.slice(0);","")}function h(t){return`src/recurrent/matrix/${t.replace(/[A-Z]/g,(function(t){return`-${t.toLowerCase()}`}))}.js`}const l=[],c={},p=[];for(let t=0,e=i.length;t<e;t++){const e=i[t];l.push(`states[${t}] = {\n      name: '${e.forwardFn.name}',\n      left: ${e.left?o(e.left,t):"undefined"},\n      right: ${e.right?o(e.right,t):"undefined"},\n      product: ${o(e.product,t)}\n    }`);const r=e.forwardFn.name;c[r]||(c[r]=!0,p.push(`        case '${r}': //compiled from ${h(r)}\n          ${u(e.forwardFn.toString())}\n          break;`))}const d=`\n  if (typeof rawInput === 'undefined') rawInput = [];\n  if (typeof isSampleI === 'undefined') isSampleI = false;\n  if (typeof temperature === 'undefined') temperature = 1;\n  var json = ${s};\n  ${this.options.dataFormatter?`${this.options.dataFormatter.toFunctionString()};\n  Object.assign(dataFormatter, json.options.dataFormatter);`:""}\n  ${this.options.dataFormatter&&"function"==typeof this.options.dataFormatter.formatDataIn?`const formatDataIn = function (input, output) { ${u(this.options.dataFormatter.formatDataIn.toString())} }.bind(dataFormatter);`:""}\n  ${null!==this.options.dataFormatter&&"function"==typeof this.options.dataFormatter.formatDataOut?`const formatDataOut = function formatDataOut(input, output) { ${u(this.options.dataFormatter.formatDataOut.toString())} }.bind(dataFormatter);`:""}\n  var maxPredictionLength =\n    ${this.options.maxPredictionLength} +\n    rawInput.length +\n    ${this.options.dataFormatter?this.options.dataFormatter.specialIndexes.length:0};\n  var input = ${this.options.dataFormatter&&"function"==typeof this.options.dataFormatter.formatDataIn?"formatDataIn(rawInput)":"rawInput"};\n  var _i = 0;\n  var output = [];\n  var states = [];\n  var prevStates;\n  while (true) {\n    var previousIndex = (_i === 0\n        ? 0\n        : _i < input.length\n          ? input[_i - 1] + 1\n          : output[_i - 1])\n          ;\n    var rowPluckIndex = previousIndex;\n    prevStates = states;\n    states = [];\n    ${l.join(";\n    ")};\n    for (var stateIndex = 0, stateMax = ${l.length}; stateIndex < stateMax; stateIndex++) {\n      var state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n      switch (state.name) {\n${p.join("\n")}\n      }\n    }\n\n    var logProbabilities = state.product;\n    if (temperature !== 1 && isSampleI) {\n      for (var q = 0, nq = logProbabilities.weights.length; q < nq; q++) {\n        logProbabilities.weights[q] /= temperature;\n      }\n    }\n\n    var probs = softmax(logProbabilities);\n    var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\n\n    _i++;\n    if (nextIndex === 0) {\n      break;\n    }\n    if (_i >= maxPredictionLength) {\n      break;\n    }\n\n    output.push(nextIndex);\n  }\n  ${this.options.dataFormatter&&"function"==typeof this.options.dataFormatter.formatDataOut?"return formatDataOut(input, output.slice(input.length).map(function(value) { return value - 1; }))":"return output.slice(input.length).map(function(value) { return value - 1; })"};\n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ${I.toString()}\n  ${gn.toString().replace("_1.Matrix","Matrix")}\n  ${yt.toString()}\n  ${bn.toString()}\n  ${xn.toString()}`;return new Function("rawInput","isSampleI","temperature",t?t(d):d)}trainPattern(t,e){const r=this.trainInput(t);return this.backpropagate(t),this.adjustWeights(),e?r:0}}function Sn(t){return t[t.length-1]}class An extends vn{getHiddenLayer(t,e){return _n(t,e)}getEquation(t,e,r,n){return kn(t,e,r,n)}}function _n(t,e){return{updateGateInputMatrix:new Yr(t,e,.08),updateGateHiddenMatrix:new Yr(t,t,.08),updateGateBias:new qr(t,1),resetGateInputMatrix:new Yr(t,e,.08),resetGateHiddenMatrix:new Yr(t,t,.08),resetGateBias:new qr(t,1),cellWriteInputMatrix:new Yr(t,e,.08),cellWriteHiddenMatrix:new Yr(t,t,.08),cellWriteBias:new qr(t,1)}}function kn(t,e,r,n){if(!(n.updateGateInputMatrix&&n.updateGateHiddenMatrix&&n.updateGateBias&&n.resetGateInputMatrix&&n.resetGateHiddenMatrix&&n.resetGateBias&&n.cellWriteInputMatrix&&n.cellWriteHiddenMatrix&&n.cellWriteBias))throw new Error("hiddenLayer does not have expected properties");const i=t.sigmoid.bind(t),s=t.add.bind(t),a=t.multiply.bind(t),o=t.multiplyElement.bind(t),u=t.tanh.bind(t),h=t.allOnes.bind(t),l=t.cloneNegative.bind(t),c=i(s(s(a(n.updateGateInputMatrix,e),a(n.updateGateHiddenMatrix,r)),n.updateGateBias)),p=i(s(s(a(n.resetGateInputMatrix,e),a(n.resetGateHiddenMatrix,r)),n.resetGateBias)),d=u(s(s(a(n.cellWriteInputMatrix,e),a(n.cellWriteHiddenMatrix,o(p,r))),n.cellWriteBias));return s(o(s(h(c.rows,c.columns),l(c)),d),o(r,c))}class En{constructor(t,e){this.prop=e,this.length=0,this.table={};for(let r=0;r<t.length;r++){const n=t[r][e];for(let t=0;t<n.length;t++){const e=n[t];for(const t in e)e.hasOwnProperty(t)&&(this.table.hasOwnProperty(t)||(this.table[t]=this.length++))}}}}const Ln=()=>({...Tn(),inputSize:1,hiddenLayers:[20],outputSize:1,inputRange:0});class In extends vn{constructor(t={}){super(),this.inputLookupLength=0,this.inputLookup=null,this.outputLookup=null,this.outputLookupLength=0,this.model=Object.seal({isInitialized:!1,hiddenLayers:[],output:new qr(0,0),equations:[],allMatrices:[],equationConnections:[],outputConnector:new Yr(0,0,.08)}),this.options=Ln(),this.options={...this.options,...t},this.updateTrainingOptions({...Dn,...t}),t.json&&this.fromJSON(t.json)}createInputMatrix(){throw new Error("Input Matrices do not exist on RNNTimeStep")}createOutputMatrices(){const{outputSize:t}=this.options,e=Sn(this.options.hiddenLayers),r=new Yr(t,e,.08);return{output:new Yr(t,1,.08),outputConnector:r}}bindEquation(){const{model:t,options:e}=this,{hiddenLayers:r,inputSize:n}=e,i=t.hiddenLayers,s=new yn,a=[],o=t.equationConnections.length>0?t.equationConnections[t.equationConnections.length-1]:this.initialLayerInputs;let u=this.getEquation(s,s.input(new qr(n,1)),o[0],i[0]);a.push(u);for(let t=1,e=r.length;t<e;t++)u=this.getEquation(s,u,o[t],i[t]),a.push(u);t.equationConnections.push(a),s.add(s.multiply(t.outputConnector,u),t.output),t.equations.push(s)}initialize(){this.model=this.mapModel()}mapModel(){const t=[];this.initialLayerInputs=this.options.hiddenLayers.map((t=>new qr(t,1)));const e=this.createHiddenLayers();for(let r=0,n=e.length;r<n;r++){const n=e[r];for(const e in n)n.hasOwnProperty(e)&&t.push(n[e])}const{outputConnector:r,output:n}=this.createOutputMatrices();return t.push(r),t.push(n),Object.seal({isInitialized:!0,hiddenLayers:e,output:n,equations:[],allMatrices:t,equationConnections:[],outputConnector:r})}backpropagate(){for(let t=this.model.equations.length-1;t>-1;t--)this.model.equations[t].backpropagate()}run(t){const e=B.dataShape(t).join(",");switch(e){case"array,number":return this.runArray(t);case"array,array,number":return this.runArrayOfArray(t);case"object,number":return this.runObject(t);case"array,object,number":return this.runArrayOfObject(t);default:throw new Error(`Unrecognized data shape ${e}`)}}forecast(t,e=1){const r=B.dataShape(t).join(",");switch(r){case"array,number":return this.forecastArray(t,e);case"array,array,number":return this.forecastArrayOfArray(t,e);case"object,number":return this.runObject(t);case"array,object,number":return this.forecastArrayOfObject(t,e);default:throw new Error(`Unrecognized data shape ${r}`)}}forecastArray(t,e=1){this.checkRunnable();const{model:r}=this,{equations:n}=r,i=t.length+e;for(;n.length<=i;)this.bindEquation();let s,a=0;if(1===this.options.inputSize)for(let e=0;e<t.length;e++)s=n[a++].runInput(Float32Array.from([t[e]]));else for(let e=0;e<t.length;e++)s=n[a++].runInput(Float32Array.from([]));if(!s)throw new Error("lastOutput not set");const o=[s.weights[0]];for(let t=0,r=e-1;t<r;t++)s=n[a++].runInput(s.weights),o.push(s.weights[0]);return this.end(),Float32Array.from(o)}forecastArrayOfArray(t,e=1){this.checkRunnable();const{model:r}=this,{equations:n}=r,i=t.length+e;for(;n.length<=i;)this.bindEquation();let s,a=0;for(let e=0;e<t.length;e++)s=n[a++].runInput(t[e]);if(!s)throw new Error("lastOutput not set");const o=[Float32Array.from(s.weights)];for(let t=0,r=e-1;t<r;t++)s=n[a++].runInput(s.weights),o.push(Float32Array.from(s.weights.slice(0)));return this.end(),o}forecastArrayOfObject(t,e=1){if(!this.inputLookup)throw new Error("this.inputLookup not set");if(!this.outputLookup)throw new Error("this.outputLookup not set");const r=t.map((t=>B.toArray(this.inputLookup,t,this.inputLookupLength)));return this.forecastArrayOfArray(r,e).map((t=>B.toObject(this.outputLookup,t)))}train(t,e={}){this.trainOpts=e={...wn,...e},1===this.options.inputSize&&1===this.options.outputSize&&this.setSize(t),this.verifySize();const r=this.formatData(t);let n,i=1/0;this.verifyIsInitialized();const{iterations:s,errorThresh:a,logPeriod:o,callback:u,callbackPeriod:h}=this.trainOpts,l=!0===e.log?console.log:e.log;for(n=0;n<s&&i>a;n++){let t=0;for(let e=0;e<r.length;e++)t+=this.trainPattern(r[e],!0);if(i=t/r.length,isNaN(i))throw new Error("Network error rate is unexpected NaN, check network configurations and try again. Most probably input format is not correct or training data is not enough. ");l&&n%o==0&&l(`iterations: ${n}, training error: ${i}`),u&&n%h==0&&u({error:i,iterations:n})}return{error:i,iterations:n}}trainArrayOfArray(t){if(t.length<2)throw new Error("input must be an array of 2 or more");const{equations:e}=this.model;for(;e.length<t.length;)this.bindEquation();let r=0;for(let n=0,i=t.length-1;n<i;n++)r+=e[n].predictTarget(t[n],t[n+1]);return this.end(),r/t.length}trainPattern(t,e){const r=this.trainArrayOfArray(t);return this.backpropagate(),this.adjustWeights(),e?r:0}setSize(t){let e=0;switch(B.dataShape(t).join(",")){case"array,array,number":case"array,object,number":case"array,datum,array,number":case"array,datum,object,number":e=1;break;case"array,array,array,number":e=t[0][0].length;break;case"array,array,object,number":e=Object.keys(B.toTable2D(t)).length;break;case"array,datum,array,array,number":e=t[0].input[0].length;break;case"array,datum,array,object,number":e=Object.keys(B.toInputTable2D(t)).length;break;default:throw new Error("unknown data shape or configuration")}this.options=Object.seal({...this.options,inputSize:e,outputSize:e})}verifySize(){if((this.options.inputSize||this.options.outputSize)&&this.options.inputSize!==this.options.outputSize)throw new Error("manually set inputSize and outputSize mismatch")}runArray(t){this.checkRunnable();const{equations:e}=this.model;for(;e.length<=t.length;)this.bindEquation();let r;for(let n=0;n<t.length;n++)r=e[n].runInput(new Float32Array([t[n]]));return this.end(),r.weights[0]}runArrayOfArray(t){this.checkRunnable();const{model:e}=this,{equations:r}=e;for(;r.length<=t.length;)this.bindEquation();let n;for(let e=0;e<t.length;e++)n=r[e].runInput(t[e]).weights;return this.end(),null!=n?n:Float32Array.from([])}runObject(t){if(!this.inputLookup)throw new Error("this.inputLookup not set");if(!this.outputLookup)throw new Error("this.outputLookup not set");if(!this.outputLookupLength)throw new Error("this.outputLookupLength not set");if(this.inputLookup===this.outputLookup){const e=B.toArrayShort(this.inputLookup,t);return B.toObjectPartial(this.outputLookup,this.forecastArray(e,this.outputLookupLength-e.length),e.length)}return B.toObject(this.outputLookup,this.forecastArray(B.toArray(this.inputLookup,t,this.inputLookupLength),this.outputLookupLength))}runArrayOfObject(t){if(null===this.inputLookup)throw new Error("this.inputLookup not set");if(null===this.outputLookup)throw new Error("this.outputLookup not set");const e=t.map((t=>B.toArray(this.inputLookup,t,this.inputLookupLength)));return this.forecastArrayOfArray(e,1).map((t=>B.toObject(this.outputLookup,t)))[0]}runArrayOfObjectOfArray(t){if(!this.inputLookup)throw new Error("this.inputLookup not set");if(!this.outputLookup)throw new Error("this.outputLookup not set");return B.toObject(this.outputLookup,this.runArrayOfArray(B.toArrays(this.inputLookup,t,this.inputLookupLength)))}end(){this.model.equations[this.model.equations.length-1].runInput(new Float32Array(this.options.outputSize))}requireInputOutputOfOne(){if(1!==this.options.inputSize)throw new Error("inputSize must be 1 for this data size");if(1!==this.options.outputSize)throw new Error("outputSize must be 1 for this data size")}formatArray(t){const e=[];this.requireInputOutputOfOne();for(let r=0;r<t.length;r++)e.push(Float32Array.from([t[r]]));return[e]}formatArrayOfArray(t){const e=[],{inputSize:r,outputSize:n}=this.options;if(1===r&&1===n){for(let r=0;r<t.length;r++)e.push(Tr(t[r]));return e}if(r!==t[0].length)throw new Error("inputSize must match data input size");if(n!==t[0].length)throw new Error("outputSize must match data output size");for(let r=0;r<t.length;r++)e.push(Float32Array.from(t[r]));return[e]}formatArrayOfObject(t){if(this.requireInputOutputOfOne(),!this.inputLookup){const e=new dr(t);this.inputLookup=this.outputLookup=e.table,this.inputLookupLength=this.outputLookupLength=e.length}const e=[];for(let r=0;r<t.length;r++)e.push(_r(t[r]));return e}formatArrayOfObjectMulti(t){if(!this.inputLookup){const e=new dr(t);this.inputLookup=this.outputLookup=e.table,this.inputLookupLength=this.outputLookupLength=e.length}const e=[];for(let r=0;r<t.length;r++)e.push([Er(t[r],this.inputLookup,this.inputLookupLength)]);return e}formatArrayOfDatumOfArray(t){const e=[];this.requireInputOutputOfOne();for(let r=0;r<t.length;r++){const n=t[r];e.push(vr(n.input,n.output))}return e}formatArrayOfDatumOfObject(t){if(this.requireInputOutputOfOne(),!this.inputLookup){const e=new dr(t,"input");this.inputLookup=e.table,this.inputLookupLength=e.length}if(!this.outputLookup){const e=new dr(t,"output");this.outputLookup=e.table,this.outputLookupLength=e.length}const e=[];for(let r=0;r<t.length;r++){const n=t[r];e.push(kr(n.input,n.output))}return e}formatArrayOfArrayOfArray(t){const e=[];for(let r=0;r<t.length;r++)e.push(br(t[r]));return e}formatArrayOfArrayOfObject(t){if(!this.inputLookup){const e=new dr(t);this.inputLookup=this.outputLookup=e.table,this.inputLookupLength=this.outputLookupLength=e.length}const e=[];for(let r=0;r<t.length;r++){const n=[];for(let e=0;e<t[r].length;e++)n.push(Er(t[r][e],this.inputLookup,this.inputLookupLength));e.push(n)}return e}formatArrayOfDatumOfArrayOfArray(t){const e=[],{inputSize:r,outputSize:n}=this.options;if(r!==t[0].input[0].length)throw new Error("inputSize must match data input size");if(n!==t[0].output[0].length)throw new Error("outputSize must match data output size");for(let r=0;r<t.length;r++){const n=t[r];e.push(wr(n.input,n.output))}return e}formatArrayOfDatumOfArrayOfObject(t){if(!this.inputLookup){const e=new En(t,"input");this.inputLookup=e.table,this.inputLookupLength=e.length}if(!this.outputLookup){const e=new En(t,"output");this.outputLookup=e.table,this.outputLookupLength=e.length}if(!this.outputLookupLength)throw new Error("this.outputLookupLength not set to usable number");const e=[];for(let r=0;r<t.length;r++){const n=t[r];e.push(Ar(n.input,n.output,this.inputLookup,this.outputLookup,this.inputLookupLength,this.outputLookupLength))}return e}formatData(t){switch(B.dataShape(t).join(",")){case"array,number":return this.formatArray(t);case"array,array,number":return this.formatArrayOfArray(t);case"array,object,number":return 1===this.options.inputSize?this.formatArrayOfObject(t):this.formatArrayOfObjectMulti(t);case"array,datum,array,number":return this.formatArrayOfDatumOfArray(t);case"array,datum,object,number":return this.formatArrayOfDatumOfObject(t);case"array,array,array,number":return this.formatArrayOfArrayOfArray(t);case"array,array,object,number":return this.formatArrayOfArrayOfObject(t);case"array,datum,array,array,number":return this.formatArrayOfDatumOfArrayOfArray(t);case"array,datum,array,object,number":return this.formatArrayOfDatumOfArrayOfObject(t);default:throw new Error("unknown data shape or configuration")}}test(t){const e=[];let r=0;const n=this.formatData(t);for(let i=0;i<n.length;i++){const s=n[i],a=this.run(s.splice(0,s.length-1)),o=s[s.length-1];let u=0,h=0;for(let t=0;t<a.length;t++){h++;const e=o[t]-a[t];u+=e*e}if(r+=u/h,Math.abs(u)>this.trainOpts.errorThresh){const r=t[i];e.push({value:r,actual:a})}}return{error:r/n.length,misclasses:e,total:n.length}}addFormat(t){var e,r,n,i,s,a;switch(B.dataShape(t).join(",")){case"array,array,number":case"datum,array,array,number":case"array,number":case"datum,array,number":return;case"datum,object,number":this.inputLookup=B.addKeys(t.input,null!==(e=this.inputLookup)&&void 0!==e?e:{}),this.inputLookup&&(this.inputLookupLength=Object.keys(this.inputLookup).length),this.outputLookup=B.addKeys(t.output,null!==(r=this.outputLookup)&&void 0!==r?r:{}),this.outputLookup&&(this.outputLookupLength=Object.keys(this.outputLookup).length);break;case"object,number":this.inputLookup=this.outputLookup=B.addKeys(t,null!==(n=this.inputLookup)&&void 0!==n?n:{}),this.inputLookup&&(this.inputLookupLength=this.outputLookupLength=Object.keys(this.inputLookup).length);break;case"array,object,number":{const e=t;for(let t=0;t<e.length;t++)this.inputLookup=this.outputLookup=B.addKeys(e[t],null!==(i=this.inputLookup)&&void 0!==i?i:{}),this.inputLookup&&(this.inputLookupLength=this.outputLookupLength=Object.keys(this.inputLookup).length);break}case"datum,array,object,number":{const e=t,r=e.input;for(let t=0;t<r.length;t++)this.inputLookup=B.addKeys(r[t],null!==(s=this.inputLookup)&&void 0!==s?s:{}),this.inputLookup&&(this.inputLookupLength=Object.keys(this.inputLookup).length);const n=e.output;for(let t=0;t<n.length;t++)this.outputLookup=B.addKeys(n[t],null!==(a=this.outputLookup)&&void 0!==a?a:{}),this.outputLookup&&(this.outputLookupLength=Object.keys(this.outputLookup).length);break}default:throw new Error("unknown data shape or configuration")}}toJSON(){this.model||this.initialize();const{model:t}=this,e={...this.options,...Tn};return{type:this.constructor.name,options:e,hiddenLayers:t.hiddenLayers.map((t=>{const e={};for(const r in t)t.hasOwnProperty(r)&&(e[r]=t[r].toJSON());return e})),outputConnector:t.outputConnector.toJSON(),output:t.output.toJSON(),inputLookup:this.inputLookup,inputLookupLength:this.inputLookupLength,outputLookup:this.outputLookup,outputLookupLength:this.outputLookupLength}}fromJSON(t){const{options:e}=t,r=[],n=[];t.hiddenLayers.forEach((t=>{const e={};for(const n in t)e[n]=qr.fromJSON(t[n]),r.push(e[n]);n.push(e)}));const i=qr.fromJSON(t.outputConnector);r.push(i);const s=qr.fromJSON(t.output);return r.push(s),this.options={...Ln(),...e},this.inputLookup=t.inputLookup,this.inputLookupLength=t.inputLookupLength,this.outputLookup=t.outputLookup,this.outputLookupLength=t.outputLookupLength,this.model=Object.seal({isInitialized:!0,hiddenLayers:n,output:s,allMatrices:r,outputConnector:i,equations:[],equationConnections:[]}),this.initialLayerInputs=e.hiddenLayers.map((t=>new qr(t,1))),this.bindEquation(),this}toFunction(t){const{model:e,inputLookup:r,inputLookupLength:n,outputLookup:i,outputLookupLength:s}=this,{inputSize:a}=this.options,{equations:o}=e,u=o[1],{states:h}=u,l=JSON.stringify(this.toJSON());function c(t){const r=e.equationConnections[0],{states:n}=o[0];for(let e=0,r=n.length;e<r;e++)if(n[e].product===t)return e;return r.indexOf(t)}function p(t,r){if(!t||!t.rows||!t.columns)return"null";if(t===e.outputConnector)return"json.outputConnector";if(t===e.output)return"json.output";for(let r=0,n=e.hiddenLayers.length;r<n;r++){const n=e.hiddenLayers[r];for(const e in n)if(n.hasOwnProperty(e)&&n[e]===t)return`json.hiddenLayers[${r}].${e}`}return function(t,e){for(let r=0,n=h.length;r<n;r++){const n=h[r];if(r===e){const e=c(t);switch(t){case n.left:if(e>-1)return`typeof prevStates[${e}] === 'object' ? prevStates[${e}].product : new Matrix(${t.rows}, ${t.columns})`;case n.right:if(e>-1)return`typeof prevStates[${e}] === 'object' ? prevStates[${e}].product : new Matrix(${t.rows}, ${t.columns})`;case n.product:return`new Matrix(${t.rows}, ${t.columns})`;default:throw Error("unknown state")}}if(t===n.product)return`states[${r}].product`;if(t===n.right)return`states[${r}].right`;if(t===n.left)return`states[${r}].left`}return""}(t,r)}function d(t){const e=t.toString().split("{");e.shift();const r=e.join("{").split("}");return r.pop(),r.join("}").split("\n").join("\n        ").replace("product.deltas[i] = 0;","").replace("product.deltas[column] = 0;","").replace("left.deltas[leftIndex] = 0;","").replace("right.deltas[rightIndex] = 0;","").replace("product.deltas = left.deltas.slice(0);","")}function g(t){return`src/recurrent/matrix/${t.replace(/[A-Z]/g,(function(t){return`-${t.toLowerCase()}`}))}.js`}const f=[],m={},y=[];for(let t=0,e=h.length;t<e;t++){const e=h[t];f.push(`states[${t}] = {\n      name: '${e.forwardFn.name}',\n      left: ${e.left?p(e.left,t):"undefined"},\n      right: ${e.right?p(e.right,t):"undefined"},\n      product: ${p(e.product,t)}\n    }`);const n=e.forwardFn.name;m[n]||(m[n]=!0,"input"===e.name?(y.push(`case '${n}':`),y.push(r&&1===a?"product.weights = _i < input.length ? input[_i]: prevStates[prevStates.length - 1].product.weights;":1===a?"product.weights = [input[_i]];":"product.weights = input[_i];"),y.push("break;")):y.push(`        case '${n}':${"forwardFn"!==n?` //compiled from ${g(n)}`:""}\n          ${d(e.forwardFn.toString())}\n          break;`))}const x=1===a&&this.outputLookup,b=`\n  var input = ${this.inputLookup?"lookupInput(rawInput)":"rawInput"};\n  var json = ${l};\n  var output = [];\n  var states = [];\n  var prevStates;\n  var state;\n  var max = ${x?r===i?n:"input.length + "+(s-1):"input.length"};\n  for (var _i = 0; _i < max; _i++) {\n    prevStates = states;\n    states = [];\n    ${f.join(";\n    ")};\n    for (var stateIndex = 0, stateMax = ${f.length}; stateIndex < stateMax; stateIndex++) {\n      state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n\n      switch (state.name) {\n${y.join("\n")}\n      }\n    }\n    ${1===a&&r?"if (_i >= input.length - 1) { output.push(state.product.weights); }":"output = state.product.weights;"}\n  }\n  ${i?i===r?"return lookupOutputPartial(output, input)":"return lookupOutput(output)":1===a?"return output[0]":"return output"};\n  ${r?1===a?r===i?`function lookupInput(input) {\n            var table = ${JSON.stringify(r)};\n            var result = [];\n            for (var p in table) {\n              if (!input.hasOwnProperty(p)) break;\n              result.push(Float32Array.from([input[p]]));\n            }\n            return result;\n          }`:`function lookupInput(input) {\n          var table = ${JSON.stringify(r)};\n          var result = [];\n          for (var p in table) {\n            result.push(Float32Array.from([input[p]]));\n          }\n          return result;\n        }`:`function lookupInput(rawInputs) {\n        var table = ${JSON.stringify(r)};\n        var result = [];\n        for (var i = 0; i < rawInputs.length; i++) {\n          var rawInput = rawInputs[i];\n          var input = new Float32Array(${n});\n          for (var p in table) {\n            input[table[p]] = rawInput.hasOwnProperty(p) ? rawInput[p] : 0;\n          }\n          result.push(input);\n        }\n        return result;\n      }`:""}\n  ${i?1===a?r===i?`function lookupOutputPartial(output, input) {\n            var table = ${JSON.stringify(i)};\n            var offset = input.length;\n            var result = {};\n            var i = 0;\n            for (var p in table) {\n              if (i++ < offset) continue;\n              result[p] = output[table[p] - offset][0];\n            }\n            return result;\n          }`:`function lookupOutput(output) {\n          var table = ${JSON.stringify(i)};\n          var result = {};\n          for (var p in table) {\n            result[p] = output[table[p]][0];\n          }\n          return result;\n        }`:`function lookupOutput(output) {\n        var table = ${JSON.stringify(i)};\n        var result = {};\n        for (var p in table) {\n          result[p] = output[table[p]];\n        }\n        return result;\n      }`:""}\n\n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ${I.toString()}\n  ${gn.toString().replace("_2.default","Matrix")}\n  ${yt.toString()}\n  ${bn.toString()}\n  ${xn.toString()}`;return new Function("rawInput",t?t(b):b)}}const Dn={...wn};class $n extends In{getHiddenLayer(t,e){return _n(t,e)}getEquation(t,e,r,n){return kn(t,e,r,n)}}class On extends vn{getHiddenLayer(t,e){return Cn(t,e)}getEquation(t,e,r,n){return Fn(t,e,r,n)}}function Cn(t,e){return{inputMatrix:new Yr(t,e,.08),inputHidden:new Yr(t,t,.08),inputBias:new qr(t,1),forgetMatrix:new Yr(t,e,.08),forgetHidden:new Yr(t,t,.08),forgetBias:new qr(t,1),outputMatrix:new Yr(t,e,.08),outputHidden:new Yr(t,t,.08),outputBias:new qr(t,1),cellActivationMatrix:new Yr(t,e,.08),cellActivationHidden:new Yr(t,t,.08),cellActivationBias:new qr(t,1)}}function Fn(t,e,r,n){if(!(n.inputMatrix&&n.inputHidden&&n.inputBias&&n.forgetMatrix&&n.forgetHidden&&n.forgetBias&&n.outputMatrix&&n.outputHidden&&n.outputBias&&n.cellActivationMatrix&&n.cellActivationHidden&&n.cellActivationBias))throw new Error("hiddenLayer does not have expected properties");const i=t.sigmoid.bind(t),s=t.add.bind(t),a=t.multiply.bind(t),o=t.multiplyElement.bind(t),u=t.tanh.bind(t),h=i(s(s(a(n.inputMatrix,e),a(n.inputHidden,r)),n.inputBias)),l=i(s(s(a(n.forgetMatrix,e),a(n.forgetHidden,r)),n.forgetBias)),c=i(s(s(a(n.outputMatrix,e),a(n.outputHidden,r)),n.outputBias)),p=u(s(s(a(n.cellActivationMatrix,e),a(n.cellActivationHidden,r)),n.cellActivationBias)),d=o(l,r),g=o(h,p);return o(c,u(s(d,g)))}class Rn extends In{getHiddenLayer(t,e){return Cn(t,e)}getEquation(t,e,r,n){return Fn(t,e,r,n)}}function zn({pixelX:t,pixelY:e,radius:r,inputs:n,row:i,line:s,fontSize:a,fontClassName:o}){let u=`<rect\n              x="${t/2-r}"\n              y="${e/2+i*e-r}"\n              width="${2*r}"\n              height="${2*r}"\n              stroke="black"\n              stroke-width="1"\n              fill="${n.color}"\n              class="${n.className}" />\n            <line\n              x1="${t/4}"\n              y1="${e/2+i*e}"\n              x2="${t/2-r}"\n              y2="${e/2+i*e}"\n              style="stroke:${s.color};stroke-width:${s.width}"\n              class="${s.className}" />`;return n.labels&&(u+=`<text\n              x="${t/8}"\n              y="${e/2+i*e-5}"\n              fill="black"\n              font-size="${a}"\n              class="${o}">${n.labels[i]}</text>`),u}function Mn({pixelX:t,pixelY:e,row:r,column:n,radius:i,hidden:s}){return`<circle\n            cx="${t/2+n*t}"\n            cy="${e/2+r*e}"\n            r="${i}"\n            stroke="black"\n            stroke-width="1"\n            fill="${s.color}"\n            class="${s.className}" />`}function Nn({pixelX:t,pixelY:e,row:r,column:n,line:i,outputs:s,radius:a}){return`<circle\n            cx="${t/2+n*t}"\n            cy="${e/2+r*e}"\n            r="${a}"\n            stroke="black"\n            stroke-width="1"\n            fill="${s.color}"\n            class="${s.className}" />\n          <line\n            x1="${t/2+n*t+a}"\n            y1="${e/2+r*e}"\n            x2="${t/2+n*t+t/4}"\n            y2="${e/2+r*e}"\n            style="stroke:${i.color};stroke-width:${i.width}"\n            class="${i.className}" />`}function Vn({pixelX:t,pixelY:e,row:r,column:n,radius:i,lineY:s,line:a,previousConnectionIndex:o}){return`<line\n            x1="${t/2+(n-1)*t+i}"\n            y1="${s/2+o*s}"\n            x2="${t/2+n*t-i}"\n            y2="${e/2+r*e}"\n            style="stroke:${a.color};stroke-width:${a.width}"\n            class="${a.className}" />`}function Pn(t){const{sizes:e,height:r,width:n}=t;let i="";const s=n/e.length;for(let n=0;n<e.length;n++){const a=e[n],o=r/a;for(let u=0;u<a;u++)if(0===n)i+=zn({pixelX:s,pixelY:o,row:u,column:n,...t});else{n===e.length-1?i+=Nn({pixelX:s,pixelY:o,row:u,column:n,...t}):i+=Mn({pixelX:s,pixelY:o,row:u,column:n,...t});const a=e[n-1],h=r/a;for(let e=0;e<a;e++)i+=Vn({pixelX:s,pixelY:o,row:u,column:n,lineY:h,previousConnectionIndex:e,...t})}}return i}function Kn({pixelX:t,pixelY:e,row:r,column:n,radius:i,recurrentLine:s}){const a=t/2+n*t+i+1,o=e/2+r*e,u=a-2*i-2;return`<path\n              d="M ${a} ${o} C ${u+100} ${o+50}, ${a-100} ${o+50}, ${u} ${o}"\n              stroke="${s.color}"\n              stroke-width="${s.width}"\n              fill="transparent"\n              stroke-linecap="round"\n              marker-end="url(#arrow)"\n              class="${s.className}" />`}function Gn(t){const{width:e,height:r,recurrentLine:n,sizes:i,radius:s}=t,a=e/i.length;let o=`<defs>\n              <marker id="arrow" markerWidth="10" markerHeight="10" refX="8" refY="3" orient="auto" markerUnits="strokeWidth">\n                <path d="M0,0 L0,6 L9,3 z" fill="${n.color}" />\n              </marker>\n            </defs>`;o+=Pn(t);for(let t=1;t<i.length;t++){const e=i[t],u=r/e;for(let r=0;r<e;r++)o+=Kn({pixelX:a,pixelY:u,row:r,column:t,radius:s,recurrentLine:n})}return o}function Un(t,e,r){return`<svg\n            xmlns="http://www.w3.org/2000/svg"\n            xmlns:xlink="http://www.w3.org/1999/xlink"\n            version="1.1"\n            width="${e}"\n            height="${r}">${t}</svg>`}function Bn(t){const{options:e}=t,{inputSize:r,outputSize:n,hiddenLayers:i}=e;return[r].concat(i).concat([n])}function jn(t,e){if(!t)throw new Error("sizes not set");if(t.some((t=>t<1)))throw new Error("sizes not set correctly");if(e&&e.length!==t[0])throw new Error("not enough labels for inputs");return t}const Wn={RNNTimeStep:In,LSTMTimeStep:Rn,GRUTimeStep:$n,RNN:vn,LSTM:On,GRU:An},Hn={max:Lr,mse:Ir,ones:de,ones2D:ge,random:bt,randomWeight:mt,randos:wt,range:function(t,e){const r=[];for(;t<e;t++)r.push(t);return r},toArray:function(t){return Array.isArray(t)?Float32Array.from(t):Float32Array.from(Object.values(t))},DataFormatter:Jr,zeros:I,toSVG:function(t,e){const r={line:{width:.5,color:"black",className:"connection"},recurrentLine:{width:1,color:"red",className:"recurrence"},inputs:{color:"rgba(0, 128, 0, 0.5)",labels:null,className:"input"},outputs:{color:"rgba(100, 149, 237, 0.5)",className:"output"},hidden:{color:"rgba(255, 127, 80, 0.5)",className:"hidden-neuron"},fontSize:"14px",fontClassName:"label",radius:8,width:400,height:250,sizes:[],...e},{width:n,height:i,inputs:s}=r;let a=[];if(t instanceof $r||t instanceof Wr)a=function(t){const{options:e,sizes:r}=t,{inputSize:n,outputSize:i,hiddenLayers:s}=e;if(!r){if("number"==typeof n&&n<1)throw new Error("inputSize not set");if("number"==typeof i&&i<1)throw new Error("outputSize not set");if(null==s?void 0:s.some((t=>t<1)))throw new Error("hiddenLayers not set")}return"number"==typeof n&&Array.isArray(s)&&"number"==typeof i?[n].concat(s).concat([i]):r}(t);else if(t instanceof Xr){const{inputSize:e,hiddenLayers:r,outputSize:n}=function(t){const e=[],{options:r}=t;if(!r.inputLayer)throw new Error("inputLayer not defined");if(!r.outputLayer)throw new Error("outputLayer not defined");const n=r.inputLayer();e.push(r.hiddenLayers[0](n,Pe(),0));for(let t=1;t<r.hiddenLayers.length;t++)e.push(r.hiddenLayers[t](e[t-1],Pe(),t));const i=r.outputLayer(e[e.length-1],-1);return{inputSize:n.height,hiddenLayers:e.map((t=>t.height)),outputSize:i.height}}(t);a=[e].concat(r).concat([n])}else if(t instanceof mr){const{inputSize:e,hiddenLayers:r,outputSize:n}=function(t){const{options:e}=t;if(!e)throw new Error("options not defined");if(!e.inputLayer)throw new Error("options.inputLater not defined");if(!e.hiddenLayers)throw new Error("options.hiddenLayers not defined");if(e.hiddenLayers.length<1)throw new Error("options.hiddenLayers is empty");if(!e.outputLayer)throw new Error("options.outputLayer not defined");const r=e.inputLayer(),n=[];n.push(e.hiddenLayers[0](r,0));for(let t=1;t<e.hiddenLayers.length;t++)n.push(e.hiddenLayers[t](n[t-1],t));const i=e.outputLayer(n[n.length-1],n.length);return{inputSize:r.height,hiddenLayers:n.map((t=>t.height)),outputSize:i.height}}(t);a=[e].concat(r).concat([n])}else{if(t instanceof vn||t instanceof On||t instanceof An||t instanceof In||t instanceof Rn||t instanceof $n)return Un(Gn({...r,sizes:jn(Bn(t),s.labels)}),n,i);if(t.hasOwnProperty("type"))switch(t.type){case"NeuralNetwork":case"NeuralNetworkGPU":return Un(Pn({...r,sizes:jn((o=t,o.sizes),s.labels)}),n,i);case"RNN":case"GRU":case"LSTM":case"RNNTimeStep":case"GRUTimeStep":case"LSTMTimeStep":return Un(Gn({...r,sizes:jn(Bn(t),s.labels)}),n,i);default:throw new Error("unrecognized network")}else if(t.hasOwnProperty("inputSize")&&t.hasOwnProperty("hiddenLayers")&&t.hasOwnProperty("outputSize")){const{inputSize:e,hiddenLayers:r,outputSize:n}=t;a=[e,...r,n]}else{if(!t.hasOwnProperty("sizes"))throw new Error("unrecognized network");a=t.sizes}}var o;return Un(Pn({...r,sizes:jn(a,s.labels)}),n,i)}};t.CrossValidate=m,t.FeedForward=mr,t.NeuralNetwork=$r,t.NeuralNetworkGPU=Wr,t.Recurrent=Xr,t.activation=f,t.layer=lr,t.layerTypes=hr,t.likely=function(t,e){if(!e)throw new TypeError(`Required parameter 'net' is of type ${typeof e}. Must be of type 'brain.NeuralNetwork'`);const r=e.run(t);let n=null,i=-1;return Object.entries(r).forEach((([t,e])=>{void 0!==e&&"number"==typeof e&&e>i&&(n=t,i=e)})),n},t.lookup=B,t.praxis=ht,t.recurrent=Wn,t.utilities=Hn,Object.defineProperty(t,"__esModule",{value:!0})}(e,r(985))},985:t=>{t.exports=function t(e,r,n){function i(a,o){if(!r[a]){if(!e[a]){if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var h=r[a]={exports:{}};e[a][0].call(h.exports,(function(t){return i(e[a][1][t]||t)}),h,h.exports,t,e,r,n)}return r[a].exports}for(var s=void 0,a=0;a<n.length;a++)i(n[a]);return i}({1:[function(t,e,r){var n,i;n=this,i=function(t){"use strict";var e={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},r="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",n={5:r,"5module":r+" export import",6:r+" const class extends export import super"},i=/^in(stanceof)?$/,s="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿯ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-Ᶎꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭧꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",a="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿",o=new RegExp("["+s+"]"),u=new RegExp("["+s+a+"]");s=a=null;var h=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541],l=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];function c(t,e){for(var r=65536,n=0;n<e.length;n+=2){if((r+=e[n])>t)return!1;if((r+=e[n+1])>=t)return!0}}function p(t,e){return t<65?36===t:t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&o.test(String.fromCharCode(t)):!1!==e&&c(t,h)))}function d(t,e){return t<48?36===t:t<58||!(t<65)&&(t<91||(t<97?95===t:t<123||(t<=65535?t>=170&&u.test(String.fromCharCode(t)):!1!==e&&(c(t,h)||c(t,l)))))}var g=function(t,e){void 0===e&&(e={}),this.label=t,this.keyword=e.keyword,this.beforeExpr=!!e.beforeExpr,this.startsExpr=!!e.startsExpr,this.isLoop=!!e.isLoop,this.isAssign=!!e.isAssign,this.prefix=!!e.prefix,this.postfix=!!e.postfix,this.binop=e.binop||null,this.updateContext=null};function f(t,e){return new g(t,{beforeExpr:!0,binop:e})}var m={beforeExpr:!0},y={startsExpr:!0},x={};function b(t,e){return void 0===e&&(e={}),e.keyword=t,x[t]=new g(t,e)}var w={num:new g("num",y),regexp:new g("regexp",y),string:new g("string",y),name:new g("name",y),eof:new g("eof"),bracketL:new g("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new g("]"),braceL:new g("{",{beforeExpr:!0,startsExpr:!0}),braceR:new g("}"),parenL:new g("(",{beforeExpr:!0,startsExpr:!0}),parenR:new g(")"),comma:new g(",",m),semi:new g(";",m),colon:new g(":",m),dot:new g("."),question:new g("?",m),arrow:new g("=>",m),template:new g("template"),invalidTemplate:new g("invalidTemplate"),ellipsis:new g("...",m),backQuote:new g("`",y),dollarBraceL:new g("${",{beforeExpr:!0,startsExpr:!0}),eq:new g("=",{beforeExpr:!0,isAssign:!0}),assign:new g("_=",{beforeExpr:!0,isAssign:!0}),incDec:new g("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new g("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:f("||",1),logicalAND:f("&&",2),bitwiseOR:f("|",3),bitwiseXOR:f("^",4),bitwiseAND:f("&",5),equality:f("==/!=/===/!==",6),relational:f("</>/<=/>=",7),bitShift:f("<</>>/>>>",8),plusMin:new g("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:f("%",10),star:f("*",10),slash:f("/",10),starstar:new g("**",{beforeExpr:!0}),_break:b("break"),_case:b("case",m),_catch:b("catch"),_continue:b("continue"),_debugger:b("debugger"),_default:b("default",m),_do:b("do",{isLoop:!0,beforeExpr:!0}),_else:b("else",m),_finally:b("finally"),_for:b("for",{isLoop:!0}),_function:b("function",y),_if:b("if"),_return:b("return",m),_switch:b("switch"),_throw:b("throw",m),_try:b("try"),_var:b("var"),_const:b("const"),_while:b("while",{isLoop:!0}),_with:b("with"),_new:b("new",{beforeExpr:!0,startsExpr:!0}),_this:b("this",y),_super:b("super",y),_class:b("class",y),_extends:b("extends",m),_export:b("export"),_import:b("import",y),_null:b("null",y),_true:b("true",y),_false:b("false",y),_in:b("in",{beforeExpr:!0,binop:7}),_instanceof:b("instanceof",{beforeExpr:!0,binop:7}),_typeof:b("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:b("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:b("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},T=/\r\n?|\n|\u2028|\u2029/,v=new RegExp(T.source,"g");function S(t,e){return 10===t||13===t||!e&&(8232===t||8233===t)}var A=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,_=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,k=Object.prototype,E=k.hasOwnProperty,L=k.toString;function I(t,e){return E.call(t,e)}var D=Array.isArray||function(t){return"[object Array]"===L.call(t)};function $(t){return new RegExp("^(?:"+t.replace(/ /g,"|")+")$")}var O=function(t,e){this.line=t,this.column=e};O.prototype.offset=function(t){return new O(this.line,this.column+t)};var C=function(t,e,r){this.start=e,this.end=r,null!==t.sourceFile&&(this.source=t.sourceFile)};function F(t,e){for(var r=1,n=0;;){v.lastIndex=n;var i=v.exec(t);if(!(i&&i.index<e))return new O(r,e-n);++r,n=i.index+i[0].length}}var R={ecmaVersion:10,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:!1,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1};function z(t){var e={};for(var r in R)e[r]=t&&I(t,r)?t[r]:R[r];if(e.ecmaVersion>=2015&&(e.ecmaVersion-=2009),null==e.allowReserved&&(e.allowReserved=e.ecmaVersion<5),D(e.onToken)){var n=e.onToken;e.onToken=function(t){return n.push(t)}}return D(e.onComment)&&(e.onComment=function(t,e){return function(r,n,i,s,a,o){var u={type:r?"Block":"Line",value:n,start:i,end:s};t.locations&&(u.loc=new C(this,a,o)),t.ranges&&(u.range=[i,s]),e.push(u)}}(e,e.onComment)),e}function M(t,e){return 2|(t?4:0)|(e?8:0)}var N=function(t,r,i){this.options=t=z(t),this.sourceFile=t.sourceFile,this.keywords=$(n[t.ecmaVersion>=6?6:"module"===t.sourceType?"5module":5]);var s="";if(!0!==t.allowReserved){for(var a=t.ecmaVersion;!(s=e[a]);a--);"module"===t.sourceType&&(s+=" await")}this.reservedWords=$(s);var o=(s?s+" ":"")+e.strict;this.reservedWordsStrict=$(o),this.reservedWordsStrictBind=$(o+" "+e.strictBind),this.input=String(r),this.containsEsc=!1,i?(this.pos=i,this.lineStart=this.input.lastIndexOf("\n",i-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(T).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=w.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===t.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports={},0===this.pos&&t.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null},V={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0}};N.prototype.parse=function(){var t=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(t)},V.inFunction.get=function(){return(2&this.currentVarScope().flags)>0},V.inGenerator.get=function(){return(8&this.currentVarScope().flags)>0},V.inAsync.get=function(){return(4&this.currentVarScope().flags)>0},V.allowSuper.get=function(){return(64&this.currentThisScope().flags)>0},V.allowDirectSuper.get=function(){return(128&this.currentThisScope().flags)>0},V.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},N.prototype.inNonArrowFunction=function(){return(2&this.currentThisScope().flags)>0},N.extend=function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];for(var r=this,n=0;n<t.length;n++)r=t[n](r);return r},N.parse=function(t,e){return new this(e,t).parse()},N.parseExpressionAt=function(t,e,r){var n=new this(r,t,e);return n.nextToken(),n.parseExpression()},N.tokenizer=function(t,e){return new this(e,t)},Object.defineProperties(N.prototype,V);var P=N.prototype,K=/^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;function G(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1}P.strictDirective=function(t){for(;;){_.lastIndex=t,t+=_.exec(this.input)[0].length;var e=K.exec(this.input.slice(t));if(!e)return!1;if("use strict"===(e[1]||e[2]))return!0;t+=e[0].length,_.lastIndex=t,t+=_.exec(this.input)[0].length,";"===this.input[t]&&t++}},P.eat=function(t){return this.type===t&&(this.next(),!0)},P.isContextual=function(t){return this.type===w.name&&this.value===t&&!this.containsEsc},P.eatContextual=function(t){return!!this.isContextual(t)&&(this.next(),!0)},P.expectContextual=function(t){this.eatContextual(t)||this.unexpected()},P.canInsertSemicolon=function(){return this.type===w.eof||this.type===w.braceR||T.test(this.input.slice(this.lastTokEnd,this.start))},P.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},P.semicolon=function(){this.eat(w.semi)||this.insertSemicolon()||this.unexpected()},P.afterTrailingComma=function(t,e){if(this.type===t)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),e||this.next(),!0},P.expect=function(t){this.eat(t)||this.unexpected()},P.unexpected=function(t){this.raise(null!=t?t:this.start,"Unexpected token")},P.checkPatternErrors=function(t,e){if(t){t.trailingComma>-1&&this.raiseRecoverable(t.trailingComma,"Comma is not permitted after the rest element");var r=e?t.parenthesizedAssign:t.parenthesizedBind;r>-1&&this.raiseRecoverable(r,"Parenthesized pattern")}},P.checkExpressionErrors=function(t,e){if(!t)return!1;var r=t.shorthandAssign,n=t.doubleProto;if(!e)return r>=0||n>=0;r>=0&&this.raise(r,"Shorthand property assignments are valid only in destructuring patterns"),n>=0&&this.raiseRecoverable(n,"Redefinition of __proto__ property")},P.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value")},P.isSimpleAssignTarget=function(t){return"ParenthesizedExpression"===t.type?this.isSimpleAssignTarget(t.expression):"Identifier"===t.type||"MemberExpression"===t.type};var U=N.prototype;U.parseTopLevel=function(t){var e={};for(t.body||(t.body=[]);this.type!==w.eof;){var r=this.parseStatement(null,!0,e);t.body.push(r)}if(this.inModule)for(var n=0,i=Object.keys(this.undefinedExports);n<i.length;n+=1){var s=i[n];this.raiseRecoverable(this.undefinedExports[s].start,"Export '"+s+"' is not defined")}return this.adaptDirectivePrologue(t.body),this.next(),t.sourceType=this.options.sourceType,this.finishNode(t,"Program")};var B={kind:"loop"},j={kind:"switch"};U.isLet=function(t){if(this.options.ecmaVersion<6||!this.isContextual("let"))return!1;_.lastIndex=this.pos;var e=_.exec(this.input),r=this.pos+e[0].length,n=this.input.charCodeAt(r);if(91===n)return!0;if(t)return!1;if(123===n)return!0;if(p(n,!0)){for(var s=r+1;d(this.input.charCodeAt(s),!0);)++s;var a=this.input.slice(r,s);if(!i.test(a))return!0}return!1},U.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return!1;_.lastIndex=this.pos;var t=_.exec(this.input),e=this.pos+t[0].length;return!(T.test(this.input.slice(this.pos,e))||"function"!==this.input.slice(e,e+8)||e+8!==this.input.length&&d(this.input.charAt(e+8)))},U.parseStatement=function(t,e,r){var n,i=this.type,s=this.startNode();switch(this.isLet(t)&&(i=w._var,n="let"),i){case w._break:case w._continue:return this.parseBreakContinueStatement(s,i.keyword);case w._debugger:return this.parseDebuggerStatement(s);case w._do:return this.parseDoStatement(s);case w._for:return this.parseForStatement(s);case w._function:return t&&(this.strict||"if"!==t&&"label"!==t)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(s,!1,!t);case w._class:return t&&this.unexpected(),this.parseClass(s,!0);case w._if:return this.parseIfStatement(s);case w._return:return this.parseReturnStatement(s);case w._switch:return this.parseSwitchStatement(s);case w._throw:return this.parseThrowStatement(s);case w._try:return this.parseTryStatement(s);case w._const:case w._var:return n=n||this.value,t&&"var"!==n&&this.unexpected(),this.parseVarStatement(s,n);case w._while:return this.parseWhileStatement(s);case w._with:return this.parseWithStatement(s);case w.braceL:return this.parseBlock(!0,s);case w.semi:return this.parseEmptyStatement(s);case w._export:case w._import:if(this.options.ecmaVersion>10&&i===w._import){_.lastIndex=this.pos;var a=_.exec(this.input),o=this.pos+a[0].length;if(40===this.input.charCodeAt(o))return this.parseExpressionStatement(s,this.parseExpression())}return this.options.allowImportExportEverywhere||(e||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),i===w._import?this.parseImport(s):this.parseExport(s,r);default:if(this.isAsyncFunction())return t&&this.unexpected(),this.next(),this.parseFunctionStatement(s,!0,!t);var u=this.value,h=this.parseExpression();return i===w.name&&"Identifier"===h.type&&this.eat(w.colon)?this.parseLabeledStatement(s,u,h,t):this.parseExpressionStatement(s,h)}},U.parseBreakContinueStatement=function(t,e){var r="break"===e;this.next(),this.eat(w.semi)||this.insertSemicolon()?t.label=null:this.type!==w.name?this.unexpected():(t.label=this.parseIdent(),this.semicolon());for(var n=0;n<this.labels.length;++n){var i=this.labels[n];if(null==t.label||i.name===t.label.name){if(null!=i.kind&&(r||"loop"===i.kind))break;if(t.label&&r)break}}return n===this.labels.length&&this.raise(t.start,"Unsyntactic "+e),this.finishNode(t,r?"BreakStatement":"ContinueStatement")},U.parseDebuggerStatement=function(t){return this.next(),this.semicolon(),this.finishNode(t,"DebuggerStatement")},U.parseDoStatement=function(t){return this.next(),this.labels.push(B),t.body=this.parseStatement("do"),this.labels.pop(),this.expect(w._while),t.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(w.semi):this.semicolon(),this.finishNode(t,"DoWhileStatement")},U.parseForStatement=function(t){this.next();var e=this.options.ecmaVersion>=9&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction)&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(B),this.enterScope(0),this.expect(w.parenL),this.type===w.semi)return e>-1&&this.unexpected(e),this.parseFor(t,null);var r=this.isLet();if(this.type===w._var||this.type===w._const||r){var n=this.startNode(),i=r?"let":this.value;return this.next(),this.parseVar(n,!0,i),this.finishNode(n,"VariableDeclaration"),(this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===n.declarations.length?(this.options.ecmaVersion>=9&&(this.type===w._in?e>-1&&this.unexpected(e):t.await=e>-1),this.parseForIn(t,n)):(e>-1&&this.unexpected(e),this.parseFor(t,n))}var s=new G,a=this.parseExpression(!0,s);return this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?(this.options.ecmaVersion>=9&&(this.type===w._in?e>-1&&this.unexpected(e):t.await=e>-1),this.toAssignable(a,!1,s),this.checkLVal(a),this.parseForIn(t,a)):(this.checkExpressionErrors(s,!0),e>-1&&this.unexpected(e),this.parseFor(t,a))},U.parseFunctionStatement=function(t,e,r){return this.next(),this.parseFunction(t,H|(r?0:X),!1,e)},U.parseIfStatement=function(t){return this.next(),t.test=this.parseParenExpression(),t.consequent=this.parseStatement("if"),t.alternate=this.eat(w._else)?this.parseStatement("if"):null,this.finishNode(t,"IfStatement")},U.parseReturnStatement=function(t){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(w.semi)||this.insertSemicolon()?t.argument=null:(t.argument=this.parseExpression(),this.semicolon()),this.finishNode(t,"ReturnStatement")},U.parseSwitchStatement=function(t){var e;this.next(),t.discriminant=this.parseParenExpression(),t.cases=[],this.expect(w.braceL),this.labels.push(j),this.enterScope(0);for(var r=!1;this.type!==w.braceR;)if(this.type===w._case||this.type===w._default){var n=this.type===w._case;e&&this.finishNode(e,"SwitchCase"),t.cases.push(e=this.startNode()),e.consequent=[],this.next(),n?e.test=this.parseExpression():(r&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),r=!0,e.test=null),this.expect(w.colon)}else e||this.unexpected(),e.consequent.push(this.parseStatement(null));return this.exitScope(),e&&this.finishNode(e,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(t,"SwitchStatement")},U.parseThrowStatement=function(t){return this.next(),T.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),t.argument=this.parseExpression(),this.semicolon(),this.finishNode(t,"ThrowStatement")};var W=[];U.parseTryStatement=function(t){if(this.next(),t.block=this.parseBlock(),t.handler=null,this.type===w._catch){var e=this.startNode();if(this.next(),this.eat(w.parenL)){e.param=this.parseBindingAtom();var r="Identifier"===e.param.type;this.enterScope(r?32:0),this.checkLVal(e.param,r?4:2),this.expect(w.parenR)}else this.options.ecmaVersion<10&&this.unexpected(),e.param=null,this.enterScope(0);e.body=this.parseBlock(!1),this.exitScope(),t.handler=this.finishNode(e,"CatchClause")}return t.finalizer=this.eat(w._finally)?this.parseBlock():null,t.handler||t.finalizer||this.raise(t.start,"Missing catch or finally clause"),this.finishNode(t,"TryStatement")},U.parseVarStatement=function(t,e){return this.next(),this.parseVar(t,!1,e),this.semicolon(),this.finishNode(t,"VariableDeclaration")},U.parseWhileStatement=function(t){return this.next(),t.test=this.parseParenExpression(),this.labels.push(B),t.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(t,"WhileStatement")},U.parseWithStatement=function(t){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),t.object=this.parseParenExpression(),t.body=this.parseStatement("with"),this.finishNode(t,"WithStatement")},U.parseEmptyStatement=function(t){return this.next(),this.finishNode(t,"EmptyStatement")},U.parseLabeledStatement=function(t,e,r,n){for(var i=0,s=this.labels;i<s.length;i+=1)s[i].name===e&&this.raise(r.start,"Label '"+e+"' is already declared");for(var a=this.type.isLoop?"loop":this.type===w._switch?"switch":null,o=this.labels.length-1;o>=0;o--){var u=this.labels[o];if(u.statementStart!==t.start)break;u.statementStart=this.start,u.kind=a}return this.labels.push({name:e,kind:a,statementStart:this.start}),t.body=this.parseStatement(n?-1===n.indexOf("label")?n+"label":n:"label"),this.labels.pop(),t.label=r,this.finishNode(t,"LabeledStatement")},U.parseExpressionStatement=function(t,e){return t.expression=e,this.semicolon(),this.finishNode(t,"ExpressionStatement")},U.parseBlock=function(t,e){for(void 0===t&&(t=!0),void 0===e&&(e=this.startNode()),e.body=[],this.expect(w.braceL),t&&this.enterScope(0);!this.eat(w.braceR);){var r=this.parseStatement(null);e.body.push(r)}return t&&this.exitScope(),this.finishNode(e,"BlockStatement")},U.parseFor=function(t,e){return t.init=e,this.expect(w.semi),t.test=this.type===w.semi?null:this.parseExpression(),this.expect(w.semi),t.update=this.type===w.parenR?null:this.parseExpression(),this.expect(w.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,"ForStatement")},U.parseForIn=function(t,e){var r=this.type===w._in;return this.next(),"VariableDeclaration"===e.type&&null!=e.declarations[0].init&&(!r||this.options.ecmaVersion<8||this.strict||"var"!==e.kind||"Identifier"!==e.declarations[0].id.type)?this.raise(e.start,(r?"for-in":"for-of")+" loop variable declaration may not have an initializer"):"AssignmentPattern"===e.type&&this.raise(e.start,"Invalid left-hand side in for-loop"),t.left=e,t.right=r?this.parseExpression():this.parseMaybeAssign(),this.expect(w.parenR),t.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(t,r?"ForInStatement":"ForOfStatement")},U.parseVar=function(t,e,r){for(t.declarations=[],t.kind=r;;){var n=this.startNode();if(this.parseVarId(n,r),this.eat(w.eq)?n.init=this.parseMaybeAssign(e):"const"!==r||this.type===w._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===n.id.type||e&&(this.type===w._in||this.isContextual("of"))?n.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),t.declarations.push(this.finishNode(n,"VariableDeclarator")),!this.eat(w.comma))break}return t},U.parseVarId=function(t,e){t.id=this.parseBindingAtom(),this.checkLVal(t.id,"var"===e?1:2,!1)};var H=1,X=2;U.parseFunction=function(t,e,r,n){this.initFunction(t),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!n)&&(this.type===w.star&&e&X&&this.unexpected(),t.generator=this.eat(w.star)),this.options.ecmaVersion>=8&&(t.async=!!n),e&H&&(t.id=4&e&&this.type!==w.name?null:this.parseIdent(),!t.id||e&X||this.checkLVal(t.id,this.strict||t.generator||t.async?this.treatFunctionsAsVar?1:2:3));var i=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(M(t.async,t.generator)),e&H||(t.id=this.type===w.name?this.parseIdent():null),this.parseFunctionParams(t),this.parseFunctionBody(t,r,!1),this.yieldPos=i,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(t,e&H?"FunctionDeclaration":"FunctionExpression")},U.parseFunctionParams=function(t){this.expect(w.parenL),t.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams()},U.parseClass=function(t,e){this.next();var r=this.strict;this.strict=!0,this.parseClassId(t,e),this.parseClassSuper(t);var n=this.startNode(),i=!1;for(n.body=[],this.expect(w.braceL);!this.eat(w.braceR);){var s=this.parseClassElement(null!==t.superClass);s&&(n.body.push(s),"MethodDefinition"===s.type&&"constructor"===s.kind&&(i&&this.raise(s.start,"Duplicate constructor in the same class"),i=!0))}return t.body=this.finishNode(n,"ClassBody"),this.strict=r,this.finishNode(t,e?"ClassDeclaration":"ClassExpression")},U.parseClassElement=function(t){var e=this;if(this.eat(w.semi))return null;var r=this.startNode(),n=function(t,n){void 0===n&&(n=!1);var i=e.start,s=e.startLoc;return!(!e.eatContextual(t)||(e.type===w.parenL||n&&e.canInsertSemicolon())&&(r.key&&e.unexpected(),r.computed=!1,r.key=e.startNodeAt(i,s),r.key.name=t,e.finishNode(r.key,"Identifier"),1))};r.kind="method",r.static=n("static");var i=this.eat(w.star),s=!1;i||(this.options.ecmaVersion>=8&&n("async",!0)?(s=!0,i=this.options.ecmaVersion>=9&&this.eat(w.star)):n("get")?r.kind="get":n("set")&&(r.kind="set")),r.key||this.parsePropertyName(r);var a=r.key,o=!1;return r.computed||r.static||!("Identifier"===a.type&&"constructor"===a.name||"Literal"===a.type&&"constructor"===a.value)?r.static&&"Identifier"===a.type&&"prototype"===a.name&&this.raise(a.start,"Classes may not have a static property named prototype"):("method"!==r.kind&&this.raise(a.start,"Constructor can't have get/set modifier"),i&&this.raise(a.start,"Constructor can't be a generator"),s&&this.raise(a.start,"Constructor can't be an async method"),r.kind="constructor",o=t),this.parseClassMethod(r,i,s,o),"get"===r.kind&&0!==r.value.params.length&&this.raiseRecoverable(r.value.start,"getter should have no params"),"set"===r.kind&&1!==r.value.params.length&&this.raiseRecoverable(r.value.start,"setter should have exactly one param"),"set"===r.kind&&"RestElement"===r.value.params[0].type&&this.raiseRecoverable(r.value.params[0].start,"Setter cannot use rest params"),r},U.parseClassMethod=function(t,e,r,n){return t.value=this.parseMethod(e,r,n),this.finishNode(t,"MethodDefinition")},U.parseClassId=function(t,e){this.type===w.name?(t.id=this.parseIdent(),e&&this.checkLVal(t.id,2,!1)):(!0===e&&this.unexpected(),t.id=null)},U.parseClassSuper=function(t){t.superClass=this.eat(w._extends)?this.parseExprSubscripts():null},U.parseExport=function(t,e){if(this.next(),this.eat(w.star))return this.expectContextual("from"),this.type!==w.string&&this.unexpected(),t.source=this.parseExprAtom(),this.semicolon(),this.finishNode(t,"ExportAllDeclaration");if(this.eat(w._default)){var r;if(this.checkExport(e,"default",this.lastTokStart),this.type===w._function||(r=this.isAsyncFunction())){var n=this.startNode();this.next(),r&&this.next(),t.declaration=this.parseFunction(n,4|H,!1,r)}else if(this.type===w._class){var i=this.startNode();t.declaration=this.parseClass(i,"nullableID")}else t.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(t,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())t.declaration=this.parseStatement(null),"VariableDeclaration"===t.declaration.type?this.checkVariableExport(e,t.declaration.declarations):this.checkExport(e,t.declaration.id.name,t.declaration.id.start),t.specifiers=[],t.source=null;else{if(t.declaration=null,t.specifiers=this.parseExportSpecifiers(e),this.eatContextual("from"))this.type!==w.string&&this.unexpected(),t.source=this.parseExprAtom();else{for(var s=0,a=t.specifiers;s<a.length;s+=1){var o=a[s];this.checkUnreserved(o.local),this.checkLocalExport(o.local)}t.source=null}this.semicolon()}return this.finishNode(t,"ExportNamedDeclaration")},U.checkExport=function(t,e,r){t&&(I(t,e)&&this.raiseRecoverable(r,"Duplicate export '"+e+"'"),t[e]=!0)},U.checkPatternExport=function(t,e){var r=e.type;if("Identifier"===r)this.checkExport(t,e.name,e.start);else if("ObjectPattern"===r)for(var n=0,i=e.properties;n<i.length;n+=1){var s=i[n];this.checkPatternExport(t,s)}else if("ArrayPattern"===r)for(var a=0,o=e.elements;a<o.length;a+=1){var u=o[a];u&&this.checkPatternExport(t,u)}else"Property"===r?this.checkPatternExport(t,e.value):"AssignmentPattern"===r?this.checkPatternExport(t,e.left):"RestElement"===r?this.checkPatternExport(t,e.argument):"ParenthesizedExpression"===r&&this.checkPatternExport(t,e.expression)},U.checkVariableExport=function(t,e){if(t)for(var r=0,n=e;r<n.length;r+=1){var i=n[r];this.checkPatternExport(t,i.id)}},U.shouldParseExportStatement=function(){return"var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},U.parseExportSpecifiers=function(t){var e=[],r=!0;for(this.expect(w.braceL);!this.eat(w.braceR);){if(r)r=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var n=this.startNode();n.local=this.parseIdent(!0),n.exported=this.eatContextual("as")?this.parseIdent(!0):n.local,this.checkExport(t,n.exported.name,n.exported.start),e.push(this.finishNode(n,"ExportSpecifier"))}return e},U.parseImport=function(t){return this.next(),this.type===w.string?(t.specifiers=W,t.source=this.parseExprAtom()):(t.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),t.source=this.type===w.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(t,"ImportDeclaration")},U.parseImportSpecifiers=function(){var t=[],e=!0;if(this.type===w.name){var r=this.startNode();if(r.local=this.parseIdent(),this.checkLVal(r.local,2),t.push(this.finishNode(r,"ImportDefaultSpecifier")),!this.eat(w.comma))return t}if(this.type===w.star){var n=this.startNode();return this.next(),this.expectContextual("as"),n.local=this.parseIdent(),this.checkLVal(n.local,2),t.push(this.finishNode(n,"ImportNamespaceSpecifier")),t}for(this.expect(w.braceL);!this.eat(w.braceR);){if(e)e=!1;else if(this.expect(w.comma),this.afterTrailingComma(w.braceR))break;var i=this.startNode();i.imported=this.parseIdent(!0),this.eatContextual("as")?i.local=this.parseIdent():(this.checkUnreserved(i.imported),i.local=i.imported),this.checkLVal(i.local,2),t.push(this.finishNode(i,"ImportSpecifier"))}return t},U.adaptDirectivePrologue=function(t){for(var e=0;e<t.length&&this.isDirectiveCandidate(t[e]);++e)t[e].directive=t[e].expression.raw.slice(1,-1)},U.isDirectiveCandidate=function(t){return"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"string"==typeof t.expression.value&&('"'===this.input[t.start]||"'"===this.input[t.start])};var q=N.prototype;q.toAssignable=function(t,e,r){if(this.options.ecmaVersion>=6&&t)switch(t.type){case"Identifier":this.inAsync&&"await"===t.name&&this.raise(t.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"RestElement":break;case"ObjectExpression":t.type="ObjectPattern",r&&this.checkPatternErrors(r,!0);for(var n=0,i=t.properties;n<i.length;n+=1){var s=i[n];this.toAssignable(s,e),"RestElement"!==s.type||"ArrayPattern"!==s.argument.type&&"ObjectPattern"!==s.argument.type||this.raise(s.argument.start,"Unexpected token")}break;case"Property":"init"!==t.kind&&this.raise(t.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(t.value,e);break;case"ArrayExpression":t.type="ArrayPattern",r&&this.checkPatternErrors(r,!0),this.toAssignableList(t.elements,e);break;case"SpreadElement":t.type="RestElement",this.toAssignable(t.argument,e),"AssignmentPattern"===t.argument.type&&this.raise(t.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==t.operator&&this.raise(t.left.end,"Only '=' operator can be used for specifying default value."),t.type="AssignmentPattern",delete t.operator,this.toAssignable(t.left,e);case"AssignmentPattern":break;case"ParenthesizedExpression":this.toAssignable(t.expression,e,r);break;case"MemberExpression":if(!e)break;default:this.raise(t.start,"Assigning to rvalue")}else r&&this.checkPatternErrors(r,!0);return t},q.toAssignableList=function(t,e){for(var r=t.length,n=0;n<r;n++){var i=t[n];i&&this.toAssignable(i,e)}if(r){var s=t[r-1];6===this.options.ecmaVersion&&e&&s&&"RestElement"===s.type&&"Identifier"!==s.argument.type&&this.unexpected(s.argument.start)}return t},q.parseSpread=function(t){var e=this.startNode();return this.next(),e.argument=this.parseMaybeAssign(!1,t),this.finishNode(e,"SpreadElement")},q.parseRestBinding=function(){var t=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==w.name&&this.unexpected(),t.argument=this.parseBindingAtom(),this.finishNode(t,"RestElement")},q.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case w.bracketL:var t=this.startNode();return this.next(),t.elements=this.parseBindingList(w.bracketR,!0,!0),this.finishNode(t,"ArrayPattern");case w.braceL:return this.parseObj(!0)}return this.parseIdent()},q.parseBindingList=function(t,e,r){for(var n=[],i=!0;!this.eat(t);)if(i?i=!1:this.expect(w.comma),e&&this.type===w.comma)n.push(null);else{if(r&&this.afterTrailingComma(t))break;if(this.type===w.ellipsis){var s=this.parseRestBinding();this.parseBindingListItem(s),n.push(s),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(t);break}var a=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(a),n.push(a)}return n},q.parseBindingListItem=function(t){return t},q.parseMaybeDefault=function(t,e,r){if(r=r||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(w.eq))return r;var n=this.startNodeAt(t,e);return n.left=r,n.right=this.parseMaybeAssign(),this.finishNode(n,"AssignmentPattern")},q.checkLVal=function(t,e,r){switch(void 0===e&&(e=0),t.type){case"Identifier":2===e&&"let"===t.name&&this.raiseRecoverable(t.start,"let is disallowed as a lexically bound name"),this.strict&&this.reservedWordsStrictBind.test(t.name)&&this.raiseRecoverable(t.start,(e?"Binding ":"Assigning to ")+t.name+" in strict mode"),r&&(I(r,t.name)&&this.raiseRecoverable(t.start,"Argument name clash"),r[t.name]=!0),0!==e&&5!==e&&this.declareName(t.name,e,t.start);break;case"MemberExpression":e&&this.raiseRecoverable(t.start,"Binding member expression");break;case"ObjectPattern":for(var n=0,i=t.properties;n<i.length;n+=1){var s=i[n];this.checkLVal(s,e,r)}break;case"Property":this.checkLVal(t.value,e,r);break;case"ArrayPattern":for(var a=0,o=t.elements;a<o.length;a+=1){var u=o[a];u&&this.checkLVal(u,e,r)}break;case"AssignmentPattern":this.checkLVal(t.left,e,r);break;case"RestElement":this.checkLVal(t.argument,e,r);break;case"ParenthesizedExpression":this.checkLVal(t.expression,e,r);break;default:this.raise(t.start,(e?"Binding":"Assigning to")+" rvalue")}};var Y=N.prototype;Y.checkPropClash=function(t,e,r){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===t.type||this.options.ecmaVersion>=6&&(t.computed||t.method||t.shorthand))){var n,i=t.key;switch(i.type){case"Identifier":n=i.name;break;case"Literal":n=String(i.value);break;default:return}var s=t.kind;if(this.options.ecmaVersion>=6)"__proto__"===n&&"init"===s&&(e.proto&&(r?r.doubleProto<0&&(r.doubleProto=i.start):this.raiseRecoverable(i.start,"Redefinition of __proto__ property")),e.proto=!0);else{var a=e[n="$"+n];a?("init"===s?this.strict&&a.init||a.get||a.set:a.init||a[s])&&this.raiseRecoverable(i.start,"Redefinition of property"):a=e[n]={init:!1,get:!1,set:!1},a[s]=!0}}},Y.parseExpression=function(t,e){var r=this.start,n=this.startLoc,i=this.parseMaybeAssign(t,e);if(this.type===w.comma){var s=this.startNodeAt(r,n);for(s.expressions=[i];this.eat(w.comma);)s.expressions.push(this.parseMaybeAssign(t,e));return this.finishNode(s,"SequenceExpression")}return i},Y.parseMaybeAssign=function(t,e,r){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(t);this.exprAllowed=!1}var n=!1,i=-1,s=-1;e?(i=e.parenthesizedAssign,s=e.trailingComma,e.parenthesizedAssign=e.trailingComma=-1):(e=new G,n=!0);var a=this.start,o=this.startLoc;this.type!==w.parenL&&this.type!==w.name||(this.potentialArrowAt=this.start);var u=this.parseMaybeConditional(t,e);if(r&&(u=r.call(this,u,a,o)),this.type.isAssign){var h=this.startNodeAt(a,o);return h.operator=this.value,h.left=this.type===w.eq?this.toAssignable(u,!1,e):u,n||(e.parenthesizedAssign=e.trailingComma=e.doubleProto=-1),e.shorthandAssign>=h.left.start&&(e.shorthandAssign=-1),this.checkLVal(u),this.next(),h.right=this.parseMaybeAssign(t),this.finishNode(h,"AssignmentExpression")}return n&&this.checkExpressionErrors(e,!0),i>-1&&(e.parenthesizedAssign=i),s>-1&&(e.trailingComma=s),u},Y.parseMaybeConditional=function(t,e){var r=this.start,n=this.startLoc,i=this.parseExprOps(t,e);if(this.checkExpressionErrors(e))return i;if(this.eat(w.question)){var s=this.startNodeAt(r,n);return s.test=i,s.consequent=this.parseMaybeAssign(),this.expect(w.colon),s.alternate=this.parseMaybeAssign(t),this.finishNode(s,"ConditionalExpression")}return i},Y.parseExprOps=function(t,e){var r=this.start,n=this.startLoc,i=this.parseMaybeUnary(e,!1);return this.checkExpressionErrors(e)||i.start===r&&"ArrowFunctionExpression"===i.type?i:this.parseExprOp(i,r,n,-1,t)},Y.parseExprOp=function(t,e,r,n,i){var s=this.type.binop;if(null!=s&&(!i||this.type!==w._in)&&s>n){var a=this.type===w.logicalOR||this.type===w.logicalAND,o=this.value;this.next();var u=this.start,h=this.startLoc,l=this.parseExprOp(this.parseMaybeUnary(null,!1),u,h,s,i),c=this.buildBinary(e,r,t,l,o,a);return this.parseExprOp(c,e,r,n,i)}return t},Y.buildBinary=function(t,e,r,n,i,s){var a=this.startNodeAt(t,e);return a.left=r,a.operator=i,a.right=n,this.finishNode(a,s?"LogicalExpression":"BinaryExpression")},Y.parseMaybeUnary=function(t,e){var r,n=this.start,i=this.startLoc;if(this.isContextual("await")&&(this.inAsync||!this.inFunction&&this.options.allowAwaitOutsideFunction))r=this.parseAwait(),e=!0;else if(this.type.prefix){var s=this.startNode(),a=this.type===w.incDec;s.operator=this.value,s.prefix=!0,this.next(),s.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(t,!0),a?this.checkLVal(s.argument):this.strict&&"delete"===s.operator&&"Identifier"===s.argument.type?this.raiseRecoverable(s.start,"Deleting local variable in strict mode"):e=!0,r=this.finishNode(s,a?"UpdateExpression":"UnaryExpression")}else{if(r=this.parseExprSubscripts(t),this.checkExpressionErrors(t))return r;for(;this.type.postfix&&!this.canInsertSemicolon();){var o=this.startNodeAt(n,i);o.operator=this.value,o.prefix=!1,o.argument=r,this.checkLVal(r),this.next(),r=this.finishNode(o,"UpdateExpression")}}return!e&&this.eat(w.starstar)?this.buildBinary(n,i,r,this.parseMaybeUnary(null,!1),"**",!1):r},Y.parseExprSubscripts=function(t){var e=this.start,r=this.startLoc,n=this.parseExprAtom(t);if("ArrowFunctionExpression"===n.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd))return n;var i=this.parseSubscripts(n,e,r);return t&&"MemberExpression"===i.type&&(t.parenthesizedAssign>=i.start&&(t.parenthesizedAssign=-1),t.parenthesizedBind>=i.start&&(t.parenthesizedBind=-1)),i},Y.parseSubscripts=function(t,e,r,n){for(var i=this.options.ecmaVersion>=8&&"Identifier"===t.type&&"async"===t.name&&this.lastTokEnd===t.end&&!this.canInsertSemicolon()&&"async"===this.input.slice(t.start,t.end);;){var s=this.parseSubscript(t,e,r,n,i);if(s===t||"ArrowFunctionExpression"===s.type)return s;t=s}},Y.parseSubscript=function(t,e,r,n,i){var s=this.eat(w.bracketL);if(s||this.eat(w.dot)){var a=this.startNodeAt(e,r);a.object=t,a.property=s?this.parseExpression():this.parseIdent("never"!==this.options.allowReserved),a.computed=!!s,s&&this.expect(w.bracketR),t=this.finishNode(a,"MemberExpression")}else if(!n&&this.eat(w.parenL)){var o=new G,u=this.yieldPos,h=this.awaitPos,l=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var c=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1,o);if(i&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(o,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=u,this.awaitPos=h,this.awaitIdentPos=l,this.parseArrowExpression(this.startNodeAt(e,r),c,!0);this.checkExpressionErrors(o,!0),this.yieldPos=u||this.yieldPos,this.awaitPos=h||this.awaitPos,this.awaitIdentPos=l||this.awaitIdentPos;var p=this.startNodeAt(e,r);p.callee=t,p.arguments=c,t=this.finishNode(p,"CallExpression")}else if(this.type===w.backQuote){var d=this.startNodeAt(e,r);d.tag=t,d.quasi=this.parseTemplate({isTagged:!0}),t=this.finishNode(d,"TaggedTemplateExpression")}return t},Y.parseExprAtom=function(t){this.type===w.slash&&this.readRegexp();var e,r=this.potentialArrowAt===this.start;switch(this.type){case w._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),e=this.startNode(),this.next(),this.type!==w.parenL||this.allowDirectSuper||this.raise(e.start,"super() call outside constructor of a subclass"),this.type!==w.dot&&this.type!==w.bracketL&&this.type!==w.parenL&&this.unexpected(),this.finishNode(e,"Super");case w._this:return e=this.startNode(),this.next(),this.finishNode(e,"ThisExpression");case w.name:var n=this.start,i=this.startLoc,s=this.containsEsc,a=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!s&&"async"===a.name&&!this.canInsertSemicolon()&&this.eat(w._function))return this.parseFunction(this.startNodeAt(n,i),0,!1,!0);if(r&&!this.canInsertSemicolon()){if(this.eat(w.arrow))return this.parseArrowExpression(this.startNodeAt(n,i),[a],!1);if(this.options.ecmaVersion>=8&&"async"===a.name&&this.type===w.name&&!s)return a=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(w.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(n,i),[a],!0)}return a;case w.regexp:var o=this.value;return(e=this.parseLiteral(o.value)).regex={pattern:o.pattern,flags:o.flags},e;case w.num:case w.string:return this.parseLiteral(this.value);case w._null:case w._true:case w._false:return(e=this.startNode()).value=this.type===w._null?null:this.type===w._true,e.raw=this.type.keyword,this.next(),this.finishNode(e,"Literal");case w.parenL:var u=this.start,h=this.parseParenAndDistinguishExpression(r);return t&&(t.parenthesizedAssign<0&&!this.isSimpleAssignTarget(h)&&(t.parenthesizedAssign=u),t.parenthesizedBind<0&&(t.parenthesizedBind=u)),h;case w.bracketL:return e=this.startNode(),this.next(),e.elements=this.parseExprList(w.bracketR,!0,!0,t),this.finishNode(e,"ArrayExpression");case w.braceL:return this.parseObj(!1,t);case w._function:return e=this.startNode(),this.next(),this.parseFunction(e,0);case w._class:return this.parseClass(this.startNode(),!1);case w._new:return this.parseNew();case w.backQuote:return this.parseTemplate();case w._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected()}},Y.parseExprImport=function(){var t=this.startNode();if(this.next(),this.type===w.parenL)return this.parseDynamicImport(t);this.unexpected()},Y.parseDynamicImport=function(t){if(this.next(),t.source=this.parseMaybeAssign(),!this.eat(w.parenR)){var e=this.start;this.eat(w.comma)&&this.eat(w.parenR)?this.raiseRecoverable(e,"Trailing comma is not allowed in import()"):this.unexpected(e)}return this.finishNode(t,"ImportExpression")},Y.parseLiteral=function(t){var e=this.startNode();return e.value=t,e.raw=this.input.slice(this.start,this.end),110===e.raw.charCodeAt(e.raw.length-1)&&(e.bigint=e.raw.slice(0,-1)),this.next(),this.finishNode(e,"Literal")},Y.parseParenExpression=function(){this.expect(w.parenL);var t=this.parseExpression();return this.expect(w.parenR),t},Y.parseParenAndDistinguishExpression=function(t){var e,r=this.start,n=this.startLoc,i=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var s,a=this.start,o=this.startLoc,u=[],h=!0,l=!1,c=new G,p=this.yieldPos,d=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==w.parenR;){if(h?h=!1:this.expect(w.comma),i&&this.afterTrailingComma(w.parenR,!0)){l=!0;break}if(this.type===w.ellipsis){s=this.start,u.push(this.parseParenItem(this.parseRestBinding())),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}u.push(this.parseMaybeAssign(!1,c,this.parseParenItem))}var g=this.start,f=this.startLoc;if(this.expect(w.parenR),t&&!this.canInsertSemicolon()&&this.eat(w.arrow))return this.checkPatternErrors(c,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=p,this.awaitPos=d,this.parseParenArrowList(r,n,u);u.length&&!l||this.unexpected(this.lastTokStart),s&&this.unexpected(s),this.checkExpressionErrors(c,!0),this.yieldPos=p||this.yieldPos,this.awaitPos=d||this.awaitPos,u.length>1?((e=this.startNodeAt(a,o)).expressions=u,this.finishNodeAt(e,"SequenceExpression",g,f)):e=u[0]}else e=this.parseParenExpression();if(this.options.preserveParens){var m=this.startNodeAt(r,n);return m.expression=e,this.finishNode(m,"ParenthesizedExpression")}return e},Y.parseParenItem=function(t){return t},Y.parseParenArrowList=function(t,e,r){return this.parseArrowExpression(this.startNodeAt(t,e),r)};var J=[];Y.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var t=this.startNode(),e=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(w.dot)){t.meta=e;var r=this.containsEsc;return t.property=this.parseIdent(!0),("target"!==t.property.name||r)&&this.raiseRecoverable(t.property.start,"The only valid meta property for new is new.target"),this.inNonArrowFunction()||this.raiseRecoverable(t.start,"new.target can only be used in functions"),this.finishNode(t,"MetaProperty")}var n=this.start,i=this.startLoc,s=this.type===w._import;return t.callee=this.parseSubscripts(this.parseExprAtom(),n,i,!0),s&&"ImportExpression"===t.callee.type&&this.raise(n,"Cannot use new with import()"),this.eat(w.parenL)?t.arguments=this.parseExprList(w.parenR,this.options.ecmaVersion>=8,!1):t.arguments=J,this.finishNode(t,"NewExpression")},Y.parseTemplateElement=function(t){var e=t.isTagged,r=this.startNode();return this.type===w.invalidTemplate?(e||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),r.value={raw:this.value,cooked:null}):r.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),r.tail=this.type===w.backQuote,this.finishNode(r,"TemplateElement")},Y.parseTemplate=function(t){void 0===t&&(t={});var e=t.isTagged;void 0===e&&(e=!1);var r=this.startNode();this.next(),r.expressions=[];var n=this.parseTemplateElement({isTagged:e});for(r.quasis=[n];!n.tail;)this.type===w.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(w.dollarBraceL),r.expressions.push(this.parseExpression()),this.expect(w.braceR),r.quasis.push(n=this.parseTemplateElement({isTagged:e}));return this.next(),this.finishNode(r,"TemplateLiteral")},Y.isAsyncProp=function(t){return!t.computed&&"Identifier"===t.key.type&&"async"===t.key.name&&(this.type===w.name||this.type===w.num||this.type===w.string||this.type===w.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===w.star)&&!T.test(this.input.slice(this.lastTokEnd,this.start))},Y.parseObj=function(t,e){var r=this.startNode(),n=!0,i={};for(r.properties=[],this.next();!this.eat(w.braceR);){if(n)n=!1;else if(this.expect(w.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(w.braceR))break;var s=this.parseProperty(t,e);t||this.checkPropClash(s,i,e),r.properties.push(s)}return this.finishNode(r,t?"ObjectPattern":"ObjectExpression")},Y.parseProperty=function(t,e){var r,n,i,s,a=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(w.ellipsis))return t?(a.argument=this.parseIdent(!1),this.type===w.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(a,"RestElement")):(this.type===w.parenL&&e&&(e.parenthesizedAssign<0&&(e.parenthesizedAssign=this.start),e.parenthesizedBind<0&&(e.parenthesizedBind=this.start)),a.argument=this.parseMaybeAssign(!1,e),this.type===w.comma&&e&&e.trailingComma<0&&(e.trailingComma=this.start),this.finishNode(a,"SpreadElement"));this.options.ecmaVersion>=6&&(a.method=!1,a.shorthand=!1,(t||e)&&(i=this.start,s=this.startLoc),t||(r=this.eat(w.star)));var o=this.containsEsc;return this.parsePropertyName(a),!t&&!o&&this.options.ecmaVersion>=8&&!r&&this.isAsyncProp(a)?(n=!0,r=this.options.ecmaVersion>=9&&this.eat(w.star),this.parsePropertyName(a,e)):n=!1,this.parsePropertyValue(a,t,r,n,i,s,e,o),this.finishNode(a,"Property")},Y.parsePropertyValue=function(t,e,r,n,i,s,a,o){if((r||n)&&this.type===w.colon&&this.unexpected(),this.eat(w.colon))t.value=e?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,a),t.kind="init";else if(this.options.ecmaVersion>=6&&this.type===w.parenL)e&&this.unexpected(),t.kind="init",t.method=!0,t.value=this.parseMethod(r,n);else if(e||o||!(this.options.ecmaVersion>=5)||t.computed||"Identifier"!==t.key.type||"get"!==t.key.name&&"set"!==t.key.name||this.type===w.comma||this.type===w.braceR)this.options.ecmaVersion>=6&&!t.computed&&"Identifier"===t.key.type?((r||n)&&this.unexpected(),this.checkUnreserved(t.key),"await"!==t.key.name||this.awaitIdentPos||(this.awaitIdentPos=i),t.kind="init",e?t.value=this.parseMaybeDefault(i,s,t.key):this.type===w.eq&&a?(a.shorthandAssign<0&&(a.shorthandAssign=this.start),t.value=this.parseMaybeDefault(i,s,t.key)):t.value=t.key,t.shorthand=!0):this.unexpected();else{(r||n)&&this.unexpected(),t.kind=t.key.name,this.parsePropertyName(t),t.value=this.parseMethod(!1);var u="get"===t.kind?0:1;if(t.value.params.length!==u){var h=t.value.start;"get"===t.kind?this.raiseRecoverable(h,"getter should have no params"):this.raiseRecoverable(h,"setter should have exactly one param")}else"set"===t.kind&&"RestElement"===t.value.params[0].type&&this.raiseRecoverable(t.value.params[0].start,"Setter cannot use rest params")}},Y.parsePropertyName=function(t){if(this.options.ecmaVersion>=6){if(this.eat(w.bracketL))return t.computed=!0,t.key=this.parseMaybeAssign(),this.expect(w.bracketR),t.key;t.computed=!1}return t.key=this.type===w.num||this.type===w.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},Y.initFunction=function(t){t.id=null,this.options.ecmaVersion>=6&&(t.generator=t.expression=!1),this.options.ecmaVersion>=8&&(t.async=!1)},Y.parseMethod=function(t,e,r){var n=this.startNode(),i=this.yieldPos,s=this.awaitPos,a=this.awaitIdentPos;return this.initFunction(n),this.options.ecmaVersion>=6&&(n.generator=t),this.options.ecmaVersion>=8&&(n.async=!!e),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|M(e,n.generator)|(r?128:0)),this.expect(w.parenL),n.params=this.parseBindingList(w.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(n,!1,!0),this.yieldPos=i,this.awaitPos=s,this.awaitIdentPos=a,this.finishNode(n,"FunctionExpression")},Y.parseArrowExpression=function(t,e,r){var n=this.yieldPos,i=this.awaitPos,s=this.awaitIdentPos;return this.enterScope(16|M(r,!1)),this.initFunction(t),this.options.ecmaVersion>=8&&(t.async=!!r),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,t.params=this.toAssignableList(e,!0),this.parseFunctionBody(t,!0,!1),this.yieldPos=n,this.awaitPos=i,this.awaitIdentPos=s,this.finishNode(t,"ArrowFunctionExpression")},Y.parseFunctionBody=function(t,e,r){var n=e&&this.type!==w.braceL,i=this.strict,s=!1;if(n)t.body=this.parseMaybeAssign(),t.expression=!0,this.checkParams(t,!1);else{var a=this.options.ecmaVersion>=7&&!this.isSimpleParamList(t.params);i&&!a||(s=this.strictDirective(this.end))&&a&&this.raiseRecoverable(t.start,"Illegal 'use strict' directive in function with non-simple parameter list");var o=this.labels;this.labels=[],s&&(this.strict=!0),this.checkParams(t,!i&&!s&&!e&&!r&&this.isSimpleParamList(t.params)),t.body=this.parseBlock(!1),t.expression=!1,this.adaptDirectivePrologue(t.body.body),this.labels=o}this.exitScope(),this.strict&&t.id&&this.checkLVal(t.id,5),this.strict=i},Y.isSimpleParamList=function(t){for(var e=0,r=t;e<r.length;e+=1)if("Identifier"!==r[e].type)return!1;return!0},Y.checkParams=function(t,e){for(var r={},n=0,i=t.params;n<i.length;n+=1){var s=i[n];this.checkLVal(s,1,e?null:r)}},Y.parseExprList=function(t,e,r,n){for(var i=[],s=!0;!this.eat(t);){if(s)s=!1;else if(this.expect(w.comma),e&&this.afterTrailingComma(t))break;var a=void 0;r&&this.type===w.comma?a=null:this.type===w.ellipsis?(a=this.parseSpread(n),n&&this.type===w.comma&&n.trailingComma<0&&(n.trailingComma=this.start)):a=this.parseMaybeAssign(!1,n),i.push(a)}return i},Y.checkUnreserved=function(t){var e=t.start,r=t.end,n=t.name;this.inGenerator&&"yield"===n&&this.raiseRecoverable(e,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===n&&this.raiseRecoverable(e,"Cannot use 'await' as identifier inside an async function"),this.keywords.test(n)&&this.raise(e,"Unexpected keyword '"+n+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(e,r).indexOf("\\")||(this.strict?this.reservedWordsStrict:this.reservedWords).test(n)&&(this.inAsync||"await"!==n||this.raiseRecoverable(e,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(e,"The keyword '"+n+"' is reserved"))},Y.parseIdent=function(t,e){var r=this.startNode();return this.type===w.name?r.name=this.value:this.type.keyword?(r.name=this.type.keyword,"class"!==r.name&&"function"!==r.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(!!t),this.finishNode(r,"Identifier"),t||(this.checkUnreserved(r),"await"!==r.name||this.awaitIdentPos||(this.awaitIdentPos=r.start)),r},Y.parseYield=function(t){this.yieldPos||(this.yieldPos=this.start);var e=this.startNode();return this.next(),this.type===w.semi||this.canInsertSemicolon()||this.type!==w.star&&!this.type.startsExpr?(e.delegate=!1,e.argument=null):(e.delegate=this.eat(w.star),e.argument=this.parseMaybeAssign(t)),this.finishNode(e,"YieldExpression")},Y.parseAwait=function(){this.awaitPos||(this.awaitPos=this.start);var t=this.startNode();return this.next(),t.argument=this.parseMaybeUnary(null,!1),this.finishNode(t,"AwaitExpression")};var Z=N.prototype;Z.raise=function(t,e){var r=F(this.input,t);e+=" ("+r.line+":"+r.column+")";var n=new SyntaxError(e);throw n.pos=t,n.loc=r,n.raisedAt=this.pos,n},Z.raiseRecoverable=Z.raise,Z.curPosition=function(){if(this.options.locations)return new O(this.curLine,this.pos-this.lineStart)};var Q=N.prototype,tt=function(t){this.flags=t,this.var=[],this.lexical=[],this.functions=[]};Q.enterScope=function(t){this.scopeStack.push(new tt(t))},Q.exitScope=function(){this.scopeStack.pop()},Q.treatFunctionsAsVarInScope=function(t){return 2&t.flags||!this.inModule&&1&t.flags},Q.declareName=function(t,e,r){var n=!1;if(2===e){var i=this.currentScope();n=i.lexical.indexOf(t)>-1||i.functions.indexOf(t)>-1||i.var.indexOf(t)>-1,i.lexical.push(t),this.inModule&&1&i.flags&&delete this.undefinedExports[t]}else if(4===e)this.currentScope().lexical.push(t);else if(3===e){var s=this.currentScope();n=this.treatFunctionsAsVar?s.lexical.indexOf(t)>-1:s.lexical.indexOf(t)>-1||s.var.indexOf(t)>-1,s.functions.push(t)}else for(var a=this.scopeStack.length-1;a>=0;--a){var o=this.scopeStack[a];if(o.lexical.indexOf(t)>-1&&!(32&o.flags&&o.lexical[0]===t)||!this.treatFunctionsAsVarInScope(o)&&o.functions.indexOf(t)>-1){n=!0;break}if(o.var.push(t),this.inModule&&1&o.flags&&delete this.undefinedExports[t],3&o.flags)break}n&&this.raiseRecoverable(r,"Identifier '"+t+"' has already been declared")},Q.checkLocalExport=function(t){-1===this.scopeStack[0].lexical.indexOf(t.name)&&-1===this.scopeStack[0].var.indexOf(t.name)&&(this.undefinedExports[t.name]=t)},Q.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},Q.currentVarScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(3&e.flags)return e}},Q.currentThisScope=function(){for(var t=this.scopeStack.length-1;;t--){var e=this.scopeStack[t];if(3&e.flags&&!(16&e.flags))return e}};var et=function(t,e,r){this.type="",this.start=e,this.end=0,t.options.locations&&(this.loc=new C(t,r)),t.options.directSourceFile&&(this.sourceFile=t.options.directSourceFile),t.options.ranges&&(this.range=[e,0])},rt=N.prototype;function nt(t,e,r,n){return t.type=e,t.end=r,this.options.locations&&(t.loc.end=n),this.options.ranges&&(t.range[1]=r),t}rt.startNode=function(){return new et(this,this.start,this.startLoc)},rt.startNodeAt=function(t,e){return new et(this,t,e)},rt.finishNode=function(t,e){return nt.call(this,t,e,this.lastTokEnd,this.lastTokEndLoc)},rt.finishNodeAt=function(t,e,r,n){return nt.call(this,t,e,r,n)};var it=function(t,e,r,n,i){this.token=t,this.isExpr=!!e,this.preserveSpace=!!r,this.override=n,this.generator=!!i},st={b_stat:new it("{",!1),b_expr:new it("{",!0),b_tmpl:new it("${",!1),p_stat:new it("(",!1),p_expr:new it("(",!0),q_tmpl:new it("`",!0,!0,(function(t){return t.tryReadTemplateToken()})),f_stat:new it("function",!1),f_expr:new it("function",!0),f_expr_gen:new it("function",!0,!1,null,!0),f_gen:new it("function",!1,!1,null,!0)},at=N.prototype;at.initialContext=function(){return[st.b_stat]},at.braceIsBlock=function(t){var e=this.curContext();return e===st.f_expr||e===st.f_stat||(t!==w.colon||e!==st.b_stat&&e!==st.b_expr?t===w._return||t===w.name&&this.exprAllowed?T.test(this.input.slice(this.lastTokEnd,this.start)):t===w._else||t===w.semi||t===w.eof||t===w.parenR||t===w.arrow||(t===w.braceL?e===st.b_stat:t!==w._var&&t!==w._const&&t!==w.name&&!this.exprAllowed):!e.isExpr)},at.inGeneratorContext=function(){for(var t=this.context.length-1;t>=1;t--){var e=this.context[t];if("function"===e.token)return e.generator}return!1},at.updateContext=function(t){var e,r=this.type;r.keyword&&t===w.dot?this.exprAllowed=!1:(e=r.updateContext)?e.call(this,t):this.exprAllowed=r.beforeExpr},w.parenR.updateContext=w.braceR.updateContext=function(){if(1!==this.context.length){var t=this.context.pop();t===st.b_stat&&"function"===this.curContext().token&&(t=this.context.pop()),this.exprAllowed=!t.isExpr}else this.exprAllowed=!0},w.braceL.updateContext=function(t){this.context.push(this.braceIsBlock(t)?st.b_stat:st.b_expr),this.exprAllowed=!0},w.dollarBraceL.updateContext=function(){this.context.push(st.b_tmpl),this.exprAllowed=!0},w.parenL.updateContext=function(t){var e=t===w._if||t===w._for||t===w._with||t===w._while;this.context.push(e?st.p_stat:st.p_expr),this.exprAllowed=!0},w.incDec.updateContext=function(){},w._function.updateContext=w._class.updateContext=function(t){!t.beforeExpr||t===w.semi||t===w._else||t===w._return&&T.test(this.input.slice(this.lastTokEnd,this.start))||(t===w.colon||t===w.braceL)&&this.curContext()===st.b_stat?this.context.push(st.f_stat):this.context.push(st.f_expr),this.exprAllowed=!1},w.backQuote.updateContext=function(){this.curContext()===st.q_tmpl?this.context.pop():this.context.push(st.q_tmpl),this.exprAllowed=!1},w.star.updateContext=function(t){if(t===w._function){var e=this.context.length-1;this.context[e]===st.f_expr?this.context[e]=st.f_expr_gen:this.context[e]=st.f_gen}this.exprAllowed=!0},w.name.updateContext=function(t){var e=!1;this.options.ecmaVersion>=6&&t!==w.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(e=!0),this.exprAllowed=e};var ot="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",ut=ot+" Extended_Pictographic",ht={9:ot,10:ut,11:ut},lt="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",ct="Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",pt=ct+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",dt={9:ct,10:pt,11:pt+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho"},gt={};function ft(t){var e=gt[t]={binary:$(ht[t]+" "+lt),nonBinary:{General_Category:$(lt),Script:$(dt[t])}};e.nonBinary.Script_Extensions=e.nonBinary.Script,e.nonBinary.gc=e.nonBinary.General_Category,e.nonBinary.sc=e.nonBinary.Script,e.nonBinary.scx=e.nonBinary.Script_Extensions}ft(9),ft(10),ft(11);var mt=N.prototype,yt=function(t){this.parser=t,this.validFlags="gim"+(t.options.ecmaVersion>=6?"uy":"")+(t.options.ecmaVersion>=9?"s":""),this.unicodeProperties=gt[t.options.ecmaVersion>=11?11:t.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[]};function xt(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}function bt(t){return 36===t||t>=40&&t<=43||46===t||63===t||t>=91&&t<=94||t>=123&&t<=125}function wt(t){return t>=65&&t<=90||t>=97&&t<=122}function Tt(t){return wt(t)||95===t}function vt(t){return Tt(t)||St(t)}function St(t){return t>=48&&t<=57}function At(t){return t>=48&&t<=57||t>=65&&t<=70||t>=97&&t<=102}function _t(t){return t>=65&&t<=70?t-65+10:t>=97&&t<=102?t-97+10:t-48}function kt(t){return t>=48&&t<=55}yt.prototype.reset=function(t,e,r){var n=-1!==r.indexOf("u");this.start=0|t,this.source=e+"",this.flags=r,this.switchU=n&&this.parser.options.ecmaVersion>=6,this.switchN=n&&this.parser.options.ecmaVersion>=9},yt.prototype.raise=function(t){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+t)},yt.prototype.at=function(t){var e=this.source,r=e.length;if(t>=r)return-1;var n=e.charCodeAt(t);if(!this.switchU||n<=55295||n>=57344||t+1>=r)return n;var i=e.charCodeAt(t+1);return i>=56320&&i<=57343?(n<<10)+i-56613888:n},yt.prototype.nextIndex=function(t){var e=this.source,r=e.length;if(t>=r)return r;var n,i=e.charCodeAt(t);return!this.switchU||i<=55295||i>=57344||t+1>=r||(n=e.charCodeAt(t+1))<56320||n>57343?t+1:t+2},yt.prototype.current=function(){return this.at(this.pos)},yt.prototype.lookahead=function(){return this.at(this.nextIndex(this.pos))},yt.prototype.advance=function(){this.pos=this.nextIndex(this.pos)},yt.prototype.eat=function(t){return this.current()===t&&(this.advance(),!0)},mt.validateRegExpFlags=function(t){for(var e=t.validFlags,r=t.flags,n=0;n<r.length;n++){var i=r.charAt(n);-1===e.indexOf(i)&&this.raise(t.start,"Invalid regular expression flag"),r.indexOf(i,n+1)>-1&&this.raise(t.start,"Duplicate regular expression flag")}},mt.validateRegExpPattern=function(t){this.regexp_pattern(t),!t.switchN&&this.options.ecmaVersion>=9&&t.groupNames.length>0&&(t.switchN=!0,this.regexp_pattern(t))},mt.regexp_pattern=function(t){t.pos=0,t.lastIntValue=0,t.lastStringValue="",t.lastAssertionIsQuantifiable=!1,t.numCapturingParens=0,t.maxBackReference=0,t.groupNames.length=0,t.backReferenceNames.length=0,this.regexp_disjunction(t),t.pos!==t.source.length&&(t.eat(41)&&t.raise("Unmatched ')'"),(t.eat(93)||t.eat(125))&&t.raise("Lone quantifier brackets")),t.maxBackReference>t.numCapturingParens&&t.raise("Invalid escape");for(var e=0,r=t.backReferenceNames;e<r.length;e+=1){var n=r[e];-1===t.groupNames.indexOf(n)&&t.raise("Invalid named capture referenced")}},mt.regexp_disjunction=function(t){for(this.regexp_alternative(t);t.eat(124);)this.regexp_alternative(t);this.regexp_eatQuantifier(t,!0)&&t.raise("Nothing to repeat"),t.eat(123)&&t.raise("Lone quantifier brackets")},mt.regexp_alternative=function(t){for(;t.pos<t.source.length&&this.regexp_eatTerm(t););},mt.regexp_eatTerm=function(t){return this.regexp_eatAssertion(t)?(t.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(t)&&t.switchU&&t.raise("Invalid quantifier"),!0):!!(t.switchU?this.regexp_eatAtom(t):this.regexp_eatExtendedAtom(t))&&(this.regexp_eatQuantifier(t),!0)},mt.regexp_eatAssertion=function(t){var e=t.pos;if(t.lastAssertionIsQuantifiable=!1,t.eat(94)||t.eat(36))return!0;if(t.eat(92)){if(t.eat(66)||t.eat(98))return!0;t.pos=e}if(t.eat(40)&&t.eat(63)){var r=!1;if(this.options.ecmaVersion>=9&&(r=t.eat(60)),t.eat(61)||t.eat(33))return this.regexp_disjunction(t),t.eat(41)||t.raise("Unterminated group"),t.lastAssertionIsQuantifiable=!r,!0}return t.pos=e,!1},mt.regexp_eatQuantifier=function(t,e){return void 0===e&&(e=!1),!!this.regexp_eatQuantifierPrefix(t,e)&&(t.eat(63),!0)},mt.regexp_eatQuantifierPrefix=function(t,e){return t.eat(42)||t.eat(43)||t.eat(63)||this.regexp_eatBracedQuantifier(t,e)},mt.regexp_eatBracedQuantifier=function(t,e){var r=t.pos;if(t.eat(123)){var n=0,i=-1;if(this.regexp_eatDecimalDigits(t)&&(n=t.lastIntValue,t.eat(44)&&this.regexp_eatDecimalDigits(t)&&(i=t.lastIntValue),t.eat(125)))return-1!==i&&i<n&&!e&&t.raise("numbers out of order in {} quantifier"),!0;t.switchU&&!e&&t.raise("Incomplete quantifier"),t.pos=r}return!1},mt.regexp_eatAtom=function(t){return this.regexp_eatPatternCharacters(t)||t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)},mt.regexp_eatReverseSolidusAtomEscape=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatAtomEscape(t))return!0;t.pos=e}return!1},mt.regexp_eatUncapturingGroup=function(t){var e=t.pos;if(t.eat(40)){if(t.eat(63)&&t.eat(58)){if(this.regexp_disjunction(t),t.eat(41))return!0;t.raise("Unterminated group")}t.pos=e}return!1},mt.regexp_eatCapturingGroup=function(t){if(t.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(t):63===t.current()&&t.raise("Invalid group"),this.regexp_disjunction(t),t.eat(41))return t.numCapturingParens+=1,!0;t.raise("Unterminated group")}return!1},mt.regexp_eatExtendedAtom=function(t){return t.eat(46)||this.regexp_eatReverseSolidusAtomEscape(t)||this.regexp_eatCharacterClass(t)||this.regexp_eatUncapturingGroup(t)||this.regexp_eatCapturingGroup(t)||this.regexp_eatInvalidBracedQuantifier(t)||this.regexp_eatExtendedPatternCharacter(t)},mt.regexp_eatInvalidBracedQuantifier=function(t){return this.regexp_eatBracedQuantifier(t,!0)&&t.raise("Nothing to repeat"),!1},mt.regexp_eatSyntaxCharacter=function(t){var e=t.current();return!!bt(e)&&(t.lastIntValue=e,t.advance(),!0)},mt.regexp_eatPatternCharacters=function(t){for(var e=t.pos,r=0;-1!==(r=t.current())&&!bt(r);)t.advance();return t.pos!==e},mt.regexp_eatExtendedPatternCharacter=function(t){var e=t.current();return!(-1===e||36===e||e>=40&&e<=43||46===e||63===e||91===e||94===e||124===e||(t.advance(),0))},mt.regexp_groupSpecifier=function(t){if(t.eat(63)){if(this.regexp_eatGroupName(t))return-1!==t.groupNames.indexOf(t.lastStringValue)&&t.raise("Duplicate capture group name"),void t.groupNames.push(t.lastStringValue);t.raise("Invalid group")}},mt.regexp_eatGroupName=function(t){if(t.lastStringValue="",t.eat(60)){if(this.regexp_eatRegExpIdentifierName(t)&&t.eat(62))return!0;t.raise("Invalid capture group name")}return!1},mt.regexp_eatRegExpIdentifierName=function(t){if(t.lastStringValue="",this.regexp_eatRegExpIdentifierStart(t)){for(t.lastStringValue+=xt(t.lastIntValue);this.regexp_eatRegExpIdentifierPart(t);)t.lastStringValue+=xt(t.lastIntValue);return!0}return!1},mt.regexp_eatRegExpIdentifierStart=function(t){var e=t.pos,r=t.current();return t.advance(),92===r&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(r=t.lastIntValue),function(t){return p(t,!0)||36===t||95===t}(r)?(t.lastIntValue=r,!0):(t.pos=e,!1)},mt.regexp_eatRegExpIdentifierPart=function(t){var e=t.pos,r=t.current();return t.advance(),92===r&&this.regexp_eatRegExpUnicodeEscapeSequence(t)&&(r=t.lastIntValue),function(t){return d(t,!0)||36===t||95===t||8204===t||8205===t}(r)?(t.lastIntValue=r,!0):(t.pos=e,!1)},mt.regexp_eatAtomEscape=function(t){return!!(this.regexp_eatBackReference(t)||this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)||t.switchN&&this.regexp_eatKGroupName(t))||(t.switchU&&(99===t.current()&&t.raise("Invalid unicode escape"),t.raise("Invalid escape")),!1)},mt.regexp_eatBackReference=function(t){var e=t.pos;if(this.regexp_eatDecimalEscape(t)){var r=t.lastIntValue;if(t.switchU)return r>t.maxBackReference&&(t.maxBackReference=r),!0;if(r<=t.numCapturingParens)return!0;t.pos=e}return!1},mt.regexp_eatKGroupName=function(t){if(t.eat(107)){if(this.regexp_eatGroupName(t))return t.backReferenceNames.push(t.lastStringValue),!0;t.raise("Invalid named reference")}return!1},mt.regexp_eatCharacterEscape=function(t){return this.regexp_eatControlEscape(t)||this.regexp_eatCControlLetter(t)||this.regexp_eatZero(t)||this.regexp_eatHexEscapeSequence(t)||this.regexp_eatRegExpUnicodeEscapeSequence(t)||!t.switchU&&this.regexp_eatLegacyOctalEscapeSequence(t)||this.regexp_eatIdentityEscape(t)},mt.regexp_eatCControlLetter=function(t){var e=t.pos;if(t.eat(99)){if(this.regexp_eatControlLetter(t))return!0;t.pos=e}return!1},mt.regexp_eatZero=function(t){return 48===t.current()&&!St(t.lookahead())&&(t.lastIntValue=0,t.advance(),!0)},mt.regexp_eatControlEscape=function(t){var e=t.current();return 116===e?(t.lastIntValue=9,t.advance(),!0):110===e?(t.lastIntValue=10,t.advance(),!0):118===e?(t.lastIntValue=11,t.advance(),!0):102===e?(t.lastIntValue=12,t.advance(),!0):114===e&&(t.lastIntValue=13,t.advance(),!0)},mt.regexp_eatControlLetter=function(t){var e=t.current();return!!wt(e)&&(t.lastIntValue=e%32,t.advance(),!0)},mt.regexp_eatRegExpUnicodeEscapeSequence=function(t){var e,r=t.pos;if(t.eat(117)){if(this.regexp_eatFixedHexDigits(t,4)){var n=t.lastIntValue;if(t.switchU&&n>=55296&&n<=56319){var i=t.pos;if(t.eat(92)&&t.eat(117)&&this.regexp_eatFixedHexDigits(t,4)){var s=t.lastIntValue;if(s>=56320&&s<=57343)return t.lastIntValue=1024*(n-55296)+(s-56320)+65536,!0}t.pos=i,t.lastIntValue=n}return!0}if(t.switchU&&t.eat(123)&&this.regexp_eatHexDigits(t)&&t.eat(125)&&(e=t.lastIntValue)>=0&&e<=1114111)return!0;t.switchU&&t.raise("Invalid unicode escape"),t.pos=r}return!1},mt.regexp_eatIdentityEscape=function(t){if(t.switchU)return!!this.regexp_eatSyntaxCharacter(t)||!!t.eat(47)&&(t.lastIntValue=47,!0);var e=t.current();return!(99===e||t.switchN&&107===e||(t.lastIntValue=e,t.advance(),0))},mt.regexp_eatDecimalEscape=function(t){t.lastIntValue=0;var e=t.current();if(e>=49&&e<=57){do{t.lastIntValue=10*t.lastIntValue+(e-48),t.advance()}while((e=t.current())>=48&&e<=57);return!0}return!1},mt.regexp_eatCharacterClassEscape=function(t){var e=t.current();if(function(t){return 100===t||68===t||115===t||83===t||119===t||87===t}(e))return t.lastIntValue=-1,t.advance(),!0;if(t.switchU&&this.options.ecmaVersion>=9&&(80===e||112===e)){if(t.lastIntValue=-1,t.advance(),t.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(t)&&t.eat(125))return!0;t.raise("Invalid property name")}return!1},mt.regexp_eatUnicodePropertyValueExpression=function(t){var e=t.pos;if(this.regexp_eatUnicodePropertyName(t)&&t.eat(61)){var r=t.lastStringValue;if(this.regexp_eatUnicodePropertyValue(t)){var n=t.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(t,r,n),!0}}if(t.pos=e,this.regexp_eatLoneUnicodePropertyNameOrValue(t)){var i=t.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(t,i),!0}return!1},mt.regexp_validateUnicodePropertyNameAndValue=function(t,e,r){I(t.unicodeProperties.nonBinary,e)||t.raise("Invalid property name"),t.unicodeProperties.nonBinary[e].test(r)||t.raise("Invalid property value")},mt.regexp_validateUnicodePropertyNameOrValue=function(t,e){t.unicodeProperties.binary.test(e)||t.raise("Invalid property name")},mt.regexp_eatUnicodePropertyName=function(t){var e=0;for(t.lastStringValue="";Tt(e=t.current());)t.lastStringValue+=xt(e),t.advance();return""!==t.lastStringValue},mt.regexp_eatUnicodePropertyValue=function(t){var e=0;for(t.lastStringValue="";vt(e=t.current());)t.lastStringValue+=xt(e),t.advance();return""!==t.lastStringValue},mt.regexp_eatLoneUnicodePropertyNameOrValue=function(t){return this.regexp_eatUnicodePropertyValue(t)},mt.regexp_eatCharacterClass=function(t){if(t.eat(91)){if(t.eat(94),this.regexp_classRanges(t),t.eat(93))return!0;t.raise("Unterminated character class")}return!1},mt.regexp_classRanges=function(t){for(;this.regexp_eatClassAtom(t);){var e=t.lastIntValue;if(t.eat(45)&&this.regexp_eatClassAtom(t)){var r=t.lastIntValue;!t.switchU||-1!==e&&-1!==r||t.raise("Invalid character class"),-1!==e&&-1!==r&&e>r&&t.raise("Range out of order in character class")}}},mt.regexp_eatClassAtom=function(t){var e=t.pos;if(t.eat(92)){if(this.regexp_eatClassEscape(t))return!0;if(t.switchU){var r=t.current();(99===r||kt(r))&&t.raise("Invalid class escape"),t.raise("Invalid escape")}t.pos=e}var n=t.current();return 93!==n&&(t.lastIntValue=n,t.advance(),!0)},mt.regexp_eatClassEscape=function(t){var e=t.pos;if(t.eat(98))return t.lastIntValue=8,!0;if(t.switchU&&t.eat(45))return t.lastIntValue=45,!0;if(!t.switchU&&t.eat(99)){if(this.regexp_eatClassControlLetter(t))return!0;t.pos=e}return this.regexp_eatCharacterClassEscape(t)||this.regexp_eatCharacterEscape(t)},mt.regexp_eatClassControlLetter=function(t){var e=t.current();return!(!St(e)&&95!==e||(t.lastIntValue=e%32,t.advance(),0))},mt.regexp_eatHexEscapeSequence=function(t){var e=t.pos;if(t.eat(120)){if(this.regexp_eatFixedHexDigits(t,2))return!0;t.switchU&&t.raise("Invalid escape"),t.pos=e}return!1},mt.regexp_eatDecimalDigits=function(t){var e=t.pos,r=0;for(t.lastIntValue=0;St(r=t.current());)t.lastIntValue=10*t.lastIntValue+(r-48),t.advance();return t.pos!==e},mt.regexp_eatHexDigits=function(t){var e=t.pos,r=0;for(t.lastIntValue=0;At(r=t.current());)t.lastIntValue=16*t.lastIntValue+_t(r),t.advance();return t.pos!==e},mt.regexp_eatLegacyOctalEscapeSequence=function(t){if(this.regexp_eatOctalDigit(t)){var e=t.lastIntValue;if(this.regexp_eatOctalDigit(t)){var r=t.lastIntValue;e<=3&&this.regexp_eatOctalDigit(t)?t.lastIntValue=64*e+8*r+t.lastIntValue:t.lastIntValue=8*e+r}else t.lastIntValue=e;return!0}return!1},mt.regexp_eatOctalDigit=function(t){var e=t.current();return kt(e)?(t.lastIntValue=e-48,t.advance(),!0):(t.lastIntValue=0,!1)},mt.regexp_eatFixedHexDigits=function(t,e){var r=t.pos;t.lastIntValue=0;for(var n=0;n<e;++n){var i=t.current();if(!At(i))return t.pos=r,!1;t.lastIntValue=16*t.lastIntValue+_t(i),t.advance()}return!0};var Et=function(t){this.type=t.type,this.value=t.value,this.start=t.start,this.end=t.end,t.options.locations&&(this.loc=new C(t,t.startLoc,t.endLoc)),t.options.ranges&&(this.range=[t.start,t.end])},Lt=N.prototype;function It(t){return t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10),56320+(1023&t)))}Lt.next=function(t){!t&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new Et(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken()},Lt.getToken=function(){return this.next(),new Et(this)},"undefined"!=typeof Symbol&&(Lt[Symbol.iterator]=function(){var t=this;return{next:function(){var e=t.getToken();return{done:e.type===w.eof,value:e}}}}),Lt.curContext=function(){return this.context[this.context.length-1]},Lt.nextToken=function(){var t=this.curContext();return t&&t.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(w.eof):t.override?t.override(this):void this.readToken(this.fullCharCodeAtPos())},Lt.readToken=function(t){return p(t,this.options.ecmaVersion>=6)||92===t?this.readWord():this.getTokenFromCode(t)},Lt.fullCharCodeAtPos=function(){var t=this.input.charCodeAt(this.pos);return t<=55295||t>=57344?t:(t<<10)+this.input.charCodeAt(this.pos+1)-56613888},Lt.skipBlockComment=function(){var t,e=this.options.onComment&&this.curPosition(),r=this.pos,n=this.input.indexOf("*/",this.pos+=2);if(-1===n&&this.raise(this.pos-2,"Unterminated comment"),this.pos=n+2,this.options.locations)for(v.lastIndex=r;(t=v.exec(this.input))&&t.index<this.pos;)++this.curLine,this.lineStart=t.index+t[0].length;this.options.onComment&&this.options.onComment(!0,this.input.slice(r+2,n),r,this.pos,e,this.curPosition())},Lt.skipLineComment=function(t){for(var e=this.pos,r=this.options.onComment&&this.curPosition(),n=this.input.charCodeAt(this.pos+=t);this.pos<this.input.length&&!S(n);)n=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(e+t,this.pos),e,this.pos,r,this.curPosition())},Lt.skipSpace=function(){t:for(;this.pos<this.input.length;){var t=this.input.charCodeAt(this.pos);switch(t){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break t}break;default:if(!(t>8&&t<14||t>=5760&&A.test(String.fromCharCode(t))))break t;++this.pos}}},Lt.finishToken=function(t,e){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var r=this.type;this.type=t,this.value=e,this.updateContext(r)},Lt.readToken_dot=function(){var t=this.input.charCodeAt(this.pos+1);if(t>=48&&t<=57)return this.readNumber(!0);var e=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===t&&46===e?(this.pos+=3,this.finishToken(w.ellipsis)):(++this.pos,this.finishToken(w.dot))},Lt.readToken_slash=function(){var t=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===t?this.finishOp(w.assign,2):this.finishOp(w.slash,1)},Lt.readToken_mult_modulo_exp=function(t){var e=this.input.charCodeAt(this.pos+1),r=1,n=42===t?w.star:w.modulo;return this.options.ecmaVersion>=7&&42===t&&42===e&&(++r,n=w.starstar,e=this.input.charCodeAt(this.pos+2)),61===e?this.finishOp(w.assign,r+1):this.finishOp(n,r)},Lt.readToken_pipe_amp=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?this.finishOp(124===t?w.logicalOR:w.logicalAND,2):61===e?this.finishOp(w.assign,2):this.finishOp(124===t?w.bitwiseOR:w.bitwiseAND,1)},Lt.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(w.assign,2):this.finishOp(w.bitwiseXOR,1)},Lt.readToken_plus_min=function(t){var e=this.input.charCodeAt(this.pos+1);return e===t?45!==e||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!T.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(w.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===e?this.finishOp(w.assign,2):this.finishOp(w.plusMin,1)},Lt.readToken_lt_gt=function(t){var e=this.input.charCodeAt(this.pos+1),r=1;return e===t?(r=62===t&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+r)?this.finishOp(w.assign,r+1):this.finishOp(w.bitShift,r)):33!==e||60!==t||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===e&&(r=2),this.finishOp(w.relational,r)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},Lt.readToken_eq_excl=function(t){var e=this.input.charCodeAt(this.pos+1);return 61===e?this.finishOp(w.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===t&&62===e&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(w.arrow)):this.finishOp(61===t?w.eq:w.prefix,1)},Lt.getTokenFromCode=function(t){switch(t){case 46:return this.readToken_dot();case 40:return++this.pos,this.finishToken(w.parenL);case 41:return++this.pos,this.finishToken(w.parenR);case 59:return++this.pos,this.finishToken(w.semi);case 44:return++this.pos,this.finishToken(w.comma);case 91:return++this.pos,this.finishToken(w.bracketL);case 93:return++this.pos,this.finishToken(w.bracketR);case 123:return++this.pos,this.finishToken(w.braceL);case 125:return++this.pos,this.finishToken(w.braceR);case 58:return++this.pos,this.finishToken(w.colon);case 63:return++this.pos,this.finishToken(w.question);case 96:if(this.options.ecmaVersion<6)break;return++this.pos,this.finishToken(w.backQuote);case 48:var e=this.input.charCodeAt(this.pos+1);if(120===e||88===e)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===e||79===e)return this.readRadixNumber(8);if(98===e||66===e)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(t);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(t);case 124:case 38:return this.readToken_pipe_amp(t);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(t);case 60:case 62:return this.readToken_lt_gt(t);case 61:case 33:return this.readToken_eq_excl(t);case 126:return this.finishOp(w.prefix,1)}this.raise(this.pos,"Unexpected character '"+It(t)+"'")},Lt.finishOp=function(t,e){var r=this.input.slice(this.pos,this.pos+e);return this.pos+=e,this.finishToken(t,r)},Lt.readRegexp=function(){for(var t,e,r=this.pos;;){this.pos>=this.input.length&&this.raise(r,"Unterminated regular expression");var n=this.input.charAt(this.pos);if(T.test(n)&&this.raise(r,"Unterminated regular expression"),t)t=!1;else{if("["===n)e=!0;else if("]"===n&&e)e=!1;else if("/"===n&&!e)break;t="\\"===n}++this.pos}var i=this.input.slice(r,this.pos);++this.pos;var s=this.pos,a=this.readWord1();this.containsEsc&&this.unexpected(s);var o=this.regexpState||(this.regexpState=new yt(this));o.reset(r,i,a),this.validateRegExpFlags(o),this.validateRegExpPattern(o);var u=null;try{u=new RegExp(i,a)}catch(t){}return this.finishToken(w.regexp,{pattern:i,flags:a,value:u})},Lt.readInt=function(t,e){for(var r=this.pos,n=0,i=0,s=null==e?1/0:e;i<s;++i){var a,o=this.input.charCodeAt(this.pos);if((a=o>=97?o-97+10:o>=65?o-65+10:o>=48&&o<=57?o-48:1/0)>=t)break;++this.pos,n=n*t+a}return this.pos===r||null!=e&&this.pos-r!==e?null:n},Lt.readRadixNumber=function(t){var e=this.pos;this.pos+=2;var r=this.readInt(t);return null==r&&this.raise(this.start+2,"Expected number in radix "+t),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(r="undefined"!=typeof BigInt?BigInt(this.input.slice(e,this.pos)):null,++this.pos):p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,r)},Lt.readNumber=function(t){var e=this.pos;t||null!==this.readInt(10)||this.raise(e,"Invalid number");var r=this.pos-e>=2&&48===this.input.charCodeAt(e);r&&this.strict&&this.raise(e,"Invalid number");var n=this.input.charCodeAt(this.pos);if(!r&&!t&&this.options.ecmaVersion>=11&&110===n){var i=this.input.slice(e,this.pos),s="undefined"!=typeof BigInt?BigInt(i):null;return++this.pos,p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(w.num,s)}r&&/[89]/.test(this.input.slice(e,this.pos))&&(r=!1),46!==n||r||(++this.pos,this.readInt(10),n=this.input.charCodeAt(this.pos)),69!==n&&101!==n||r||(43!==(n=this.input.charCodeAt(++this.pos))&&45!==n||++this.pos,null===this.readInt(10)&&this.raise(e,"Invalid number")),p(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var a=this.input.slice(e,this.pos),o=r?parseInt(a,8):parseFloat(a);return this.finishToken(w.num,o)},Lt.readCodePoint=function(){var t;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var e=++this.pos;t=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,t>1114111&&this.invalidStringToken(e,"Code point out of bounds")}else t=this.readHexChar(4);return t},Lt.readString=function(t){for(var e="",r=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var n=this.input.charCodeAt(this.pos);if(n===t)break;92===n?(e+=this.input.slice(r,this.pos),e+=this.readEscapedChar(!1),r=this.pos):(S(n,this.options.ecmaVersion>=10)&&this.raise(this.start,"Unterminated string constant"),++this.pos)}return e+=this.input.slice(r,this.pos++),this.finishToken(w.string,e)};var Dt={};Lt.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken()}catch(t){if(t!==Dt)throw t;this.readInvalidTemplateToken()}this.inTemplateElement=!1},Lt.invalidStringToken=function(t,e){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw Dt;this.raise(t,e)},Lt.readTmplToken=function(){for(var t="",e=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var r=this.input.charCodeAt(this.pos);if(96===r||36===r&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==w.template&&this.type!==w.invalidTemplate?(t+=this.input.slice(e,this.pos),this.finishToken(w.template,t)):36===r?(this.pos+=2,this.finishToken(w.dollarBraceL)):(++this.pos,this.finishToken(w.backQuote));if(92===r)t+=this.input.slice(e,this.pos),t+=this.readEscapedChar(!0),e=this.pos;else if(S(r)){switch(t+=this.input.slice(e,this.pos),++this.pos,r){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:t+="\n";break;default:t+=String.fromCharCode(r)}this.options.locations&&(++this.curLine,this.lineStart=this.pos),e=this.pos}else++this.pos}},Lt.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(w.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template")},Lt.readEscapedChar=function(t){var e=this.input.charCodeAt(++this.pos);switch(++this.pos,e){case 110:return"\n";case 114:return"\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return It(this.readCodePoint());case 116:return"\t";case 98:return"\b";case 118:return"\v";case 102:return"\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(t){var r=this.pos-1;return this.invalidStringToken(r,"Invalid escape sequence in template string"),null}default:if(e>=48&&e<=55){var n=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],i=parseInt(n,8);return i>255&&(n=n.slice(0,-1),i=parseInt(n,8)),this.pos+=n.length-1,e=this.input.charCodeAt(this.pos),"0"===n&&56!==e&&57!==e||!this.strict&&!t||this.invalidStringToken(this.pos-1-n.length,t?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(i)}return S(e)?"":String.fromCharCode(e)}},Lt.readHexChar=function(t){var e=this.pos,r=this.readInt(16,t);return null===r&&this.invalidStringToken(e,"Bad character escape sequence"),r},Lt.readWord1=function(){this.containsEsc=!1;for(var t="",e=!0,r=this.pos,n=this.options.ecmaVersion>=6;this.pos<this.input.length;){var i=this.fullCharCodeAtPos();if(d(i,n))this.pos+=i<=65535?1:2;else{if(92!==i)break;this.containsEsc=!0,t+=this.input.slice(r,this.pos);var s=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var a=this.readCodePoint();(e?p:d)(a,n)||this.invalidStringToken(s,"Invalid Unicode escape"),t+=It(a),r=this.pos}e=!1}return t+this.input.slice(r,this.pos)},Lt.readWord=function(){var t=this.readWord1(),e=w.name;return this.keywords.test(t)&&(e=x[t]),this.finishToken(e,t)};var $t="7.1.0";N.acorn={Parser:N,version:$t,defaultOptions:R,Position:O,SourceLocation:C,getLineInfo:F,Node:et,TokenType:g,tokTypes:w,keywordTypes:x,TokContext:it,tokContexts:st,isIdentifierChar:d,isIdentifierStart:p,Token:Et,isNewLine:S,lineBreak:T,lineBreakG:v,nonASCIIwhitespace:A},t.Node=et,t.Parser=N,t.Position=O,t.SourceLocation=C,t.TokContext=it,t.Token=Et,t.TokenType=g,t.defaultOptions=R,t.getLineInfo=F,t.isIdentifierChar=d,t.isIdentifierStart=p,t.isNewLine=S,t.keywordTypes=x,t.lineBreak=T,t.lineBreakG=v,t.nonASCIIwhitespace=A,t.parse=function(t,e){return N.parse(t,e)},t.parseExpressionAt=function(t,e,r){return N.parseExpressionAt(t,e,r)},t.tokContexts=st,t.tokTypes=w,t.tokenizer=function(t,e){return N.tokenizer(t,e)},t.version=$t,Object.defineProperty(t,"__esModule",{value:!0})},i("object"==typeof r&&void 0!==e?r:(n=n||self).acorn={})},{}],2:[function(t,e,r){},{}],3:[function(t,e,r){function n(t,e={}){const{contextName:r="gl",throwGetError:n,useTrackablePrimitives:o,readPixelsFile:u,recording:h=[],variables:l={},onReadPixels:c,onUnrecognizedArgumentLookup:p}=e,d=new Proxy(t,{get:function(e,d){switch(d){case"addComment":return k;case"checkThrowError":return E;case"getReadPixelsVariableName":return m;case"insertVariable":return T;case"reset":return w;case"setIndent":return S;case"toString":return b;case"getContextVariableName":return D}return"function"==typeof t[d]?function(){switch(d){case"getError":return n?h.push(`${x}if (${r}.getError() !== ${r}.NONE) throw new Error('error');`):h.push(`${x}${r}.getError();`),t.getError();case"getExtension":{const e=`${r}Variables${g.length}`;h.push(`${x}const ${e} = ${r}.getExtension('${arguments[0]}');`);const n=t.getExtension(arguments[0]);if(n&&"object"==typeof n){const t=i(n,{getEntity:v,useTrackablePrimitives:o,recording:h,contextName:e,contextVariables:g,variables:l,indent:x,onUnrecognizedArgumentLookup:p});return g.push(t),t}return g.push(null),n}case"readPixels":const e=g.indexOf(arguments[6]);let a;if(-1===e){const t=I(arguments[6]);t?(a=t,h.push(`${x}${t}`)):(a=`${r}Variable${g.length}`,g.push(arguments[6]),h.push(`${x}const ${a} = new ${arguments[6].constructor.name}(${arguments[6].length});`))}else a=`${r}Variable${e}`;m=a;const d=[arguments[0],arguments[1],arguments[2],arguments[3],v(arguments[4]),v(arguments[5]),a];return h.push(`${x}${r}.readPixels(${d.join(", ")});`),u&&_(arguments[2],arguments[3]),c&&c(a,d),t.readPixels.apply(t,arguments);case"drawBuffers":return h.push(`${x}${r}.drawBuffers([${s(arguments[0],{contextName:r,contextVariables:g,getEntity:v,addVariable:A,variables:l,onUnrecognizedArgumentLookup:p})}]);`),t.drawBuffers(arguments[0])}let e=t[d].apply(t,arguments);switch(typeof e){case"undefined":return void h.push(`${x}${L(d,arguments)};`);case"number":case"boolean":if(o&&-1===g.indexOf(a(e))){h.push(`${x}const ${r}Variable${g.length} = ${L(d,arguments)};`),g.push(e=a(e));break}default:null===e?h.push(`${L(d,arguments)};`):h.push(`${x}const ${r}Variable${g.length} = ${L(d,arguments)};`),g.push(e)}return e}:(f[t[d]]=d,t[d])}}),g=[],f={};let m,y=0,x="";return d;function b(){return h.join("\n")}function w(){for(;h.length>0;)h.pop()}function T(t,e){l[t]=e}function v(t){const e=f[t];return e?r+"."+e:t}function S(t){x=" ".repeat(t)}function A(t,e){const n=`${r}Variable${g.length}`;return h.push(`${x}const ${n} = ${e};`),g.push(t),n}function _(t,e){const n=`${r}Variable${g.length}`,i=`imageDatum${y}`;h.push(`${x}let ${i} = ["P3\\n# ${u}.ppm\\n", ${t}, ' ', ${e}, "\\n255\\n"].join("");`),h.push(`${x}for (let i = 0; i < ${i}.length; i += 4) {`),h.push(`${x}  ${i} += ${n}[i] + ' ' + ${n}[i + 1] + ' ' + ${n}[i + 2] + ' ';`),h.push(`${x}}`),h.push(`${x}if (typeof require !== "undefined") {`),h.push(`${x}  require('fs').writeFileSync('./${u}.ppm', ${i});`),h.push(`${x}}`),y++}function k(t){h.push(`${x}// ${t}`)}function E(){h.push(`${x}(() => {\n${x}const error = ${r}.getError();\n${x}if (error !== ${r}.NONE) {\n${x}  const names = Object.getOwnPropertyNames(gl);\n${x}  for (let i = 0; i < names.length; i++) {\n${x}    const name = names[i];\n${x}    if (${r}[name] === error) {\n${x}      throw new Error('${r} threw ' + name);\n${x}    }\n${x}  }\n${x}}\n${x}})();`)}function L(t,e){return`${r}.${t}(${s(e,{contextName:r,contextVariables:g,getEntity:v,addVariable:A,variables:l,onUnrecognizedArgumentLookup:p})})`}function I(t){if(l)for(const e in l)if(l[e]===t)return e;return null}function D(t){const e=g.indexOf(t);return-1!==e?`${r}Variable${e}`:null}}function i(t,e){const r=new Proxy(t,{get:function(e,r){return"function"==typeof e[r]?function(){if("drawBuffersWEBGL"===r)return l.push(`${p}${i}.drawBuffersWEBGL([${s(arguments[0],{contextName:i,contextVariables:o,getEntity:g,addVariable:m,variables:c,onUnrecognizedArgumentLookup:d})}]);`),t.drawBuffersWEBGL(arguments[0]);let e=t[r].apply(t,arguments);switch(typeof e){case"undefined":return void l.push(`${p}${f(r,arguments)};`);case"number":case"boolean":h&&-1===o.indexOf(a(e))?(l.push(`${p}const ${i}Variable${o.length} = ${f(r,arguments)};`),o.push(e=a(e))):(l.push(`${p}const ${i}Variable${o.length} = ${f(r,arguments)};`),o.push(e));break;default:null===e?l.push(`${f(r,arguments)};`):l.push(`${p}const ${i}Variable${o.length} = ${f(r,arguments)};`),o.push(e)}return e}:(n[t[r]]=r,t[r])}}),n={},{contextName:i,contextVariables:o,getEntity:u,useTrackablePrimitives:h,recording:l,variables:c,indent:p,onUnrecognizedArgumentLookup:d}=e;return r;function g(t){return n.hasOwnProperty(t)?`${i}.${n[t]}`:u(t)}function f(t,e){return`${i}.${t}(${s(e,{contextName:i,contextVariables:o,getEntity:g,addVariable:m,variables:c,onUnrecognizedArgumentLookup:d})})`}function m(t,e){const r=`${i}Variable${o.length}`;return o.push(t),l.push(`${p}const ${r} = ${e};`),r}}function s(t,e){const{variables:r,onUnrecognizedArgumentLookup:n}=e;return Array.from(t).map((t=>function(t){if(r)for(const e in r)if(r.hasOwnProperty(e)&&r[e]===t)return e;return n?n(t):null}(t)||function(t,e){const{contextName:r,contextVariables:n,getEntity:i,addVariable:s,onUnrecognizedArgumentLookup:a}=e;if(void 0===t)return"undefined";if(null===t)return"null";const o=n.indexOf(t);if(o>-1)return`${r}Variable${o}`;switch(t.constructor.name){case"String":const e=/\n/.test(t),r=/'/.test(t),n=/"/.test(t);return e?"`"+t+"`":r&&!n?'"'+t+'"':"'"+t+"'";case"Number":case"Boolean":return i(t);case"Array":return s(t,`new ${t.constructor.name}([${Array.from(t).join(",")}])`);case"Float32Array":case"Uint8Array":case"Uint16Array":case"Int32Array":return s(t,`new ${t.constructor.name}(${JSON.stringify(Array.from(t))})`);default:if(a){const e=a(t);if(e)return e}throw new Error(`unrecognized argument type ${t.constructor.name}`)}}(t,e))).join(", ")}function a(t){return new t.constructor(t)}void 0!==e&&(e.exports={glWiretap:n,glExtensionWiretap:i}),"undefined"!=typeof window&&(n.glExtensionWiretap=i,window.glWiretap=n)},{}],4:[function(t,e,r){function n(t){const e=new Array(t.length);for(let r=0;r<t.length;r++){const n=t[r];n.toArray?e[r]=n.toArray():e[r]=n}return e}function i(){const t=n(arguments),e=new Float32Array(this.output.x);for(let r=0;r<this.output.x;r++)this.thread.x=r,this.thread.y=0,this.thread.z=0,e[r]=this._fn.apply(this,t);return e}function s(){const t=n(arguments),e=new Array(this.output.y);for(let r=0;r<this.output.y;r++){const n=new Float32Array(this.output.x);for(let e=0;e<this.output.x;e++)this.thread.x=e,this.thread.y=r,this.thread.z=0,n[e]=this._fn.apply(this,t);e[r]=n}return e}function a(){const t=n(arguments);for(let e=0;e<this.output.y;e++)for(let r=0;r<this.output.x;r++)this.thread.x=r,this.thread.y=e,this.thread.z=0,this._fn.apply(this,t)}function o(){const t=n(arguments),e=new Array(this.output.z);for(let r=0;r<this.output.z;r++){const n=new Array(this.output.y);for(let e=0;e<this.output.y;e++){const i=new Float32Array(this.output.x);for(let n=0;n<this.output.x;n++)this.thread.x=n,this.thread.y=e,this.thread.z=r,i[n]=this._fn.apply(this,t);n[e]=i}e[r]=n}return e}function u(t){t.setOutput=e=>{t.output=l(e),t.graphical&&h(t)},t.toJSON=()=>{throw new Error("Not usable with gpuMock")},t.setConstants=e=>(t.constants=e,t),t.setGraphical=e=>(t.graphical=e,t),t.setCanvas=e=>(t.canvas=e,t),t.setContext=e=>(t.context=e,t),t.destroy=()=>{},t.validateSettings=()=>{},t.graphical&&t.output&&h(t),t.exec=function(){return new Promise(((e,r)=>{try{e(t.apply(t,arguments))}catch(t){r(t)}}))},t.getPixels=e=>{const{x:r,y:n}=t.output;return e?function(t,e,r){const n=r/2|0,i=4*e,s=new Uint8ClampedArray(4*e),a=t.slice(0);for(let t=0;t<n;++t){const e=t*i,n=(r-t-1)*i;s.set(a.subarray(e,e+i)),a.copyWithin(e,n,n+i),a.set(s,n)}return a}(t._imageData.data,r,n):t._imageData.data.slice(0)},t.color=function(e,r,n,i){void 0===i&&(i=1),e=Math.floor(255*e),r=Math.floor(255*r),n=Math.floor(255*n),i=Math.floor(255*i);const s=t.output.x,a=t.output.y,o=t.thread.x+(a-t.thread.y-1)*s;t._colorData[4*o+0]=e,t._colorData[4*o+1]=r,t._colorData[4*o+2]=n,t._colorData[4*o+3]=i};const e=()=>t,r=["setWarnVarUsage","setArgumentTypes","setTactic","setOptimizeFloatMemory","setDebug","setLoopMaxIterations","setConstantTypes","setFunctions","setNativeFunctions","setInjectedNative","setPipeline","setPrecision","setOutputToTexture","setImmutable","setStrictIntegers","setDynamicOutput","setHardcodeConstants","setDynamicArguments","setUseLegacyEncoder","setWarnVarUsage","addSubKernel"];for(let n=0;n<r.length;n++)t[r[n]]=e;return t}function h(t){const{x:e,y:r}=t.output;if(t.context&&t.context.createImageData){const n=new Uint8ClampedArray(e*r*4);t._imageData=t.context.createImageData(e,r),t._colorData=n}else{const n=new Uint8ClampedArray(e*r*4);t._imageData={data:n},t._colorData=n}}function l(t){let e=null;if(t.length)if(3===t.length){const[r,n,i]=t;e={x:r,y:n,z:i}}else if(2===t.length){const[r,n]=t;e={x:r,y:n}}else{const[r]=t;e={x:r}}else e=t;return e}e.exports={gpuMock:function(t,e={}){const r=e.output?l(e.output):null;function n(){return n.output.z?o.apply(n,arguments):n.output.y?n.graphical?a.apply(n,arguments):s.apply(n,arguments):i.apply(n,arguments)}return n._fn=t,n.constants=e.constants||null,n.context=e.context||null,n.canvas=e.canvas||null,n.graphical=e.graphical||!1,n._imageData=null,n._colorData=null,n.output=r,n.thread={x:0,y:0,z:0},u(n)}}},{}],5:[function(t,e,r){const{utils:n}=t("./utils");e.exports={alias:function(t,e){const r=e.toString();return new Function(`return function ${t} (${n.getArgumentNamesFromString(r).join(", ")}) {\n  ${n.getFunctionBodyFromString(r)}\n}`)()}}},{"./utils":114}],6:[function(t,e,r){const{FunctionNode:n}=t("../function-node");e.exports={CPUFunctionNode:class extends n{astFunction(t,e){if(!this.isRootKernel){e.push("function"),e.push(" "),e.push(this.name),e.push("(");for(let t=0;t<this.argumentNames.length;++t){const r=this.argumentNames[t];t>0&&e.push(", "),e.push("user_"),e.push(r)}e.push(") {\n")}for(let r=0;r<t.body.body.length;++r)this.astGeneric(t.body.body[r],e),e.push("\n");return this.isRootKernel||e.push("}\n"),e}astReturnStatement(t,e){const r=this.returnType||this.getType(t.argument);return this.returnType||(this.returnType=r),this.isRootKernel?(e.push(this.leadingReturnStatement),this.astGeneric(t.argument,e),e.push(";\n"),e.push(this.followingReturnStatement),e.push("continue;\n")):this.isSubKernel?(e.push(`subKernelResult_${this.name} = `),this.astGeneric(t.argument,e),e.push(";"),e.push(`return subKernelResult_${this.name};`)):(e.push("return "),this.astGeneric(t.argument,e),e.push(";")),e}astLiteral(t,e){if(isNaN(t.value))throw this.astErrorOutput("Non-numeric literal not supported : "+t.value,t);return e.push(t.value),e}astBinaryExpression(t,e){return e.push("("),this.astGeneric(t.left,e),e.push(t.operator),this.astGeneric(t.right,e),e.push(")"),e}astIdentifierExpression(t,e){if("Identifier"!==t.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);return"Infinity"===t.name?e.push("Infinity"):this.constants&&this.constants.hasOwnProperty(t.name)?e.push("constants_"+t.name):e.push("user_"+t.name),e}astForStatement(t,e){if("ForStatement"!==t.type)throw this.astErrorOutput("Invalid for statement",t);const r=[],n=[],i=[],s=[];let a=null;if(t.init){this.pushState("in-for-loop-init"),this.astGeneric(t.init,r);for(let t=0;t<r.length;t++)r[t].includes&&r[t].includes(",")&&(a=!1);this.popState("in-for-loop-init")}else a=!1;if(t.test?this.astGeneric(t.test,n):a=!1,t.update?this.astGeneric(t.update,i):a=!1,t.body&&(this.pushState("loop-body"),this.astGeneric(t.body,s),this.popState("loop-body")),null===a&&(a=this.isSafe(t.init)&&this.isSafe(t.test)),a)e.push(`for (${r.join("")};${n.join("")};${i.join("")}){\n`),e.push(s.join("")),e.push("}\n");else{const t=this.getInternalVariableName("safeI");r.length>0&&e.push(r.join(""),";\n"),e.push(`for (let ${t}=0;${t}<LOOP_MAX;${t}++){\n`),n.length>0&&e.push(`if (!${n.join("")}) break;\n`),e.push(s.join("")),e.push(`\n${i.join("")};`),e.push("}\n")}return e}astWhileStatement(t,e){if("WhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);return e.push("for (let i = 0; i < LOOP_MAX; i++) {"),e.push("if ("),this.astGeneric(t.test,e),e.push(") {\n"),this.astGeneric(t.body,e),e.push("} else {\n"),e.push("break;\n"),e.push("}\n"),e.push("}\n"),e}astDoWhileStatement(t,e){if("DoWhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);return e.push("for (let i = 0; i < LOOP_MAX; i++) {"),this.astGeneric(t.body,e),e.push("if (!"),this.astGeneric(t.test,e),e.push(") {\n"),e.push("break;\n"),e.push("}\n"),e.push("}\n"),e}astAssignmentExpression(t,e){const r=this.getDeclaration(t.left);if(r&&!r.assignable)throw this.astErrorOutput(`Variable ${t.left.name} is not assignable here`,t);return this.astGeneric(t.left,e),e.push(t.operator),this.astGeneric(t.right,e),e}astBlockStatement(t,e){if(this.isState("loop-body")){this.pushState("block-body");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);this.popState("block-body")}else{e.push("{\n");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);e.push("}\n")}return e}astVariableDeclaration(t,e){e.push(`${t.kind} `);const{declarations:r}=t;for(let t=0;t<r.length;t++){t>0&&e.push(",");const n=r[t],i=this.getDeclaration(n.id);i.valueType||(i.valueType=this.getType(n.init)),this.astGeneric(n,e)}return this.isState("in-for-loop-init")||e.push(";"),e}astIfStatement(t,e){return e.push("if ("),this.astGeneric(t.test,e),e.push(")"),"BlockStatement"===t.consequent.type?this.astGeneric(t.consequent,e):(e.push(" {\n"),this.astGeneric(t.consequent,e),e.push("\n}\n")),t.alternate&&(e.push("else "),"BlockStatement"===t.alternate.type||"IfStatement"===t.alternate.type?this.astGeneric(t.alternate,e):(e.push(" {\n"),this.astGeneric(t.alternate,e),e.push("\n}\n"))),e}astSwitchStatement(t,e){const{discriminant:r,cases:n}=t;e.push("switch ("),this.astGeneric(r,e),e.push(") {\n");for(let t=0;t<n.length;t++)null!==n[t].test?(e.push("case "),this.astGeneric(n[t].test,e),e.push(":\n"),n[t].consequent&&n[t].consequent.length>0&&(this.astGeneric(n[t].consequent,e),e.push("break;\n"))):(e.push("default:\n"),this.astGeneric(n[t].consequent,e),n[t].consequent&&n[t].consequent.length>0&&e.push("break;\n"));e.push("\n}")}astThisExpression(t,e){return e.push("_this"),e}astMemberExpression(t,e){const{signature:r,type:n,property:i,xProperty:s,yProperty:a,zProperty:o,name:u,origin:h}=this.getMemberExpressionDetails(t);switch(r){case"this.thread.value":return e.push(`_this.thread.${u}`),e;case"this.output.value":switch(u){case"x":e.push("outputX");break;case"y":e.push("outputY");break;case"z":e.push("outputZ");break;default:throw this.astErrorOutput("Unexpected expression",t)}return e;case"value":default:throw this.astErrorOutput("Unexpected expression",t);case"value[]":case"value[][]":case"value[][][]":case"value.value":if("Math"===h)return e.push(Math[u]),e;switch(i){case"r":return e.push(`user_${u}[0]`),e;case"g":return e.push(`user_${u}[1]`),e;case"b":return e.push(`user_${u}[2]`),e;case"a":return e.push(`user_${u}[3]`),e}break;case"this.constants.value":case"this.constants.value[]":case"this.constants.value[][]":case"this.constants.value[][][]":break;case"fn()[]":return this.astGeneric(t.object,e),e.push("["),this.astGeneric(t.property,e),e.push("]"),e;case"fn()[][]":return this.astGeneric(t.object.object,e),e.push("["),this.astGeneric(t.object.property,e),e.push("]"),e.push("["),this.astGeneric(t.property,e),e.push("]"),e}if(!t.computed)switch(n){case"Number":case"Integer":case"Float":case"Boolean":return e.push(`${h}_${u}`),e}const l=`${h}_${u}`;{let t,r;if("constants"===h){const e=this.constants[u];r="Input"===this.constantTypes[u],t=r?e.size:null}else r=this.isInput(u),t=r?this.argumentSizes[this.argumentNames.indexOf(u)]:null;e.push(`${l}`),o&&a?r?(e.push("[("),this.astGeneric(o,e),e.push(`*${this.dynamicArguments?"(outputY * outputX)":t[1]*t[0]})+(`),this.astGeneric(a,e),e.push(`*${this.dynamicArguments?"outputX":t[0]})+`),this.astGeneric(s,e),e.push("]")):(e.push("["),this.astGeneric(o,e),e.push("]"),e.push("["),this.astGeneric(a,e),e.push("]"),e.push("["),this.astGeneric(s,e),e.push("]")):a?r?(e.push("[("),this.astGeneric(a,e),e.push(`*${this.dynamicArguments?"outputX":t[0]})+`),this.astGeneric(s,e),e.push("]")):(e.push("["),this.astGeneric(a,e),e.push("]"),e.push("["),this.astGeneric(s,e),e.push("]")):void 0!==s&&(e.push("["),this.astGeneric(s,e),e.push("]"))}return e}astCallExpression(t,e){if("CallExpression"!==t.type)throw this.astErrorOutput("Unknown CallExpression",t);let r=this.astMemberExpressionUnroll(t.callee);this.calledFunctions.indexOf(r)<0&&this.calledFunctions.push(r),this.isAstMathFunction(t),this.onFunctionCall&&this.onFunctionCall(this.name,r,t.arguments),e.push(r),e.push("(");const n=this.lookupFunctionArgumentTypes(r)||[];for(let i=0;i<t.arguments.length;++i){const s=t.arguments[i];let a=this.getType(s);n[i]||this.triggerImplyArgumentType(r,i,a,this),i>0&&e.push(", "),this.astGeneric(s,e)}return e.push(")"),e}astArrayExpression(t,e){const r=this.getType(t),n=t.elements.length,i=[];for(let e=0;e<n;++e){const r=[];this.astGeneric(t.elements[e],r),i.push(r.join(""))}switch(r){case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":e.push(`[${i.join(", ")}]`);break;default:e.push(`new Float32Array([${i.join(", ")}])`)}return e}astDebuggerStatement(t,e){return e.push("debugger;"),e}}}},{"../function-node":10}],7:[function(t,e,r){const{utils:n}=t("../../utils");e.exports={cpuKernelString:function(t,e){const r=[],i=[],s=[],a=!/^function/.test(t.color.toString());if(r.push("  const { context, canvas, constants: incomingConstants } = settings;",`  const output = new Int32Array(${JSON.stringify(Array.from(t.output))});`,`  const _constantTypes = ${JSON.stringify(t.constantTypes)};`,`  const _constants = ${function(t,e){const r=[];for(const n in e){if(!e.hasOwnProperty(n))continue;const i=e[n],s=t[n];switch(i){case"Number":case"Integer":case"Float":case"Boolean":r.push(`${n}:${s}`);break;case"Array(2)":case"Array(3)":case"Array(4)":case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":r.push(`${n}:new ${s.constructor.name}(${JSON.stringify(Array.from(s))})`)}}return`{ ${r.join()} }`}(t.constants,t.constantTypes)};`),i.push("    constants: _constants,","    context,","    output,","    thread: {x: 0, y: 0, z: 0},"),t.graphical){r.push(`  const _imageData = context.createImageData(${t.output[0]}, ${t.output[1]});`),r.push(`  const _colorData = new Uint8ClampedArray(${t.output[0]} * ${t.output[1]} * 4);`);const e=n.flattenFunctionToString((a?"function ":"")+t.color.toString(),{thisLookup:e=>{switch(e){case"_colorData":return"_colorData";case"_imageData":return"_imageData";case"output":return"output";case"thread":return"this.thread"}return JSON.stringify(t[e])},findDependency:(t,e)=>null}),o=n.flattenFunctionToString((a?"function ":"")+t.getPixels.toString(),{thisLookup:e=>{switch(e){case"_colorData":return"_colorData";case"_imageData":return"_imageData";case"output":return"output";case"thread":return"this.thread"}return JSON.stringify(t[e])},findDependency:()=>null});i.push("    _imageData,","    _colorData,",`    color: ${e},`),s.push(`  kernel.getPixels = ${o};`)}const o=[],u=Object.keys(t.constantTypes);for(let e=0;e<u.length;e++)o.push(t.constantTypes[u]);if(-1!==t.argumentTypes.indexOf("HTMLImageArray")||-1!==o.indexOf("HTMLImageArray")){const e=n.flattenFunctionToString((a?"function ":"")+t._imageTo3DArray.toString(),{doNotDefine:["canvas"],findDependency:(e,r)=>"this"===e?(a?"function ":"")+t[r].toString():null,thisLookup:t=>{switch(t){case"canvas":return;case"context":return"context"}}});s.push(e),i.push("    _mediaTo2DArray,"),i.push("    _imageTo3DArray,")}else if(-1!==t.argumentTypes.indexOf("HTMLImage")||-1!==o.indexOf("HTMLImage")){const e=n.flattenFunctionToString((a?"function ":"")+t._mediaTo2DArray.toString(),{findDependency:(t,e)=>null,thisLookup:t=>{switch(t){case"canvas":return"settings.canvas";case"context":return"settings.context"}throw new Error("unhandled thisLookup")}});s.push(e),i.push("    _mediaTo2DArray,")}return`function(settings) {\n${r.join("\n")}\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n      case 'Matrix(2)':\n      case 'Matrix(3)':\n      case 'Matrix(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n${t._kernelString}\n  })\n    .apply({ ${i.join("\n")} });\n  ${s.join("\n")}\n  return kernel;\n}`}}},{"../../utils":114}],8:[function(t,e,r){const{Kernel:n}=t("../kernel"),{FunctionBuilder:i}=t("../function-builder"),{CPUFunctionNode:s}=t("./function-node"),{utils:a}=t("../../utils"),{cpuKernelString:o}=t("./kernel-string");e.exports={CPUKernel:class extends n{static getFeatures(){return this.features}static get features(){return Object.freeze({kernelMap:!0,isIntegerDivisionAccurate:!0})}static get isSupported(){return!0}static isContextMatch(t){return!1}static get mode(){return"cpu"}static nativeFunctionArguments(){return null}static nativeFunctionReturnType(){throw new Error(`Looking up native function return type not supported on ${this.name}`)}static combineKernels(t){return t}static getSignature(t,e){return"cpu"+(e.length>0?":"+e.join(","):"")}constructor(t,e){super(t,e),this.mergeSettings(t.settings||e),this._imageData=null,this._colorData=null,this._kernelString=null,this._prependedString=[],this.thread={x:0,y:0,z:0},this.translatedSources=null}initCanvas(){return"undefined"!=typeof document?document.createElement("canvas"):"undefined"!=typeof OffscreenCanvas?new OffscreenCanvas(0,0):void 0}initContext(){return this.canvas?this.canvas.getContext("2d"):null}initPlugins(t){return[]}validateSettings(t){if(!this.output||0===this.output.length){if(1!==t.length)throw new Error("Auto output only supported for kernels with only one input");const e=a.getVariableType(t[0],this.strictIntegers);if("Array"===e)this.output=a.getDimensions(e);else{if("NumberTexture"!==e&&"ArrayTexture(4)"!==e)throw new Error("Auto output not supported for input type: "+e);this.output=t[0].output}}if(this.graphical&&2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");this.checkOutput()}translateSource(){if(this.leadingReturnStatement=this.output.length>1?"resultX[x] = ":"result[x] = ",this.subKernels){const t=[];for(let e=0;e<this.subKernels.length;e++){const{name:r}=this.subKernels[e];t.push(this.output.length>1?`resultX_${r}[x] = subKernelResult_${r};\n`:`result_${r}[x] = subKernelResult_${r};\n`)}this.followingReturnStatement=t.join("")}const t=i.fromKernel(this,s);this.translatedSources=t.getPrototypes("kernel"),this.graphical||this.returnType||(this.returnType=t.getKernelResultType())}build(){if(this.built)return;if(this.setupConstants(),this.setupArguments(arguments),this.validateSettings(arguments),this.translateSource(),this.graphical){const{canvas:t,output:e}=this;if(!t)throw new Error("no canvas available for using graphical output");const r=e[0],n=e[1]||1;t.width=r,t.height=n,this._imageData=this.context.createImageData(r,n),this._colorData=new Uint8ClampedArray(r*n*4)}const t=this.getKernelString();this.kernelString=t,this.debug&&(console.log("Function output:"),console.log(t));try{this.run=new Function([],t).bind(this)()}catch(t){console.error("An error occurred compiling the javascript: ",t)}this.buildSignature(arguments),this.built=!0}color(t,e,r,n){void 0===n&&(n=1),t=Math.floor(255*t),e=Math.floor(255*e),r=Math.floor(255*r),n=Math.floor(255*n);const i=this.output[0],s=this.output[1],a=this.thread.x+(s-this.thread.y-1)*i;this._colorData[4*a+0]=t,this._colorData[4*a+1]=e,this._colorData[4*a+2]=r,this._colorData[4*a+3]=n}getKernelString(){if(null!==this._kernelString)return this._kernelString;let t=null,{translatedSources:e}=this;return e.length>1?e=e.filter((e=>/^function/.test(e)?e:(t=e,!1))):t=e.shift(),this._kernelString=`  const LOOP_MAX = ${this._getLoopMaxString()};\n  ${this.injectedNative||""}\n  const _this = this;\n  ${this._resultKernelHeader()}\n  ${this._processConstants()}\n  return (${this.argumentNames.map((t=>"user_"+t)).join(", ")}) => {\n    ${this._prependedString.join("")}\n    ${this._earlyThrows()}\n    ${this._processArguments()}\n    ${this.graphical?this._graphicalKernelBody(t):this._resultKernelBody(t)}\n    ${e.length>0?e.join("\n"):""}\n  };`}toString(){return o(this)}_getLoopMaxString(){return this.loopMaxIterations?` ${parseInt(this.loopMaxIterations)};`:" 1000;"}_processConstants(){if(!this.constants)return"";const t=[];for(let e in this.constants)switch(this.constantTypes[e]){case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":t.push(`    const constants_${e} = this._mediaTo2DArray(this.constants.${e});\n`);break;case"HTMLImageArray":t.push(`    const constants_${e} = this._imageTo3DArray(this.constants.${e});\n`);break;case"Input":t.push(`    const constants_${e} = this.constants.${e}.value;\n`);break;default:t.push(`    const constants_${e} = this.constants.${e};\n`)}return t.join("")}_earlyThrows(){if(this.graphical)return"";if(this.immutable)return"";if(!this.pipeline)return"";const t=[];for(let e=0;e<this.argumentTypes.length;e++)"Array"===this.argumentTypes[e]&&t.push(this.argumentNames[e]);if(0===t.length)return"";const e=[];for(let r=0;r<t.length;r++){const n=t[r],i=this._mapSubKernels((t=>`user_${n} === result_${t.name}`)).join(" || ");e.push(`user_${n} === result${i?` || ${i}`:""}`)}return`if (${e.join(" || ")}) throw new Error('Source and destination arrays are the same.  Use immutable = true');`}_processArguments(){const t=[];for(let e=0;e<this.argumentTypes.length;e++){const r=`user_${this.argumentNames[e]}`;switch(this.argumentTypes[e]){case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":t.push(`    ${r} = this._mediaTo2DArray(${r});\n`);break;case"HTMLImageArray":t.push(`    ${r} = this._imageTo3DArray(${r});\n`);break;case"Input":t.push(`    ${r} = ${r}.value;\n`);break;case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"NumberTexture":case"MemoryOptimizedNumberTexture":t.push(`\n    if (${r}.toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(${r});\n      if (textureIndex !== -1) {\n        ${r} = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(${r});\n        ${r} = ${r}.toArray();\n        _this.arrayCache.push(${r});\n      }\n    }`)}}return t.join("")}_mediaTo2DArray(t){const e=this.canvas,r=t.width>0?t.width:t.videoWidth,n=t.height>0?t.height:t.videoHeight;e.width<r&&(e.width=r),e.height<n&&(e.height=n);const i=this.context;i.drawImage(t,0,0,r,n);const s=i.getImageData(0,0,r,n).data,a=new Array(n);let o=0;for(let t=n-1;t>=0;t--){const e=a[t]=new Array(r);for(let t=0;t<r;t++){const r=new Float32Array(4);r[0]=s[o++]/255,r[1]=s[o++]/255,r[2]=s[o++]/255,r[3]=s[o++]/255,e[t]=r}}return a}getPixels(t){const[e,r]=this.output;return t?a.flipPixels(this._imageData.data,e,r):this._imageData.data.slice(0)}_imageTo3DArray(t){const e=new Array(t.length);for(let r=0;r<t.length;r++)e[r]=this._mediaTo2DArray(t[r]);return e}_resultKernelHeader(){if(this.graphical)return"";if(this.immutable)return"";if(!this.pipeline)return"";switch(this.output.length){case 1:return this._mutableKernel1DResults();case 2:return this._mutableKernel2DResults();case 3:return this._mutableKernel3DResults()}}_resultKernelBody(t){switch(this.output.length){case 1:return(!this.immutable&&this.pipeline?this._resultMutableKernel1DLoop(t):this._resultImmutableKernel1DLoop(t))+this._kernelOutput();case 2:return(!this.immutable&&this.pipeline?this._resultMutableKernel2DLoop(t):this._resultImmutableKernel2DLoop(t))+this._kernelOutput();case 3:return(!this.immutable&&this.pipeline?this._resultMutableKernel3DLoop(t):this._resultImmutableKernel3DLoop(t))+this._kernelOutput();default:throw new Error("unsupported size kernel")}}_graphicalKernelBody(t){if(2===this.output.length)return this._graphicalKernel2DLoop(t)+this._graphicalOutput();throw new Error("unsupported size kernel")}_graphicalOutput(){return"\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;"}_getKernelResultTypeConstructorString(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return"Float32Array";case"Array(2)":case"Array(3)":case"Array(4)":return"Array";default:if(this.graphical)return"Float32Array";throw new Error(`unhandled returnType ${this.returnType}`)}}_resultImmutableKernel1DLoop(t){const e=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const result = new ${e}(outputX);\n    ${this._mapSubKernels((t=>`const result_${t.name} = new ${e}(outputX);\n`)).join("    ")}\n    ${this._mapSubKernels((t=>`let subKernelResult_${t.name};\n`)).join("    ")}\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${t}\n    }`}_mutableKernel1DResults(){const t=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const result = new ${t}(outputX);\n    ${this._mapSubKernels((e=>`const result_${e.name} = new ${t}(outputX);\n`)).join("    ")}\n    ${this._mapSubKernels((t=>`let subKernelResult_${t.name};\n`)).join("    ")}`}_resultMutableKernel1DLoop(t){return`  const outputX = _this.output[0];\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${t}\n    }`}_resultImmutableKernel2DLoop(t){const e=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${this._mapSubKernels((t=>`const result_${t.name} = new Array(outputY);\n`)).join("    ")}\n    ${this._mapSubKernels((t=>`let subKernelResult_${t.name};\n`)).join("    ")}\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ${e}(outputX);\n      ${this._mapSubKernels((t=>`const resultX_${t.name} = result_${t.name}[y] = new ${e}(outputX);\n`)).join("")}\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${t}\n      }\n    }`}_mutableKernel2DResults(){const t=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ${this._mapSubKernels((t=>`const result_${t.name} = new Array(outputY);\n`)).join("    ")}\n    ${this._mapSubKernels((t=>`let subKernelResult_${t.name};\n`)).join("    ")}\n    for (let y = 0; y < outputY; y++) {\n      const resultX = result[y] = new ${t}(outputX);\n      ${this._mapSubKernels((e=>`const resultX_${e.name} = result_${e.name}[y] = new ${t}(outputX);\n`)).join("")}\n    }`}_resultMutableKernel2DLoop(t){const e=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y];\n      ${this._mapSubKernels((t=>`const resultX_${t.name} = result_${t.name}[y] = new ${e}(outputX);\n`)).join("")}\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${t}\n      }\n    }`}_graphicalKernel2DLoop(t){return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ${t}\n      }\n    }`}_resultImmutableKernel3DLoop(t){const e=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${this._mapSubKernels((t=>`const result_${t.name} = new Array(outputZ);\n`)).join("    ")}\n    ${this._mapSubKernels((t=>`let subKernelResult_${t.name};\n`)).join("    ")}\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ${this._mapSubKernels((t=>`const resultY_${t.name} = result_${t.name}[z] = new Array(outputY);\n`)).join("      ")}\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ${e}(outputX);\n        ${this._mapSubKernels((t=>`const resultX_${t.name} = resultY_${t.name}[y] = new ${e}(outputX);\n`)).join("        ")}\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${t}\n        }\n      }\n    }`}_mutableKernel3DResults(){const t=this._getKernelResultTypeConstructorString();return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ${this._mapSubKernels((t=>`const result_${t.name} = new Array(outputZ);\n`)).join("    ")}\n    ${this._mapSubKernels((t=>`let subKernelResult_${t.name};\n`)).join("    ")}\n    for (let z = 0; z < outputZ; z++) {\n      const resultY = result[z] = new Array(outputY);\n      ${this._mapSubKernels((t=>`const resultY_${t.name} = result_${t.name}[z] = new Array(outputY);\n`)).join("      ")}\n      for (let y = 0; y < outputY; y++) {\n        const resultX = resultY[y] = new ${t}(outputX);\n        ${this._mapSubKernels((e=>`const resultX_${e.name} = resultY_${e.name}[y] = new ${t}(outputX);\n`)).join("        ")}\n      }\n    }`}_resultMutableKernel3DLoop(t){return`  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z];\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y];\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ${t}\n        }\n      }\n    }`}_kernelOutput(){return this.subKernels?`\n    return {\n      result: result,\n      ${this.subKernels.map((t=>`${t.property}: result_${t.name}`)).join(",\n      ")}\n    };`:"\n    return result;"}_mapSubKernels(t){return null===this.subKernels?[""]:this.subKernels.map(t)}destroy(t){t&&delete this.canvas}static destroyContext(t){}toJSON(){const t=super.toJSON();return t.functionNodes=i.fromKernel(this,s).toJSON(),t}setOutput(t){super.setOutput(t);const[e,r]=this.output;this.graphical&&(this._imageData=this.context.createImageData(e,r),this._colorData=new Uint8ClampedArray(e*r*4))}prependString(t){if(this._kernelString)throw new Error("Kernel already built");this._prependedString.push(t)}hasPrependString(t){return this._prependedString.indexOf(t)>-1}}}},{"../../utils":114,"../function-builder":9,"../kernel":36,"./function-node":6,"./kernel-string":7}],9:[function(t,e,r){class n{static fromKernel(t,e,r){const{kernelArguments:i,kernelConstants:s,argumentNames:a,argumentSizes:o,argumentBitRatios:u,constants:h,constantBitRatios:l,debug:c,loopMaxIterations:p,nativeFunctions:d,output:g,optimizeFloatMemory:f,precision:m,plugins:y,source:x,subKernels:b,functions:w,leadingReturnStatement:T,followingReturnStatement:v,dynamicArguments:S,dynamicOutput:A}=t,_=new Array(i.length),k={};for(let t=0;t<i.length;t++)_[t]=i[t].type;for(let t=0;t<s.length;t++){const e=s[t];k[e.name]=e.type}const E=(t,e)=>G.needsArgumentType(t,e),L=(t,e,r)=>{G.assignArgumentType(t,e,r)},I=(t,e,r)=>G.lookupReturnType(t,e,r),D=t=>G.lookupFunctionArgumentTypes(t),$=(t,e)=>G.lookupFunctionArgumentName(t,e),O=(t,e)=>G.lookupFunctionArgumentBitRatio(t,e),C=(t,e,r,n)=>{G.assignArgumentType(t,e,r,n)},F=(t,e,r,n)=>{G.assignArgumentBitRatio(t,e,r,n)},R=(t,e,r)=>{G.trackFunctionCall(t,e,r)},z=(t,r)=>{const n=[];for(let e=0;e<t.params.length;e++)n.push(t.params[e].name);const i=new e(r,Object.assign({},M,{returnType:null,ast:t,name:t.id.name,argumentNames:n,lookupReturnType:I,lookupFunctionArgumentTypes:D,lookupFunctionArgumentName:$,lookupFunctionArgumentBitRatio:O,needsArgumentType:E,assignArgumentType:L,triggerImplyArgumentType:C,triggerImplyArgumentBitRatio:F,onFunctionCall:R}));i.traceFunctionAST(t),G.addFunctionNode(i)},M=Object.assign({isRootKernel:!1,onNestedFunction:z,lookupReturnType:I,lookupFunctionArgumentTypes:D,lookupFunctionArgumentName:$,lookupFunctionArgumentBitRatio:O,needsArgumentType:E,assignArgumentType:L,triggerImplyArgumentType:C,triggerImplyArgumentBitRatio:F,onFunctionCall:R,optimizeFloatMemory:f,precision:m,constants:h,constantTypes:k,constantBitRatios:l,debug:c,loopMaxIterations:p,output:g,plugins:y,dynamicArguments:S,dynamicOutput:A},r||{}),N=Object.assign({},M,{isRootKernel:!0,name:"kernel",argumentNames:a,argumentTypes:_,argumentSizes:o,argumentBitRatios:u,leadingReturnStatement:T,followingReturnStatement:v});if("object"==typeof x&&x.functionNodes)return(new n).fromJSON(x.functionNodes,e);const V=new e(x,N);let P=null;w&&(P=w.map((t=>new e(t.source,{returnType:t.returnType,argumentTypes:t.argumentTypes,output:g,plugins:y,constants:h,constantTypes:k,constantBitRatios:l,optimizeFloatMemory:f,precision:m,lookupReturnType:I,lookupFunctionArgumentTypes:D,lookupFunctionArgumentName:$,lookupFunctionArgumentBitRatio:O,needsArgumentType:E,assignArgumentType:L,triggerImplyArgumentType:C,triggerImplyArgumentBitRatio:F,onFunctionCall:R,onNestedFunction:z}))));let K=null;b&&(K=b.map((t=>{const{name:r,source:n}=t;return new e(n,Object.assign({},M,{name:r,isSubKernel:!0,isRootKernel:!1}))})));const G=new n({kernel:t,rootNode:V,functionNodes:P,nativeFunctions:d,subKernelNodes:K});return G}constructor(t){if(t=t||{},this.kernel=t.kernel,this.rootNode=t.rootNode,this.functionNodes=t.functionNodes||[],this.subKernelNodes=t.subKernelNodes||[],this.nativeFunctions=t.nativeFunctions||[],this.functionMap={},this.nativeFunctionNames=[],this.lookupChain=[],this.functionNodeDependencies={},this.functionCalls={},this.rootNode&&(this.functionMap.kernel=this.rootNode),this.functionNodes)for(let t=0;t<this.functionNodes.length;t++)this.functionMap[this.functionNodes[t].name]=this.functionNodes[t];if(this.subKernelNodes)for(let t=0;t<this.subKernelNodes.length;t++)this.functionMap[this.subKernelNodes[t].name]=this.subKernelNodes[t];if(this.nativeFunctions)for(let t=0;t<this.nativeFunctions.length;t++){const e=this.nativeFunctions[t];this.nativeFunctionNames.push(e.name)}}addFunctionNode(t){if(!t.name)throw new Error("functionNode.name needs set");this.functionMap[t.name]=t,t.isRootKernel&&(this.rootNode=t)}traceFunctionCalls(t,e){if(t=t||"kernel",e=e||[],this.nativeFunctionNames.indexOf(t)>-1){const r=e.indexOf(t);if(-1===r)e.push(t);else{const t=e.splice(r,1)[0];e.push(t)}return e}const r=this.functionMap[t];if(r){const n=e.indexOf(t);if(-1===n){e.push(t),r.toString();for(let t=0;t<r.calledFunctions.length;++t)this.traceFunctionCalls(r.calledFunctions[t],e)}else{const t=e.splice(n,1)[0];e.push(t)}}return e}getPrototypeString(t){return this.getPrototypes(t).join("\n")}getPrototypes(t){return this.rootNode&&this.rootNode.toString(),t?this.getPrototypesFromFunctionNames(this.traceFunctionCalls(t,[]).reverse()):this.getPrototypesFromFunctionNames(Object.keys(this.functionMap))}getStringFromFunctionNames(t){const e=[];for(let r=0;r<t.length;++r)this.functionMap[t[r]]&&e.push(this.functionMap[t[r]].toString());return e.join("\n")}getPrototypesFromFunctionNames(t){const e=[];for(let r=0;r<t.length;++r){const n=t[r],i=this.nativeFunctionNames.indexOf(n);if(i>-1){e.push(this.nativeFunctions[i].source);continue}const s=this.functionMap[n];s&&e.push(s.toString())}return e}toJSON(){return this.traceFunctionCalls(this.rootNode.name).reverse().map((t=>{const e=this.nativeFunctions.indexOf(t);if(e>-1)return{name:t,source:this.nativeFunctions[e].source};if(this.functionMap[t])return this.functionMap[t].toJSON();throw new Error(`function ${t} not found`)}))}fromJSON(t,e){this.functionMap={};for(let r=0;r<t.length;r++){const n=t[r];this.functionMap[n.settings.name]=new e(n.ast,n.settings)}return this}getString(t){return t?this.getStringFromFunctionNames(this.traceFunctionCalls(t).reverse()):this.getStringFromFunctionNames(Object.keys(this.functionMap))}lookupReturnType(t,e,r){if("CallExpression"!==e.type)throw new Error(`expected ast type of "CallExpression", but is ${e.type}`);if(this._isNativeFunction(t))return this._lookupNativeFunctionReturnType(t);if(this._isFunction(t)){const n=this._getFunction(t);if(n.returnType)return n.returnType;{for(let t=0;t<this.lookupChain.length;t++)if(this.lookupChain[t].ast===e){if(0===n.argumentTypes.length&&e.arguments.length>0){const i=e.arguments;for(let e=0;e<i.length;e++)this.lookupChain.push({name:r.name,ast:i[t],requestingNode:r}),n.argumentTypes[e]=r.getType(i[e]),this.lookupChain.pop();return n.returnType=n.getType(n.getJsAST())}throw new Error("circlical logic detected!")}this.lookupChain.push({name:r.name,ast:e,requestingNode:r});const t=n.getType(n.getJsAST());return this.lookupChain.pop(),n.returnType=t}}return null}_getFunction(t){return this._isFunction(t)||new Error(`Function ${t} not found`),this.functionMap[t]}_isFunction(t){return Boolean(this.functionMap[t])}_getNativeFunction(t){for(let e=0;e<this.nativeFunctions.length;e++)if(this.nativeFunctions[e].name===t)return this.nativeFunctions[e];return null}_isNativeFunction(t){return Boolean(this._getNativeFunction(t))}_lookupNativeFunctionReturnType(t){let e=this._getNativeFunction(t);if(e)return e.returnType;throw new Error(`Native function ${t} not found`)}lookupFunctionArgumentTypes(t){return this._isNativeFunction(t)?this._getNativeFunction(t).argumentTypes:this._isFunction(t)?this._getFunction(t).argumentTypes:null}lookupFunctionArgumentName(t,e){return this._getFunction(t).argumentNames[e]}lookupFunctionArgumentBitRatio(t,e){if(!this._isFunction(t))throw new Error("function not found");if(this.rootNode.name===t){const t=this.rootNode.argumentNames.indexOf(e);if(-1!==t)return this.rootNode.argumentBitRatios[t]}const r=this._getFunction(t),n=r.argumentNames.indexOf(e);if(-1===n)throw new Error("argument not found");const i=r.argumentBitRatios[n];if("number"!=typeof i)throw new Error("argument bit ratio not found");return i}needsArgumentType(t,e){return!!this._isFunction(t)&&!this._getFunction(t).argumentTypes[e]}assignArgumentType(t,e,r,n){if(!this._isFunction(t))return;const i=this._getFunction(t);i.argumentTypes[e]||(i.argumentTypes[e]=r)}assignArgumentBitRatio(t,e,r,n){const i=this._getFunction(t);if(this._isNativeFunction(r))return null;const s=this._getFunction(r),a=i.argumentNames.indexOf(e);if(-1===a)throw new Error(`Argument ${e} not found in arguments from function ${t}`);const o=i.argumentBitRatios[a];if("number"!=typeof o)throw new Error(`Bit ratio for argument ${e} not found in function ${t}`);s.argumentBitRatios||(s.argumentBitRatios=new Array(s.argumentNames.length));const u=s.argumentBitRatios[a];if("number"==typeof u){if(u!==o)throw new Error(`Incompatible bit ratio found at function ${t} at argument ${e}`);return u}return s.argumentBitRatios[a]=o,o}trackFunctionCall(t,e,r){this.functionNodeDependencies[t]||(this.functionNodeDependencies[t]=new Set,this.functionCalls[t]=[]),this.functionNodeDependencies[t].add(e),this.functionCalls[t].push(r)}getKernelResultType(){return this.rootNode.returnType||this.rootNode.getType(this.rootNode.ast)}getSubKernelResultType(t){const e=this.subKernelNodes[t];let r=!1;for(let t=0;t<this.rootNode.functionCalls.length;t++)this.rootNode.functionCalls[t].ast.callee.name===e.name&&(r=!0);if(!r)throw new Error(`SubKernel ${e.name} never called by kernel`);return e.returnType||e.getType(e.getJsAST())}getReturnTypes(){const t={[this.rootNode.name]:this.rootNode.getType(this.rootNode.ast)},e=this.traceFunctionCalls(this.rootNode.name);for(let r=0;r<e.length;r++){const n=e[r],i=this.functionMap[n];t[n]=i.getType(i.ast)}return t}}e.exports={FunctionBuilder:n}},{}],10:[function(t,e,r){const n=t("acorn"),{utils:i}=t("../utils"),{FunctionTracer:s}=t("./function-tracer"),a={Number:"Number",Float:"Float",Integer:"Integer",Array:"Number","Array(2)":"Number","Array(3)":"Number","Array(4)":"Number","Matrix(2)":"Number","Matrix(3)":"Number","Matrix(4)":"Number",Array2D:"Number",Array3D:"Number",Input:"Number",HTMLCanvas:"Array(4)",HTMLImage:"Array(4)",HTMLVideo:"Array(4)",HTMLImageArray:"Array(4)",NumberTexture:"Number",MemoryOptimizedNumberTexture:"Number","Array1D(2)":"Array(2)","Array1D(3)":"Array(3)","Array1D(4)":"Array(4)","Array2D(2)":"Array(2)","Array2D(3)":"Array(3)","Array2D(4)":"Array(4)","Array3D(2)":"Array(2)","Array3D(3)":"Array(3)","Array3D(4)":"Array(4)","ArrayTexture(1)":"Number","ArrayTexture(2)":"Array(2)","ArrayTexture(3)":"Array(3)","ArrayTexture(4)":"Array(4)"};e.exports={FunctionNode:class{constructor(t,e){if(!t&&!e.ast)throw new Error("source parameter is missing");if(e=e||{},this.source=t,this.ast=null,this.name="string"==typeof t?e.isRootKernel?"kernel":e.name||i.getFunctionNameFromString(t):null,this.calledFunctions=[],this.constants={},this.constantTypes={},this.constantBitRatios={},this.isRootKernel=!1,this.isSubKernel=!1,this.debug=null,this.functions=null,this.identifiers=null,this.contexts=null,this.functionCalls=null,this.states=[],this.needsArgumentType=null,this.assignArgumentType=null,this.lookupReturnType=null,this.lookupFunctionArgumentTypes=null,this.lookupFunctionArgumentBitRatio=null,this.triggerImplyArgumentType=null,this.triggerImplyArgumentBitRatio=null,this.onNestedFunction=null,this.onFunctionCall=null,this.optimizeFloatMemory=null,this.precision=null,this.loopMaxIterations=null,this.argumentNames="string"==typeof this.source?i.getArgumentNamesFromString(this.source):null,this.argumentTypes=[],this.argumentSizes=[],this.argumentBitRatios=null,this.returnType=null,this.output=[],this.plugins=null,this.leadingReturnStatement=null,this.followingReturnStatement=null,this.dynamicOutput=null,this.dynamicArguments=null,this.strictTypingChecking=!1,this.fixIntegerDivisionAccuracy=null,e)for(const t in e)e.hasOwnProperty(t)&&this.hasOwnProperty(t)&&(this[t]=e[t]);this.literalTypes={},this.validate(),this._string=null,this._internalVariableNames={}}validate(){if("string"!=typeof this.source&&!this.ast)throw new Error("this.source not a string");if(!this.ast&&!i.isFunctionString(this.source))throw new Error("this.source not a function string");if(!this.name)throw new Error("this.name could not be set");if(this.argumentTypes.length>0&&this.argumentTypes.length!==this.argumentNames.length)throw new Error(`argumentTypes count of ${this.argumentTypes.length} exceeds ${this.argumentNames.length}`);if(this.output.length<1)throw new Error("this.output is not big enough")}isIdentifierConstant(t){return!!this.constants&&this.constants.hasOwnProperty(t)}isInput(t){return"Input"===this.argumentTypes[this.argumentNames.indexOf(t)]}pushState(t){this.states.push(t)}popState(t){if(this.state!==t)throw new Error(`Cannot popState ${t} when in ${this.state}`);this.states.pop()}isState(t){return this.state===t}get state(){return this.states[this.states.length-1]}astMemberExpressionUnroll(t){if("Identifier"===t.type)return t.name;if("ThisExpression"===t.type)return"this";if("MemberExpression"===t.type&&t.object&&t.property)return t.object.hasOwnProperty("name")&&"Math"!==t.object.name?this.astMemberExpressionUnroll(t.property):this.astMemberExpressionUnroll(t.object)+"."+this.astMemberExpressionUnroll(t.property);if(t.hasOwnProperty("expressions")){const e=t.expressions[0];if("Literal"===e.type&&0===e.value&&2===t.expressions.length)return this.astMemberExpressionUnroll(t.expressions[1])}throw this.astErrorOutput("Unknown astMemberExpressionUnroll",t)}getJsAST(t){if(this.ast)return this.ast;if("object"==typeof this.source)return this.traceFunctionAST(this.source),this.ast=this.source;if(null===(t=t||n))throw new Error("Missing JS to AST parser");const e=Object.freeze(t.parse(`const parser_${this.name} = ${this.source};`,{locations:!0})),r=e.body[0].declarations[0].init;if(this.traceFunctionAST(r),!e)throw new Error("Failed to parse JS code");return this.ast=r}traceFunctionAST(t){const{contexts:e,declarations:r,functions:n,identifiers:i,functionCalls:a}=new s(t);this.contexts=e,this.identifiers=i,this.functionCalls=a,this.functions=n;for(let t=0;t<r.length;t++){const e=r[t],{ast:n,inForLoopInit:i,inForLoopTest:s}=e,{init:a}=n,o=this.getDependencies(a);let u=null;if(i&&s)u="Integer";else if(a){const t=this.getType(a);switch(t){case"Integer":case"Float":case"Number":u="MemberExpression"===a.type?t:"Number";break;case"LiteralInteger":u="Number";break;default:u=t}}e.valueType=u,e.dependencies=o,e.isSafe=this.isSafeDependencies(o)}for(let t=0;t<n.length;t++)this.onNestedFunction(n[t],this.source)}getDeclaration(t){for(let e=0;e<this.identifiers.length;e++){const r=this.identifiers[e];if(t===r.ast)return r.declaration}return null}getVariableType(t){if("Identifier"!==t.type)throw new Error(`ast of ${t.type} not "Identifier"`);let e=null;const r=this.argumentNames.indexOf(t.name);if(-1===r){const e=this.getDeclaration(t);if(e)return e.valueType}else{const t=this.argumentTypes[r];t&&(e=t)}if(!e&&this.strictTypingChecking)throw new Error(`Declaration of ${name} not found`);return e}getLookupType(t){if(!a.hasOwnProperty(t))throw new Error(`unknown typeLookupMap ${t}`);return a[t]}getConstantType(t){if(this.constantTypes[t]){const e=this.constantTypes[t];return"Float"===e?"Number":e}throw new Error(`Type for constant "${t}" not declared`)}toString(){return this._string?this._string:this._string=this.astGeneric(this.getJsAST(),[]).join("").trim()}toJSON(){const t={source:this.source,name:this.name,constants:this.constants,constantTypes:this.constantTypes,isRootKernel:this.isRootKernel,isSubKernel:this.isSubKernel,debug:this.debug,output:this.output,loopMaxIterations:this.loopMaxIterations,argumentNames:this.argumentNames,argumentTypes:this.argumentTypes,argumentSizes:this.argumentSizes,returnType:this.returnType,leadingReturnStatement:this.leadingReturnStatement,followingReturnStatement:this.followingReturnStatement};return{ast:this.ast,settings:t}}getType(t){if(Array.isArray(t))return this.getType(t[t.length-1]);switch(t.type){case"BlockStatement":return this.getType(t.body);case"ArrayExpression":switch(this.getType(t.elements[0])){case"Array(2)":case"Array(3)":case"Array(4)":return`Matrix(${t.elements.length})`}return`Array(${t.elements.length})`;case"Literal":const e=this.astKey(t);return this.literalTypes[e]?this.literalTypes[e]:Number.isInteger(t.value)?"LiteralInteger":!0===t.value||!1===t.value?"Boolean":"Number";case"AssignmentExpression":return this.getType(t.left);case"CallExpression":if(this.isAstMathFunction(t))return"Number";if(!t.callee||!t.callee.name){if("SequenceExpression"===t.callee.type&&t.callee.expressions[t.callee.expressions.length-1].property.name){const e=t.callee.expressions[t.callee.expressions.length-1].property.name;return this.inferArgumentTypesIfNeeded(e,t.arguments),this.lookupReturnType(e,t,this)}if("this.color"===this.getVariableSignature(t.callee,!0))return null;if("MemberExpression"===t.callee.type&&t.callee.object&&t.callee.property&&t.callee.property.name&&t.arguments){const e=t.callee.property.name;return this.inferArgumentTypesIfNeeded(e,t.arguments),this.lookupReturnType(e,t,this)}throw this.astErrorOutput("Unknown call expression",t)}if(t.callee&&t.callee.name){const e=t.callee.name;return this.inferArgumentTypesIfNeeded(e,t.arguments),this.lookupReturnType(e,t,this)}throw this.astErrorOutput(`Unhandled getType Type "${t.type}"`,t);case"LogicalExpression":return"Boolean";case"BinaryExpression":switch(t.operator){case"%":case"/":if(this.fixIntegerDivisionAccuracy)return"Number";break;case">":case"<":return"Boolean";case"&":case"|":case"^":case"<<":case">>":case">>>":return"Integer"}const r=this.getType(t.left);if(this.isState("skip-literal-correction"))return r;if("LiteralInteger"===r){const e=this.getType(t.right);return"LiteralInteger"===e?t.left.value%1==0?"Integer":"Float":e}return a[r]||r;case"UpdateExpression":case"ReturnStatement":return this.getType(t.argument);case"UnaryExpression":return"~"===t.operator?"Integer":this.getType(t.argument);case"VariableDeclaration":{const e=t.declarations;let r;for(let t=0;t<e.length;t++){const n=e[t];r=this.getType(n)}if(!r)throw this.astErrorOutput("Unable to find type for declaration",t);return r}case"VariableDeclarator":const n=this.getDeclaration(t.id);if(!n)throw this.astErrorOutput("Unable to find declarator",t);if(!n.valueType)throw this.astErrorOutput("Unable to find declarator valueType",t);return n.valueType;case"Identifier":if("Infinity"===t.name)return"Number";if(this.isAstVariable(t)&&"value"===this.getVariableSignature(t))return this.getCheckVariableType(t);const i=this.findIdentifierOrigin(t);return i&&i.init?this.getType(i.init):null;case"MemberExpression":if(this.isAstMathFunction(t)){switch(t.property.name){case"ceil":case"floor":case"round":return"Integer"}return"Number"}if(this.isAstVariable(t)){switch(this.getVariableSignature(t)){case"value[]":return this.getLookupType(this.getCheckVariableType(t.object));case"value[][]":return this.getLookupType(this.getCheckVariableType(t.object.object));case"value[][][]":return this.getLookupType(this.getCheckVariableType(t.object.object.object));case"value[][][][]":return this.getLookupType(this.getCheckVariableType(t.object.object.object.object));case"value.thread.value":case"this.thread.value":return"Integer";case"this.output.value":return this.dynamicOutput?"Integer":"LiteralInteger";case"this.constants.value":return this.getConstantType(t.property.name);case"this.constants.value[]":return this.getLookupType(this.getConstantType(t.object.property.name));case"this.constants.value[][]":return this.getLookupType(this.getConstantType(t.object.object.property.name));case"this.constants.value[][][]":return this.getLookupType(this.getConstantType(t.object.object.object.property.name));case"this.constants.value[][][][]":return this.getLookupType(this.getConstantType(t.object.object.object.object.property.name));case"fn()[]":case"fn()[][]":case"fn()[][][]":return this.getLookupType(this.getType(t.object));case"value.value":if(this.isAstMathVariable(t))return"Number";switch(t.property.name){case"r":case"g":case"b":case"a":return this.getLookupType(this.getCheckVariableType(t.object))}case"[][]":return"Number"}throw this.astErrorOutput("Unhandled getType MemberExpression",t)}throw this.astErrorOutput("Unhandled getType MemberExpression",t);case"ConditionalExpression":case"IfStatement":return this.getType(t.consequent);case"FunctionDeclaration":case"FunctionExpression":const s=this.findLastReturn(t.body);return s?this.getType(s):null;case"SequenceExpression":return this.getType(t.expressions[t.expressions.length-1]);default:throw this.astErrorOutput(`Unhandled getType Type "${t.type}"`,t)}}getCheckVariableType(t){const e=this.getVariableType(t);if(!e)throw this.astErrorOutput(`${t.type} is not defined`,t);return e}inferArgumentTypesIfNeeded(t,e){for(let r=0;r<e.length;r++){if(!this.needsArgumentType(t,r))continue;const n=this.getType(e[r]);if(!n)throw this.astErrorOutput(`Unable to infer argument ${r}`,e[r]);this.assignArgumentType(t,r,n)}}isAstMathVariable(t){return"MemberExpression"===t.type&&t.object&&"Identifier"===t.object.type&&"Math"===t.object.name&&t.property&&"Identifier"===t.property.type&&["E","PI","SQRT2","SQRT1_2","LN2","LN10","LOG2E","LOG10E"].indexOf(t.property.name)>-1}isAstMathFunction(t){return"CallExpression"===t.type&&t.callee&&"MemberExpression"===t.callee.type&&t.callee.object&&"Identifier"===t.callee.object.type&&"Math"===t.callee.object.name&&t.callee.property&&"Identifier"===t.callee.property.type&&["abs","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","clz32","cos","cosh","expm1","exp","floor","fround","imul","log","log2","log10","log1p","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc"].indexOf(t.callee.property.name)>-1}isAstVariable(t){return"Identifier"===t.type||"MemberExpression"===t.type}isSafe(t){return this.isSafeDependencies(this.getDependencies(t))}isSafeDependencies(t){return!t||!t.every||t.every((t=>t.isSafe))}getDependencies(t,e,r){if(e||(e=[]),!t)return null;if(Array.isArray(t)){for(let n=0;n<t.length;n++)this.getDependencies(t[n],e,r);return e}switch(t.type){case"AssignmentExpression":return this.getDependencies(t.left,e,r),this.getDependencies(t.right,e,r),e;case"ConditionalExpression":return this.getDependencies(t.test,e,r),this.getDependencies(t.alternate,e,r),this.getDependencies(t.consequent,e,r),e;case"Literal":e.push({origin:"literal",value:t.value,isSafe:!0!==r&&t.value>-1/0&&t.value<1/0&&!isNaN(t.value)});break;case"VariableDeclarator":return this.getDependencies(t.init,e,r);case"Identifier":const n=this.getDeclaration(t);if(n)e.push({name:t.name,origin:"declaration",isSafe:!r&&this.isSafeDependencies(n.dependencies)});else if(this.argumentNames.indexOf(t.name)>-1)e.push({name:t.name,origin:"argument",isSafe:!1});else if(this.strictTypingChecking)throw new Error(`Cannot find identifier origin "${t.name}"`);break;case"FunctionDeclaration":return this.getDependencies(t.body.body[t.body.body.length-1],e,r);case"ReturnStatement":return this.getDependencies(t.argument,e);case"BinaryExpression":case"LogicalExpression":return r="/"===t.operator||"*"===t.operator,this.getDependencies(t.left,e,r),this.getDependencies(t.right,e,r),e;case"UnaryExpression":case"UpdateExpression":return this.getDependencies(t.argument,e,r);case"VariableDeclaration":return this.getDependencies(t.declarations,e,r);case"ArrayExpression":return e.push({origin:"declaration",isSafe:!0}),e;case"CallExpression":return e.push({origin:"function",isSafe:!0}),e;case"MemberExpression":const i=this.getMemberExpressionDetails(t);switch(i.signature){case"value[]":this.getDependencies(t.object,e,r);break;case"value[][]":this.getDependencies(t.object.object,e,r);break;case"value[][][]":this.getDependencies(t.object.object.object,e,r);break;case"this.output.value":this.dynamicOutput&&e.push({name:i.name,origin:"output",isSafe:!1})}if(i)return i.property&&this.getDependencies(i.property,e,r),i.xProperty&&this.getDependencies(i.xProperty,e,r),i.yProperty&&this.getDependencies(i.yProperty,e,r),i.zProperty&&this.getDependencies(i.zProperty,e,r),e;case"SequenceExpression":return this.getDependencies(t.expressions,e,r);default:throw this.astErrorOutput(`Unhandled type ${t.type} in getDependencies`,t)}return e}getVariableSignature(t,e){if(!this.isAstVariable(t))throw new Error(`ast of type "${t.type}" is not a variable signature`);if("Identifier"===t.type)return"value";const r=[];for(;t;)t.computed?r.push("[]"):"ThisExpression"===t.type?r.unshift("this"):t.property&&t.property.name?"x"===t.property.name||"y"===t.property.name||"z"===t.property.name?r.unshift(e?"."+t.property.name:".value"):"constants"===t.property.name||"thread"===t.property.name||"output"===t.property.name?r.unshift("."+t.property.name):r.unshift(e?"."+t.property.name:".value"):t.name?r.unshift(e?t.name:"value"):t.callee&&t.callee.name?r.unshift(e?t.callee.name+"()":"fn()"):t.elements?r.unshift("[]"):r.unshift("unknown"),t=t.object;const n=r.join("");return e||["value","value[]","value[][]","value[][][]","value[][][][]","value.value","value.thread.value","this.thread.value","this.output.value","this.constants.value","this.constants.value[]","this.constants.value[][]","this.constants.value[][][]","this.constants.value[][][][]","fn()[]","fn()[][]","fn()[][][]","[][]"].indexOf(n)>-1?n:null}build(){return this.toString().length>0}astGeneric(t,e){if(null===t)throw this.astErrorOutput("NULL ast",t);if(Array.isArray(t)){for(let r=0;r<t.length;r++)this.astGeneric(t[r],e);return e}switch(t.type){case"FunctionDeclaration":return this.astFunctionDeclaration(t,e);case"FunctionExpression":return this.astFunctionExpression(t,e);case"ReturnStatement":return this.astReturnStatement(t,e);case"Literal":return this.astLiteral(t,e);case"BinaryExpression":return this.astBinaryExpression(t,e);case"Identifier":return this.astIdentifierExpression(t,e);case"AssignmentExpression":return this.astAssignmentExpression(t,e);case"ExpressionStatement":return this.astExpressionStatement(t,e);case"EmptyStatement":return this.astEmptyStatement(t,e);case"BlockStatement":return this.astBlockStatement(t,e);case"IfStatement":return this.astIfStatement(t,e);case"SwitchStatement":return this.astSwitchStatement(t,e);case"BreakStatement":return this.astBreakStatement(t,e);case"ContinueStatement":return this.astContinueStatement(t,e);case"ForStatement":return this.astForStatement(t,e);case"WhileStatement":return this.astWhileStatement(t,e);case"DoWhileStatement":return this.astDoWhileStatement(t,e);case"VariableDeclaration":return this.astVariableDeclaration(t,e);case"VariableDeclarator":return this.astVariableDeclarator(t,e);case"ThisExpression":return this.astThisExpression(t,e);case"SequenceExpression":return this.astSequenceExpression(t,e);case"UnaryExpression":return this.astUnaryExpression(t,e);case"UpdateExpression":return this.astUpdateExpression(t,e);case"LogicalExpression":return this.astLogicalExpression(t,e);case"MemberExpression":return this.astMemberExpression(t,e);case"CallExpression":return this.astCallExpression(t,e);case"ArrayExpression":return this.astArrayExpression(t,e);case"DebuggerStatement":return this.astDebuggerStatement(t,e);case"ConditionalExpression":return this.astConditionalExpression(t,e)}throw this.astErrorOutput("Unknown ast type : "+t.type,t)}astErrorOutput(t,e){if("string"!=typeof this.source)return new Error(t);const r=i.getAstString(this.source,e),n=this.source.substr(e.start).split(/\n/),s=n.length>0?n[n.length-1]:0;return new Error(`${t} on line ${n.length}, position ${s.length}:\n ${r}`)}astDebuggerStatement(t,e){return e}astConditionalExpression(t,e){if("ConditionalExpression"!==t.type)throw this.astErrorOutput("Not a conditional expression",t);return e.push("("),this.astGeneric(t.test,e),e.push("?"),this.astGeneric(t.consequent,e),e.push(":"),this.astGeneric(t.alternate,e),e.push(")"),e}astFunction(t,e){throw new Error(`"astFunction" not defined on ${this.constructor.name}`)}astFunctionDeclaration(t,e){return this.isChildFunction(t)?e:this.astFunction(t,e)}astFunctionExpression(t,e){return this.isChildFunction(t)?e:this.astFunction(t,e)}isChildFunction(t){for(let e=0;e<this.functions.length;e++)if(this.functions[e]===t)return!0;return!1}astReturnStatement(t,e){return e}astLiteral(t,e){return this.literalTypes[this.astKey(t)]="Number",e}astBinaryExpression(t,e){return e}astIdentifierExpression(t,e){return e}astAssignmentExpression(t,e){return e}astExpressionStatement(t,e){return this.astGeneric(t.expression,e),e.push(";"),e}astEmptyStatement(t,e){return e}astBlockStatement(t,e){return e}astIfStatement(t,e){return e}astSwitchStatement(t,e){return e}astBreakStatement(t,e){return e.push("break;"),e}astContinueStatement(t,e){return e.push("continue;\n"),e}astForStatement(t,e){return e}astWhileStatement(t,e){return e}astDoWhileStatement(t,e){return e}astVariableDeclarator(t,e){return this.astGeneric(t.id,e),null!==t.init&&(e.push("="),this.astGeneric(t.init,e)),e}astThisExpression(t,e){return e}astSequenceExpression(t,e){const{expressions:r}=t,n=[];for(let t=0;t<r.length;t++){const e=r[t],i=[];this.astGeneric(e,i),n.push(i.join(""))}return n.length>1?e.push("(",n.join(","),")"):e.push(n[0]),e}astUnaryExpression(t,e){return this.checkAndUpconvertBitwiseUnary(t,e)||(t.prefix?(e.push(t.operator),this.astGeneric(t.argument,e)):(this.astGeneric(t.argument,e),e.push(t.operator))),e}checkAndUpconvertBitwiseUnary(t,e){}astUpdateExpression(t,e){return t.prefix?(e.push(t.operator),this.astGeneric(t.argument,e)):(this.astGeneric(t.argument,e),e.push(t.operator)),e}astLogicalExpression(t,e){return e.push("("),this.astGeneric(t.left,e),e.push(t.operator),this.astGeneric(t.right,e),e.push(")"),e}astMemberExpression(t,e){return e}astCallExpression(t,e){return e}astArrayExpression(t,e){return e}getMemberExpressionDetails(t){if("MemberExpression"!==t.type)throw this.astErrorOutput(`Expression ${t.type} not a MemberExpression`,t);let e=null,r=null;const n=this.getVariableSignature(t);switch(n){case"value":return null;case"value.thread.value":case"this.thread.value":case"this.output.value":return{signature:n,type:"Integer",name:t.property.name};case"value[]":if("string"!=typeof t.object.name)throw this.astErrorOutput("Unexpected expression",t);return e=t.object.name,{name:e,origin:"user",signature:n,type:this.getVariableType(t.object),xProperty:t.property};case"value[][]":if("string"!=typeof t.object.object.name)throw this.astErrorOutput("Unexpected expression",t);return e=t.object.object.name,{name:e,origin:"user",signature:n,type:this.getVariableType(t.object.object),yProperty:t.object.property,xProperty:t.property};case"value[][][]":if("string"!=typeof t.object.object.object.name)throw this.astErrorOutput("Unexpected expression",t);return e=t.object.object.object.name,{name:e,origin:"user",signature:n,type:this.getVariableType(t.object.object.object),zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"value[][][][]":if("string"!=typeof t.object.object.object.object.name)throw this.astErrorOutput("Unexpected expression",t);return e=t.object.object.object.object.name,{name:e,origin:"user",signature:n,type:this.getVariableType(t.object.object.object.object),zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"value.value":if("string"!=typeof t.property.name)throw this.astErrorOutput("Unexpected expression",t);if(this.isAstMathVariable(t))return e=t.property.name,{name:e,origin:"Math",type:"Number",signature:n};switch(t.property.name){case"r":case"g":case"b":case"a":return e=t.object.name,{name:e,property:t.property.name,origin:"user",signature:n,type:"Number"};default:throw this.astErrorOutput("Unexpected expression",t)}case"this.constants.value":if("string"!=typeof t.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.property.name,r=this.getConstantType(e),!r)throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n};case"this.constants.value[]":if("string"!=typeof t.object.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.object.property.name,r=this.getConstantType(e),!r)throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n,xProperty:t.property};case"this.constants.value[][]":if("string"!=typeof t.object.object.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.object.object.property.name,r=this.getConstantType(e),!r)throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n,yProperty:t.object.property,xProperty:t.property};case"this.constants.value[][][]":if("string"!=typeof t.object.object.object.property.name)throw this.astErrorOutput("Unexpected expression",t);if(e=t.object.object.object.property.name,r=this.getConstantType(e),!r)throw this.astErrorOutput("Constant has no type",t);return{name:e,type:r,origin:"constants",signature:n,zProperty:t.object.object.property,yProperty:t.object.property,xProperty:t.property};case"fn()[]":case"fn()[][]":case"[][]":return{signature:n,property:t.property};default:throw this.astErrorOutput("Unexpected expression",t)}}findIdentifierOrigin(t){const e=[this.ast];for(;e.length>0;){const r=e[0];if("VariableDeclarator"===r.type&&r.id&&r.id.name&&r.id.name===t.name)return r;if(e.shift(),r.argument)e.push(r.argument);else if(r.body)e.push(r.body);else if(r.declarations)e.push(r.declarations);else if(Array.isArray(r))for(let t=0;t<r.length;t++)e.push(r[t])}return null}findLastReturn(t){const e=[t||this.ast];for(;e.length>0;){const t=e.pop();if("ReturnStatement"===t.type)return t;if("FunctionDeclaration"!==t.type)if(t.argument)e.push(t.argument);else if(t.body)e.push(t.body);else if(t.declarations)e.push(t.declarations);else if(Array.isArray(t))for(let r=0;r<t.length;r++)e.push(t[r]);else t.consequent?e.push(t.consequent):t.cases&&e.push(t.cases)}return null}getInternalVariableName(t){return this._internalVariableNames.hasOwnProperty(t)||(this._internalVariableNames[t]=0),this._internalVariableNames[t]++,1===this._internalVariableNames[t]?t:t+this._internalVariableNames[t]}astKey(t,e=","){if(!t.start||!t.end)throw new Error("AST start and end needed");return`${t.start}${e}${t.end}`}}}},{"../utils":114,"./function-tracer":11,acorn:1}],11:[function(t,e,r){const{utils:n}=t("../utils");function i(t){return t.length>0?t[t.length-1]:null}const s="trackIdentifiers",a="memberExpression",o="inForLoopInit";e.exports={FunctionTracer:class{constructor(t){this.runningContexts=[],this.functionContexts=[],this.contexts=[],this.functionCalls=[],this.declarations=[],this.identifiers=[],this.functions=[],this.returnStatements=[],this.trackedIdentifiers=null,this.states=[],this.newFunctionContext(),this.scan(t)}isState(t){return this.states[this.states.length-1]===t}hasState(t){return this.states.indexOf(t)>-1}pushState(t){this.states.push(t)}popState(t){if(!this.isState(t))throw new Error(`Cannot pop the non-active state "${t}"`);this.states.pop()}get currentFunctionContext(){return i(this.functionContexts)}get currentContext(){return i(this.runningContexts)}newFunctionContext(){const t={"@contextType":"function"};this.contexts.push(t),this.functionContexts.push(t)}newContext(t){const e=Object.assign({"@contextType":"const/let"},this.currentContext);this.contexts.push(e),this.runningContexts.push(e),t();const{currentFunctionContext:r}=this;for(const t in r)r.hasOwnProperty(t)&&!e.hasOwnProperty(t)&&(e[t]=r[t]);return this.runningContexts.pop(),e}useFunctionContext(t){const e=i(this.functionContexts);this.runningContexts.push(e),t(),this.runningContexts.pop()}getIdentifiers(t){const e=this.trackedIdentifiers=[];return this.pushState(s),t(),this.trackedIdentifiers=null,this.popState(s),e}getDeclaration(t){const{currentContext:e,currentFunctionContext:r,runningContexts:n}=this,i=e[t]||r[t]||null;if(!i&&e===r&&n.length>0){const e=n[n.length-2];if(e[t])return e[t]}return i}scan(t){if(t)if(Array.isArray(t))for(let e=0;e<t.length;e++)this.scan(t[e]);else switch(t.type){case"Program":this.useFunctionContext((()=>{this.scan(t.body)}));break;case"BlockStatement":this.newContext((()=>{this.scan(t.body)}));break;case"AssignmentExpression":case"LogicalExpression":case"BinaryExpression":this.scan(t.left),this.scan(t.right);break;case"UpdateExpression":if("++"===t.operator){const e=this.getDeclaration(t.argument.name);e&&(e.suggestedType="Integer")}this.scan(t.argument);break;case"UnaryExpression":this.scan(t.argument);break;case"VariableDeclaration":"var"===t.kind?this.useFunctionContext((()=>{t.declarations=n.normalizeDeclarations(t),this.scan(t.declarations)})):(t.declarations=n.normalizeDeclarations(t),this.scan(t.declarations));break;case"VariableDeclarator":{const{currentContext:e}=this,r=this.hasState(o),n={ast:t,context:e,name:t.id.name,origin:"declaration",inForLoopInit:r,inForLoopTest:null,assignable:e===this.currentFunctionContext||!r&&!e.hasOwnProperty(t.id.name),suggestedType:null,valueType:null,dependencies:null,isSafe:null};e[t.id.name]||(e[t.id.name]=n),this.declarations.push(n),this.scan(t.id),this.scan(t.init);break}case"FunctionExpression":case"FunctionDeclaration":0===this.runningContexts.length?this.scan(t.body):this.functions.push(t);break;case"IfStatement":this.scan(t.test),this.scan(t.consequent),t.alternate&&this.scan(t.alternate);break;case"ForStatement":{let e;const r=this.newContext((()=>{this.pushState(o),this.scan(t.init),this.popState(o),e=this.getIdentifiers((()=>{this.scan(t.test)})),this.scan(t.update),this.newContext((()=>{this.scan(t.body)}))}));if(e)for(const t in r)"@contextType"!==t&&e.indexOf(t)>-1&&(r[t].inForLoopTest=!0);break}case"DoWhileStatement":case"WhileStatement":this.newContext((()=>{this.scan(t.body),this.scan(t.test)}));break;case"Identifier":this.isState(s)&&this.trackedIdentifiers.push(t.name),this.identifiers.push({context:this.currentContext,declaration:this.getDeclaration(t.name),ast:t});break;case"ReturnStatement":this.returnStatements.push(t),this.scan(t.argument);break;case"MemberExpression":this.pushState(a),this.scan(t.object),this.scan(t.property),this.popState(a);break;case"ExpressionStatement":this.scan(t.expression);break;case"SequenceExpression":this.scan(t.expressions);break;case"CallExpression":this.functionCalls.push({context:this.currentContext,ast:t}),this.scan(t.arguments);break;case"ArrayExpression":this.scan(t.elements);break;case"ConditionalExpression":this.scan(t.test),this.scan(t.alternate),this.scan(t.consequent);break;case"SwitchStatement":this.scan(t.discriminant),this.scan(t.cases);break;case"SwitchCase":this.scan(t.test),this.scan(t.consequent);break;case"ThisExpression":case"Literal":case"DebuggerStatement":case"EmptyStatement":case"BreakStatement":case"ContinueStatement":break;default:throw new Error(`unhandled type "${t.type}"`)}}}}},{"../utils":114}],12:[function(t,e,r){const{glWiretap:n}=t("gl-wiretap"),{utils:i}=t("../../utils");function s(t){return t.toString().replace("=>","").replace(/^function /,"").replace(/utils[.]/g,"/*utils.*/")}function a(t,e){const r="single"===e.precision?t:`new Float32Array(${t}.buffer)`;return e.output[2]?`renderOutput(${r}, ${e.output[0]}, ${e.output[1]}, ${e.output[2]})`:e.output[1]?`renderOutput(${r}, ${e.output[0]}, ${e.output[1]})`:`renderOutput(${r}, ${e.output[0]})`}function o(t,e,r){const n=t.toArray.toString(),s=!/^function/.test(n);return`() => {\n  function framebuffer() { return ${r}; };\n  ${i.flattenFunctionToString(`${s?"function ":""}${n}`,{findDependency:(e,r)=>{if("utils"===e)return`const ${r} = ${i[r].toString()};`;if("this"===e)return"framebuffer"===r?"":`${s?"function ":""}${t[r].toString()}`;throw new Error("unhandled fromObject")},thisLookup:(r,n)=>{if("texture"===r)return e;if("context"===r)return n?null:"gl";if(t.hasOwnProperty(r))return JSON.stringify(t[r]);throw new Error(`unhandled thisLookup ${r}`)}})}\n  return toArray();\n  }`}function u(t,e,r,n,i){if(null===t)return null;if(null===e)return null;switch(typeof t){case"boolean":case"number":return null}if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)for(let i=0;i<e.length;i++){const s=e[i];if("HTMLImageArray"!==s.type&&s)continue;if(s.uploadValue!==t)continue;const a=r[i].indexOf(t);if(-1===a)continue;const o=`uploadValue_${s.name}[${a}]`;return n.insertVariable(o,t),o}for(let r=0;r<e.length;r++){const i=e[r];if(t!==i.uploadValue)continue;const s=`uploadValue_${i.name}`;return n.insertVariable(s,i),s}return null}e.exports={glKernelString:function(t,e,r,h,l){r.built||r.build.apply(r,e),e=e?Array.from(e).map((t=>{switch(typeof t){case"boolean":return new Boolean(t);case"number":return new Number(t);default:return t}})):null;const c=[],p=n(r.context,{useTrackablePrimitives:!0,onReadPixels:t=>{if(F.subKernels){if(d){const e=F.subKernels[g++].property;c.push(`    result${isNaN(e)?"."+e:`[${e}]`} = ${a(t,F)};`)}else c.push(`    const result = { result: ${a(t,F)} };`),d=!0;g===F.subKernels.length&&c.push("    return result;")}else t?c.push(`    return ${a(t,F)};`):c.push("    return null;")},onUnrecognizedArgumentLookup:t=>{const e=u(t,F.kernelArguments,[],p);return e||(u(t,F.kernelConstants,T?Object.keys(T).map((t=>T[t])):[],p)||null)}});let d=!1,g=0;const{source:f,canvas:m,output:y,pipeline:x,graphical:b,loopMaxIterations:w,constants:T,optimizeFloatMemory:v,precision:S,fixIntegerDivisionAccuracy:A,functions:_,nativeFunctions:k,subKernels:E,immutable:L,argumentTypes:I,constantTypes:D,kernelArguments:$,kernelConstants:O,tactic:C}=r,F=new t(f,{canvas:m,context:p,checkContext:!1,output:y,pipeline:x,graphical:b,loopMaxIterations:w,constants:T,optimizeFloatMemory:v,precision:S,fixIntegerDivisionAccuracy:A,functions:_,nativeFunctions:k,subKernels:E,immutable:L,argumentTypes:I,constantTypes:D,tactic:C});let R=[];if(p.setIndent(2),F.build.apply(F,e),R.push(p.toString()),p.reset(),F.kernelArguments.forEach(((t,r)=>{switch(t.type){case"Integer":case"Boolean":case"Number":case"Float":case"Array":case"Array(2)":case"Array(3)":case"Array(4)":case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":case"Input":p.insertVariable(`uploadValue_${t.name}`,t.uploadValue);break;case"HTMLImageArray":for(let n=0;n<e[r].length;n++){const i=e[r];p.insertVariable(`uploadValue_${t.name}[${n}]`,i[n])}break;case"MemoryOptimizedNumberTexture":case"NumberTexture":case"Array1D(2)":case"Array1D(3)":case"Array1D(4)":case"Array2D(2)":case"Array2D(3)":case"Array2D(4)":case"Array3D(2)":case"Array3D(3)":case"Array3D(4)":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":p.insertVariable(`uploadValue_${t.name}`,e[r].texture);break;default:throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${t.type}`)}})),R.push("/** start of injected functions **/"),R.push(`function ${s(i.flattenTo)}`),R.push(`function ${s(i.flatten2dArrayTo)}`),R.push(`function ${s(i.flatten3dArrayTo)}`),R.push(`function ${s(i.flatten4dArrayTo)}`),R.push(`function ${s(i.isArray)}`),F.renderOutput!==F.renderTexture&&F.formatValues&&R.push(`  const renderOutput = function ${s(F.formatValues)};`),R.push("/** end of injected functions **/"),R.push(`  const innerKernel = function (${F.kernelArguments.map((t=>t.varName)).join(", ")}) {`),p.setIndent(4),F.run.apply(F,e),F.renderKernels?F.renderKernels():F.renderOutput&&F.renderOutput(),R.push("    /** start setup uploads for kernel values **/"),F.kernelArguments.forEach((t=>{R.push("    "+t.getStringValueHandler().split("\n").join("\n    "))})),R.push("    /** end setup uploads for kernel values **/"),R.push(p.toString()),F.renderOutput===F.renderTexture){p.reset();const t=p.getContextVariableName(F.framebuffer);if(F.renderKernels){const e=F.renderKernels(),r=p.getContextVariableName(F.texture.texture);R.push(`    return {\n      result: {\n        texture: ${r},\n        type: '${e.result.type}',\n        toArray: ${o(e.result,r,t)}\n      },`);const{subKernels:n,mappedTextures:i}=F;for(let r=0;r<n.length;r++){const s=i[r],a=n[r],u=e[a.property],h=p.getContextVariableName(s.texture);R.push(`\n      ${a.property}: {\n        texture: ${h},\n        type: '${u.type}',\n        toArray: ${o(u,h,t)}\n      },`)}R.push("    };")}else{const e=F.renderOutput(),r=p.getContextVariableName(F.texture.texture);R.push(`    return {\n        texture: ${r},\n        type: '${e.type}',\n        toArray: ${o(e,r,t)}\n      };`)}}R.push("    "+(l?"\n"+l+"    ":"")),R.push(c.join("\n")),R.push("  };"),F.graphical&&(R.push(function(t){const e=t.getPixels.toString(),r=!/^function/.test(e);return i.flattenFunctionToString(`${r?"function ":""}${e}`,{findDependency:(t,e)=>"utils"===t?`const ${e} = ${i[e].toString()};`:null,thisLookup:e=>{if("context"===e)return null;if(t.hasOwnProperty(e))return JSON.stringify(t[e]);throw new Error(`unhandled thisLookup ${e}`)}})}(F)),R.push("  innerKernel.getPixels = getPixels;")),R.push("  return innerKernel;");let z=[];return O.forEach((t=>{z.push(`${t.getStringValueHandler()}`)})),`function kernel(settings) {\n  const { context, constants } = settings;\n  ${z.join("")}\n  ${h||""}\n${R.join("\n")}\n}`}}},{"../../utils":114,"gl-wiretap":3}],13:[function(t,e,r){const{Kernel:n}=t("../kernel"),{utils:i}=t("../../utils"),{GLTextureArray2Float:s}=t("./texture/array-2-float"),{GLTextureArray2Float2D:a}=t("./texture/array-2-float-2d"),{GLTextureArray2Float3D:o}=t("./texture/array-2-float-3d"),{GLTextureArray3Float:u}=t("./texture/array-3-float"),{GLTextureArray3Float2D:h}=t("./texture/array-3-float-2d"),{GLTextureArray3Float3D:l}=t("./texture/array-3-float-3d"),{GLTextureArray4Float:c}=t("./texture/array-4-float"),{GLTextureArray4Float2D:p}=t("./texture/array-4-float-2d"),{GLTextureArray4Float3D:d}=t("./texture/array-4-float-3d"),{GLTextureFloat:g}=t("./texture/float"),{GLTextureFloat2D:f}=t("./texture/float-2d"),{GLTextureFloat3D:m}=t("./texture/float-3d"),{GLTextureMemoryOptimized:y}=t("./texture/memory-optimized"),{GLTextureMemoryOptimized2D:x}=t("./texture/memory-optimized-2d"),{GLTextureMemoryOptimized3D:b}=t("./texture/memory-optimized-3d"),{GLTextureUnsigned:w}=t("./texture/unsigned"),{GLTextureUnsigned2D:T}=t("./texture/unsigned-2d"),{GLTextureUnsigned3D:v}=t("./texture/unsigned-3d"),{GLTextureGraphical:S}=t("./texture/graphical"),A={int:"Integer",float:"Number",vec2:"Array(2)",vec3:"Array(3)",vec4:"Array(4)"};e.exports={GLKernel:class extends n{static get mode(){return"gpu"}static getIsFloatRead(){const t=new this("function kernelFunction() {\n      return 1;\n    }",{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[1],precision:"single",returnType:"Number",tactic:"speed"});t.build(),t.run();const e=t.renderOutput();return t.destroy(!0),1===e[0]}static getIsIntegerDivisionAccurate(){const t=new this(function(t,e){return t[this.thread.x]/e[this.thread.x]}.toString(),{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[2],returnType:"Number",precision:"unsigned",tactic:"speed"}),e=[[6,6030401],[3,3991]];t.build.apply(t,e),t.run.apply(t,e);const r=t.renderOutput();return t.destroy(!0),2===r[0]&&1511===r[1]}static getIsSpeedTacticSupported(){const t=new this(function(t){return t[this.thread.x]}.toString(),{context:this.testContext,canvas:this.testCanvas,validate:!1,output:[4],returnType:"Number",precision:"unsigned",tactic:"speed"}),e=[[0,1,2,3]];t.build.apply(t,e),t.run.apply(t,e);const r=t.renderOutput();return t.destroy(!0),0===Math.round(r[0])&&1===Math.round(r[1])&&2===Math.round(r[2])&&3===Math.round(r[3])}static get testCanvas(){throw new Error(`"testCanvas" not defined on ${this.name}`)}static get testContext(){throw new Error(`"testContext" not defined on ${this.name}`)}static getFeatures(){const t=this.testContext,e=this.getIsDrawBuffers();return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),isSpeedTacticSupported:this.getIsSpeedTacticSupported(),isTextureFloat:this.getIsTextureFloat(),isDrawBuffers:e,kernelMap:e,channelCount:this.getChannelCount(),maxTextureSize:this.getMaxTextureSize(),lowIntPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.LOW_INT),lowFloatPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.LOW_FLOAT),mediumIntPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_INT),mediumFloatPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT),highIntPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_INT),highFloatPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT)})}static setupFeatureChecks(){throw new Error(`"setupFeatureChecks" not defined on ${this.name}`)}static getSignature(t,e){return t.getVariablePrecisionString()+(e.length>0?":"+e.join(","):"")}setFixIntegerDivisionAccuracy(t){return this.fixIntegerDivisionAccuracy=t,this}setPrecision(t){return this.precision=t,this}setFloatTextures(t){return i.warnDeprecated("method","setFloatTextures","setOptimizeFloatMemory"),this.floatTextures=t,this}static nativeFunctionArguments(t){const e=[],r=[],n=[],i=/^[a-zA-Z_]/,s=/[a-zA-Z_0-9]/;let a=0,o=null,u=null;for(;a<t.length;){const h=t[a],l=t[a+1],c=n.length>0?n[n.length-1]:null;if("FUNCTION_ARGUMENTS"!==c||"/"!==h||"*"!==l)if("MULTI_LINE_COMMENT"!==c||"*"!==h||"/"!==l)if("FUNCTION_ARGUMENTS"!==c||"/"!==h||"/"!==l)if("COMMENT"!==c||"\n"!==h)if(null!==c||"("!==h){if("FUNCTION_ARGUMENTS"===c){if(")"===h){n.pop();break}if("f"===h&&"l"===l&&"o"===t[a+2]&&"a"===t[a+3]&&"t"===t[a+4]&&" "===t[a+5]){n.push("DECLARE_VARIABLE"),u="float",o="",a+=6;continue}if("i"===h&&"n"===l&&"t"===t[a+2]&&" "===t[a+3]){n.push("DECLARE_VARIABLE"),u="int",o="",a+=4;continue}if("v"===h&&"e"===l&&"c"===t[a+2]&&"2"===t[a+3]&&" "===t[a+4]){n.push("DECLARE_VARIABLE"),u="vec2",o="",a+=5;continue}if("v"===h&&"e"===l&&"c"===t[a+2]&&"3"===t[a+3]&&" "===t[a+4]){n.push("DECLARE_VARIABLE"),u="vec3",o="",a+=5;continue}if("v"===h&&"e"===l&&"c"===t[a+2]&&"4"===t[a+3]&&" "===t[a+4]){n.push("DECLARE_VARIABLE"),u="vec4",o="",a+=5;continue}}else if("DECLARE_VARIABLE"===c){if(""===o){if(" "===h){a++;continue}if(!i.test(h))throw new Error("variable name is not expected string")}o+=h,s.test(l)||(n.pop(),r.push(o),e.push(A[u]))}a++}else n.push("FUNCTION_ARGUMENTS"),a++;else n.pop(),a++;else n.push("COMMENT"),a+=2;else n.pop(),a+=2;else n.push("MULTI_LINE_COMMENT"),a+=2}if(n.length>0)throw new Error("GLSL function was not parsable");return{argumentNames:r,argumentTypes:e}}static nativeFunctionReturnType(t){return A[t.match(/int|float|vec[2-4]/)[0]]}static combineKernels(t,e){t.apply(null,arguments);const{texSize:r,context:n,threadDim:s}=e.texSize;let a;if("single"===e.precision){const t=r[0],e=Math.ceil(r[1]/4);a=new Float32Array(t*e*4*4),n.readPixels(0,0,t,4*e,n.RGBA,n.FLOAT,a)}else{const t=new Uint8Array(r[0]*r[1]*4);n.readPixels(0,0,r[0],r[1],n.RGBA,n.UNSIGNED_BYTE,t),a=new Float32Array(t.buffer)}return a=a.subarray(0,s[0]*s[1]*s[2]),1===e.output.length?a:2===e.output.length?i.splitArray(a,e.output[0]):3===e.output.length?i.splitArray(a,e.output[0]*e.output[1]).map((function(t){return i.splitArray(t,e.output[0])})):void 0}constructor(t,e){super(t,e),this.transferValues=null,this.formatValues=null,this.TextureConstructor=null,this.renderOutput=null,this.renderRawOutput=null,this.texSize=null,this.translatedSource=null,this.compiledFragmentShader=null,this.compiledVertexShader=null,this.switchingKernels=null,this._textureSwitched=null,this._mappedTextureSwitched=null}checkTextureSize(){const{features:t}=this.constructor;if(this.texSize[0]>t.maxTextureSize||this.texSize[1]>t.maxTextureSize)throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${t.maxTextureSize},${t.maxTextureSize}]`)}translateSource(){throw new Error(`"translateSource" not defined on ${this.constructor.name}`)}pickRenderStrategy(t){if(this.graphical)return this.renderRawOutput=this.readPackedPixelsToUint8Array,this.transferValues=t=>t,this.TextureConstructor=S,null;if("unsigned"===this.precision)if(this.renderRawOutput=this.readPackedPixelsToUint8Array,this.transferValues=this.readPackedPixelsToFloat32Array,this.pipeline)switch(this.renderOutput=this.renderTexture,null!==this.subKernels&&(this.renderKernels=this.renderKernelsToTextures),this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?(this.TextureConstructor=v,null):this.output[1]>0?(this.TextureConstructor=T,null):(this.TextureConstructor=w,null);case"Array(2)":case"Array(3)":case"Array(4)":return this.requestFallback(t)}else switch(null!==this.subKernels&&(this.renderKernels=this.renderKernelsToArrays),this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.renderOutput=this.renderValues,this.output[2]>0?(this.TextureConstructor=v,this.formatValues=i.erect3DPackedFloat,null):this.output[1]>0?(this.TextureConstructor=T,this.formatValues=i.erect2DPackedFloat,null):(this.TextureConstructor=w,this.formatValues=i.erectPackedFloat,null);case"Array(2)":case"Array(3)":case"Array(4)":return this.requestFallback(t)}else{if("single"!==this.precision)throw new Error(`unhandled precision of "${this.precision}"`);if(this.renderRawOutput=this.readFloatPixelsToFloat32Array,this.transferValues=this.readFloatPixelsToFloat32Array,this.pipeline)switch(this.renderOutput=this.renderTexture,null!==this.subKernels&&(this.renderKernels=this.renderKernelsToTextures),this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.optimizeFloatMemory?this.output[2]>0?(this.TextureConstructor=b,null):this.output[1]>0?(this.TextureConstructor=x,null):(this.TextureConstructor=y,null):this.output[2]>0?(this.TextureConstructor=m,null):this.output[1]>0?(this.TextureConstructor=f,null):(this.TextureConstructor=g,null);case"Array(2)":return this.output[2]>0?(this.TextureConstructor=o,null):this.output[1]>0?(this.TextureConstructor=a,null):(this.TextureConstructor=s,null);case"Array(3)":return this.output[2]>0?(this.TextureConstructor=l,null):this.output[1]>0?(this.TextureConstructor=h,null):(this.TextureConstructor=u,null);case"Array(4)":return this.output[2]>0?(this.TextureConstructor=d,null):this.output[1]>0?(this.TextureConstructor=p,null):(this.TextureConstructor=c,null)}if(this.renderOutput=this.renderValues,null!==this.subKernels&&(this.renderKernels=this.renderKernelsToArrays),this.optimizeFloatMemory)switch(this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?(this.TextureConstructor=b,this.formatValues=i.erectMemoryOptimized3DFloat,null):this.output[1]>0?(this.TextureConstructor=x,this.formatValues=i.erectMemoryOptimized2DFloat,null):(this.TextureConstructor=y,this.formatValues=i.erectMemoryOptimizedFloat,null);case"Array(2)":return this.output[2]>0?(this.TextureConstructor=o,this.formatValues=i.erect3DArray2,null):this.output[1]>0?(this.TextureConstructor=a,this.formatValues=i.erect2DArray2,null):(this.TextureConstructor=s,this.formatValues=i.erectArray2,null);case"Array(3)":return this.output[2]>0?(this.TextureConstructor=l,this.formatValues=i.erect3DArray3,null):this.output[1]>0?(this.TextureConstructor=h,this.formatValues=i.erect2DArray3,null):(this.TextureConstructor=u,this.formatValues=i.erectArray3,null);case"Array(4)":return this.output[2]>0?(this.TextureConstructor=d,this.formatValues=i.erect3DArray4,null):this.output[1]>0?(this.TextureConstructor=p,this.formatValues=i.erect2DArray4,null):(this.TextureConstructor=c,this.formatValues=i.erectArray4,null)}else switch(this.returnType){case"LiteralInteger":case"Float":case"Number":case"Integer":return this.output[2]>0?(this.TextureConstructor=m,this.formatValues=i.erect3DFloat,null):this.output[1]>0?(this.TextureConstructor=f,this.formatValues=i.erect2DFloat,null):(this.TextureConstructor=g,this.formatValues=i.erectFloat,null);case"Array(2)":return this.output[2]>0?(this.TextureConstructor=o,this.formatValues=i.erect3DArray2,null):this.output[1]>0?(this.TextureConstructor=a,this.formatValues=i.erect2DArray2,null):(this.TextureConstructor=s,this.formatValues=i.erectArray2,null);case"Array(3)":return this.output[2]>0?(this.TextureConstructor=l,this.formatValues=i.erect3DArray3,null):this.output[1]>0?(this.TextureConstructor=h,this.formatValues=i.erect2DArray3,null):(this.TextureConstructor=u,this.formatValues=i.erectArray3,null);case"Array(4)":return this.output[2]>0?(this.TextureConstructor=d,this.formatValues=i.erect3DArray4,null):this.output[1]>0?(this.TextureConstructor=p,this.formatValues=i.erect2DArray4,null):(this.TextureConstructor=c,this.formatValues=i.erectArray4,null)}}throw new Error(`unhandled return type "${this.returnType}"`)}getKernelString(){throw new Error("abstract method call")}getMainResultTexture(){switch(this.returnType){case"LiteralInteger":case"Float":case"Integer":case"Number":return this.getMainResultNumberTexture();case"Array(2)":return this.getMainResultArray2Texture();case"Array(3)":return this.getMainResultArray3Texture();case"Array(4)":return this.getMainResultArray4Texture();default:throw new Error(`unhandled returnType type ${this.returnType}`)}}getMainResultKernelNumberTexture(){throw new Error("abstract method call")}getMainResultSubKernelNumberTexture(){throw new Error("abstract method call")}getMainResultKernelArray2Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray2Texture(){throw new Error("abstract method call")}getMainResultKernelArray3Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray3Texture(){throw new Error("abstract method call")}getMainResultKernelArray4Texture(){throw new Error("abstract method call")}getMainResultSubKernelArray4Texture(){throw new Error("abstract method call")}getMainResultGraphical(){throw new Error("abstract method call")}getMainResultMemoryOptimizedFloats(){throw new Error("abstract method call")}getMainResultPackedPixels(){throw new Error("abstract method call")}getMainResultString(){return this.graphical?this.getMainResultGraphical():"single"===this.precision?this.optimizeFloatMemory?this.getMainResultMemoryOptimizedFloats():this.getMainResultTexture():this.getMainResultPackedPixels()}getMainResultNumberTexture(){return i.linesToString(this.getMainResultKernelNumberTexture())+i.linesToString(this.getMainResultSubKernelNumberTexture())}getMainResultArray2Texture(){return i.linesToString(this.getMainResultKernelArray2Texture())+i.linesToString(this.getMainResultSubKernelArray2Texture())}getMainResultArray3Texture(){return i.linesToString(this.getMainResultKernelArray3Texture())+i.linesToString(this.getMainResultSubKernelArray3Texture())}getMainResultArray4Texture(){return i.linesToString(this.getMainResultKernelArray4Texture())+i.linesToString(this.getMainResultSubKernelArray4Texture())}getFloatTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} float;\n`}getIntTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic,!0)} int;\n`}getSampler2DTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} sampler2D;\n`}getSampler2DArrayTacticDeclaration(){return`precision ${this.getVariablePrecisionString(this.texSize,this.tactic)} sampler2DArray;\n`}renderTexture(){return this.immutable?this.texture.clone():this.texture}readPackedPixelsToUint8Array(){if("unsigned"!==this.precision)throw new Error('Requires this.precision to be "unsigned"');const{texSize:t,context:e}=this,r=new Uint8Array(t[0]*t[1]*4);return e.readPixels(0,0,t[0],t[1],e.RGBA,e.UNSIGNED_BYTE,r),r}readPackedPixelsToFloat32Array(){return new Float32Array(this.readPackedPixelsToUint8Array().buffer)}readFloatPixelsToFloat32Array(){if("single"!==this.precision)throw new Error('Requires this.precision to be "single"');const{texSize:t,context:e}=this,r=t[0],n=t[1],i=new Float32Array(r*n*4);return e.readPixels(0,0,r,n,e.RGBA,e.FLOAT,i),i}getPixels(t){const{context:e,output:r}=this,[n,s]=r,a=new Uint8Array(n*s*4);return e.readPixels(0,0,n,s,e.RGBA,e.UNSIGNED_BYTE,a),new Uint8ClampedArray((t?a:i.flipPixels(a,n,s)).buffer)}renderKernelsToArrays(){const t={result:this.renderOutput()};for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=this.mappedTextures[e].toArray();return t}renderKernelsToTextures(){const t={result:this.renderOutput()};if(this.immutable)for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=this.mappedTextures[e].clone();else for(let e=0;e<this.subKernels.length;e++)t[this.subKernels[e].property]=this.mappedTextures[e];return t}resetSwitchingKernels(){const t=this.switchingKernels;return this.switchingKernels=null,t}setOutput(t){const e=this.toKernelOutput(t);if(this.program){if(!this.dynamicOutput)throw new Error("Resizing a kernel with dynamicOutput: false is not possible");const r=[e[0],e[1]||1,e[2]||1],n=i.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},r),s=this.texSize;if(s){const e=this.getVariablePrecisionString(s,this.tactic),r=this.getVariablePrecisionString(n,this.tactic);if(e!==r)return this.debug&&console.warn("Precision requirement changed, asking GPU instance to recompile"),void this.switchKernels({type:"outputPrecisionMismatch",precision:r,needed:t})}this.output=e,this.threadDim=r,this.texSize=n;const{context:a}=this;if(a.bindFramebuffer(a.FRAMEBUFFER,this.framebuffer),this.updateMaxTexSize(),this.framebuffer.width=this.texSize[0],this.framebuffer.height=this.texSize[1],a.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),this.canvas.width=this.maxTexSize[0],this.canvas.height=this.maxTexSize[1],this.texture&&this.texture.delete(),this.texture=null,this._setupOutputTexture(),this.mappedTextures&&this.mappedTextures.length>0){for(let t=0;t<this.mappedTextures.length;t++)this.mappedTextures[t].delete();this.mappedTextures=null,this._setupSubOutputTextures()}}else this.output=e;return this}renderValues(){return this.formatValues(this.transferValues(),this.output[0],this.output[1],this.output[2])}switchKernels(t){this.switchingKernels?this.switchingKernels.push(t):this.switchingKernels=[t]}getVariablePrecisionString(t=this.texSize,e=this.tactic,r=!1){if(!e){if(!this.constructor.features.isSpeedTacticSupported)return"highp";const e=this.constructor.features[r?"lowIntPrecision":"lowFloatPrecision"],n=this.constructor.features[r?"mediumIntPrecision":"mediumFloatPrecision"],i=this.constructor.features[r?"highIntPrecision":"highFloatPrecision"],s=Math.log2(t[0]*t[1]);if(s<=e.rangeMax)return"lowp";if(s<=n.rangeMax)return"mediump";if(s<=i.rangeMax)return"highp";throw new Error("The required size exceeds that of the ability of your system")}switch(e){case"speed":return"lowp";case"balanced":return"mediump";case"precision":return"highp";default:throw new Error(`Unknown tactic "${e}" use "speed", "balanced", "precision", or empty for auto`)}}updateTextureArgumentRefs(t,e){if(this.immutable)if(this.texture.texture===e.texture){const{prevArg:r}=t;r&&(1===r.texture._refs&&(this.texture.delete(),this.texture=r.clone(),this._textureSwitched=!0),r.delete()),t.prevArg=e.clone()}else if(this.mappedTextures&&this.mappedTextures.length>0){const{mappedTextures:r}=this;for(let n=0;n<r.length;n++){const i=r[n];if(i.texture===e.texture){const{prevArg:s}=t;return s&&(1===s.texture._refs&&(i.delete(),r[n]=s.clone(),this._mappedTextureSwitched[n]=!0),s.delete()),void(t.prevArg=e.clone())}}}}onActivate(t){if(this._textureSwitched=!0,this.texture=t.texture,this.mappedTextures){for(let t=0;t<this.mappedTextures.length;t++)this._mappedTextureSwitched[t]=!0;this.mappedTextures=t.mappedTextures}}initCanvas(){}}}},{"../../utils":114,"../kernel":36,"./texture/array-2-float":16,"./texture/array-2-float-2d":14,"./texture/array-2-float-3d":15,"./texture/array-3-float":19,"./texture/array-3-float-2d":17,"./texture/array-3-float-3d":18,"./texture/array-4-float":22,"./texture/array-4-float-2d":20,"./texture/array-4-float-3d":21,"./texture/float":25,"./texture/float-2d":23,"./texture/float-3d":24,"./texture/graphical":26,"./texture/memory-optimized":30,"./texture/memory-optimized-2d":28,"./texture/memory-optimized-3d":29,"./texture/unsigned":33,"./texture/unsigned-2d":31,"./texture/unsigned-3d":32}],14:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray2Float2D:class extends i{constructor(t){super(t),this.type="ArrayTexture(2)"}toArray(){return n.erect2DArray2(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./float":25}],15:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray2Float3D:class extends i{constructor(t){super(t),this.type="ArrayTexture(2)"}toArray(){return n.erect3DArray2(this.renderValues(),this.output[0],this.output[1],this.output[2])}}}},{"../../../utils":114,"./float":25}],16:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray2Float:class extends i{constructor(t){super(t),this.type="ArrayTexture(2)"}toArray(){return n.erectArray2(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./float":25}],17:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray3Float2D:class extends i{constructor(t){super(t),this.type="ArrayTexture(3)"}toArray(){return n.erect2DArray3(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./float":25}],18:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray3Float3D:class extends i{constructor(t){super(t),this.type="ArrayTexture(3)"}toArray(){return n.erect3DArray3(this.renderValues(),this.output[0],this.output[1],this.output[2])}}}},{"../../../utils":114,"./float":25}],19:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray3Float:class extends i{constructor(t){super(t),this.type="ArrayTexture(3)"}toArray(){return n.erectArray3(this.renderValues(),this.output[0])}}}},{"../../../utils":114,"./float":25}],20:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray4Float2D:class extends i{constructor(t){super(t),this.type="ArrayTexture(4)"}toArray(){return n.erect2DArray4(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./float":25}],21:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray4Float3D:class extends i{constructor(t){super(t),this.type="ArrayTexture(4)"}toArray(){return n.erect3DArray4(this.renderValues(),this.output[0],this.output[1],this.output[2])}}}},{"../../../utils":114,"./float":25}],22:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureArray4Float:class extends i{constructor(t){super(t),this.type="ArrayTexture(4)"}toArray(){return n.erectArray4(this.renderValues(),this.output[0])}}}},{"../../../utils":114,"./float":25}],23:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureFloat2D:class extends i{constructor(t){super(t),this.type="ArrayTexture(1)"}toArray(){return n.erect2DFloat(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./float":25}],24:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureFloat3D:class extends i{constructor(t){super(t),this.type="ArrayTexture(1)"}toArray(){return n.erect3DFloat(this.renderValues(),this.output[0],this.output[1],this.output[2])}}}},{"../../../utils":114,"./float":25}],25:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTexture:i}=t("./index");e.exports={GLTextureFloat:class extends i{get textureType(){return this.context.FLOAT}constructor(t){super(t),this.type="ArrayTexture(1)"}renderRawOutput(){const t=this.context,e=this.size;t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer()),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture,0);const r=new Float32Array(e[0]*e[1]*4);return t.readPixels(0,0,e[0],e[1],t.RGBA,t.FLOAT,r),r}renderValues(){return this._deleted?null:this.renderRawOutput()}toArray(){return n.erectFloat(this.renderValues(),this.output[0])}}}},{"../../../utils":114,"./index":27}],26:[function(t,e,r){const{GLTextureUnsigned:n}=t("./unsigned");e.exports={GLTextureGraphical:class extends n{constructor(t){super(t),this.type="ArrayTexture(4)"}toArray(){return this.renderValues()}}}},{"./unsigned":33}],27:[function(t,e,r){const{Texture:n}=t("../../../texture");function i(t,e){t.activeTexture(t.TEXTURE15),t.bindTexture(t.TEXTURE_2D,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST)}e.exports={GLTexture:class extends n{get textureType(){throw new Error(`"textureType" not implemented on ${this.name}`)}clone(){return new this.constructor(this)}beforeMutate(){return this.texture._refs>1&&(this.newTexture(),!0)}cloneTexture(){this.texture._refs--;const{context:t,size:e,texture:r,kernel:n}=this;n.debug&&console.warn("cloning internal texture"),t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer()),i(t,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const s=t.createTexture();i(t,s),t.texImage2D(t.TEXTURE_2D,0,this.internalFormat,e[0],e[1],0,this.textureFormat,this.textureType,null),t.copyTexSubImage2D(t.TEXTURE_2D,0,0,0,0,0,e[0],e[1]),s._refs=1,this.texture=s}newTexture(){this.texture._refs--;const t=this.context,e=this.size;this.kernel.debug&&console.warn("new internal texture");const r=t.createTexture();i(t,r),t.texImage2D(t.TEXTURE_2D,0,this.internalFormat,e[0],e[1],0,this.textureFormat,this.textureType,null),r._refs=1,this.texture=r}clear(){if(this.texture._refs){this.texture._refs--;const t=this.context,e=this.texture=t.createTexture();i(t,e);const r=this.size;e._refs=1,t.texImage2D(t.TEXTURE_2D,0,this.internalFormat,r[0],r[1],0,this.textureFormat,this.textureType,null)}const{context:t,texture:e}=this;t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer()),t.bindTexture(t.TEXTURE_2D,e),i(t,e),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT)}delete(){this._deleted||(this._deleted=!0,this.texture._refs&&(this.texture._refs--,this.texture._refs)||this.context.deleteTexture(this.texture))}framebuffer(){return this._framebuffer||(this._framebuffer=this.kernel.getRawValueFramebuffer(this.size[0],this.size[1])),this._framebuffer}}}},{"../../../texture":113}],28:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureMemoryOptimized2D:class extends i{constructor(t){super(t),this.type="MemoryOptimizedNumberTexture"}toArray(){return n.erectMemoryOptimized2DFloat(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./float":25}],29:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureMemoryOptimized3D:class extends i{constructor(t){super(t),this.type="MemoryOptimizedNumberTexture"}toArray(){return n.erectMemoryOptimized3DFloat(this.renderValues(),this.output[0],this.output[1],this.output[2])}}}},{"../../../utils":114,"./float":25}],30:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureFloat:i}=t("./float");e.exports={GLTextureMemoryOptimized:class extends i{constructor(t){super(t),this.type="MemoryOptimizedNumberTexture"}toArray(){return n.erectMemoryOptimizedFloat(this.renderValues(),this.output[0])}}}},{"../../../utils":114,"./float":25}],31:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureUnsigned:i}=t("./unsigned");e.exports={GLTextureUnsigned2D:class extends i{constructor(t){super(t),this.type="NumberTexture"}toArray(){return n.erect2DPackedFloat(this.renderValues(),this.output[0],this.output[1])}}}},{"../../../utils":114,"./unsigned":33}],32:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTextureUnsigned:i}=t("./unsigned");e.exports={GLTextureUnsigned3D:class extends i{constructor(t){super(t),this.type="NumberTexture"}toArray(){return n.erect3DPackedFloat(this.renderValues(),this.output[0],this.output[1],this.output[2])}}}},{"../../../utils":114,"./unsigned":33}],33:[function(t,e,r){const{utils:n}=t("../../../utils"),{GLTexture:i}=t("./index");e.exports={GLTextureUnsigned:class extends i{get textureType(){return this.context.UNSIGNED_BYTE}constructor(t){super(t),this.type="NumberTexture"}renderRawOutput(){const{context:t}=this;t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer()),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture,0);const e=new Uint8Array(this.size[0]*this.size[1]*4);return t.readPixels(0,0,this.size[0],this.size[1],t.RGBA,t.UNSIGNED_BYTE,e),e}renderValues(){return this._deleted?null:new Float32Array(this.renderRawOutput().buffer)}toArray(){return n.erectPackedFloat(this.renderValues(),this.output[0])}}}},{"../../../utils":114,"./index":27}],34:[function(t,e,r){const n=t("gl"),{WebGLKernel:i}=t("../web-gl/kernel"),{glKernelString:s}=t("../gl/kernel-string");let a=null,o=null,u=null,h=null,l=null;e.exports={HeadlessGLKernel:class extends i{static get isSupported(){return null!==a||(this.setupFeatureChecks(),a=null!==u),a}static setupFeatureChecks(){if(o=null,h=null,"function"==typeof n)try{if(u=n(2,2,{preserveDrawingBuffer:!0}),!u||!u.getExtension)return;h={STACKGL_resize_drawingbuffer:u.getExtension("STACKGL_resize_drawingbuffer"),STACKGL_destroy_context:u.getExtension("STACKGL_destroy_context"),OES_texture_float:u.getExtension("OES_texture_float"),OES_texture_float_linear:u.getExtension("OES_texture_float_linear"),OES_element_index_uint:u.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:u.getExtension("WEBGL_draw_buffers"),WEBGL_color_buffer_float:u.getExtension("WEBGL_color_buffer_float")},l=this.getFeatures()}catch(t){console.warn(t)}}static isContextMatch(t){try{return"ANGLE"===t.getParameter(t.RENDERER)}catch(t){return!1}}static getIsTextureFloat(){return Boolean(h.OES_texture_float)}static getIsDrawBuffers(){return Boolean(h.WEBGL_draw_buffers)}static getChannelCount(){return h.WEBGL_draw_buffers?u.getParameter(h.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL):1}static getMaxTextureSize(){return u.getParameter(u.MAX_TEXTURE_SIZE)}static get testCanvas(){return o}static get testContext(){return u}static get features(){return l}initCanvas(){return{}}initContext(){return n(2,2,{preserveDrawingBuffer:!0})}initExtensions(){this.extensions={STACKGL_resize_drawingbuffer:this.context.getExtension("STACKGL_resize_drawingbuffer"),STACKGL_destroy_context:this.context.getExtension("STACKGL_destroy_context"),OES_texture_float:this.context.getExtension("OES_texture_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear"),OES_element_index_uint:this.context.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:this.context.getExtension("WEBGL_draw_buffers")}}build(){super.build.apply(this,arguments),this.fallbackRequested||this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0],this.maxTexSize[1])}destroyExtensions(){this.extensions.STACKGL_resize_drawingbuffer=null,this.extensions.STACKGL_destroy_context=null,this.extensions.OES_texture_float=null,this.extensions.OES_texture_float_linear=null,this.extensions.OES_element_index_uint=null,this.extensions.WEBGL_draw_buffers=null}static destroyContext(t){const e=t.getExtension("STACKGL_destroy_context");e&&e.destroy&&e.destroy()}toString(){return s(this.constructor,arguments,this,"const gl = context || require('gl')(1, 1);\n","    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\n")}setOutput(t){return super.setOutput(t),this.graphical&&this.extensions.STACKGL_resize_drawingbuffer&&this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0],this.maxTexSize[1]),this}}}},{"../gl/kernel-string":12,"../web-gl/kernel":70,gl:2}],35:[function(t,e,r){e.exports={KernelValue:class{constructor(t,e){const{name:r,kernel:n,context:i,checkContext:s,onRequestContextHandle:a,onUpdateValueMismatch:o,origin:u,strictIntegers:h,type:l,tactic:c}=e;if(!r)throw new Error("name not set");if(!l)throw new Error("type not set");if(!u)throw new Error("origin not set");if("user"!==u&&"constants"!==u)throw new Error(`origin must be "user" or "constants" value is "${u}"`);if(!a)throw new Error("onRequestContextHandle is not set");this.name=r,this.origin=u,this.tactic=c,this.varName="constants"===u?`constants.${r}`:r,this.kernel=n,this.strictIntegers=h,this.type=t.type||l,this.size=t.size||null,this.index=null,this.context=i,this.checkContext=null==s||s,this.contextHandle=null,this.onRequestContextHandle=a,this.onUpdateValueMismatch=o,this.forceUploadEachRun=null}get id(){return`${this.origin}_${name}`}getSource(){throw new Error(`"getSource" not defined on ${this.constructor.name}`)}updateValue(t){throw new Error(`"updateValue" not defined on ${this.constructor.name}`)}}}},{}],36:[function(t,e,r){const{utils:n}=t("../utils"),{Input:i}=t("../input");e.exports={Kernel:class{static get isSupported(){throw new Error(`"isSupported" not implemented on ${this.name}`)}static isContextMatch(t){throw new Error(`"isContextMatch" not implemented on ${this.name}`)}static getFeatures(){throw new Error(`"getFeatures" not implemented on ${this.name}`)}static destroyContext(t){throw new Error(`"destroyContext" called on ${this.name}`)}static nativeFunctionArguments(){throw new Error(`"nativeFunctionArguments" called on ${this.name}`)}static nativeFunctionReturnType(){throw new Error(`"nativeFunctionReturnType" called on ${this.name}`)}static combineKernels(){throw new Error(`"combineKernels" called on ${this.name}`)}constructor(t,e){if("object"!=typeof t){if("string"!=typeof t)throw new Error("source not a string");if(!n.isFunctionString(t))throw new Error("source not a function string")}this.useLegacyEncoder=!1,this.fallbackRequested=!1,this.onRequestFallback=null,this.argumentNames="string"==typeof t?n.getArgumentNamesFromString(t):null,this.argumentTypes=null,this.argumentSizes=null,this.argumentBitRatios=null,this.kernelArguments=null,this.kernelConstants=null,this.forceUploadKernelConstants=null,this.source=t,this.output=null,this.debug=!1,this.graphical=!1,this.loopMaxIterations=0,this.constants=null,this.constantTypes=null,this.constantBitRatios=null,this.dynamicArguments=!1,this.dynamicOutput=!1,this.canvas=null,this.context=null,this.checkContext=null,this.gpu=null,this.functions=null,this.nativeFunctions=null,this.injectedNative=null,this.subKernels=null,this.validate=!0,this.immutable=!1,this.pipeline=!1,this.precision=null,this.tactic=null,this.plugins=null,this.returnType=null,this.leadingReturnStatement=null,this.followingReturnStatement=null,this.optimizeFloatMemory=null,this.strictIntegers=!1,this.fixIntegerDivisionAccuracy=null,this.built=!1,this.signature=null}mergeSettings(t){for(let e in t)if(t.hasOwnProperty(e)&&this.hasOwnProperty(e)){switch(e){case"output":if(!Array.isArray(t.output)){this.setOutput(t.output);continue}break;case"functions":this.functions=[];for(let e=0;e<t.functions.length;e++)this.addFunction(t.functions[e]);continue;case"graphical":t[e]&&!t.hasOwnProperty("precision")&&(this.precision="unsigned"),this[e]=t[e];continue;case"nativeFunctions":if(!t.nativeFunctions)continue;this.nativeFunctions=[];for(let e=0;e<t.nativeFunctions.length;e++){const r=t.nativeFunctions[e],{name:n,source:i}=r;this.addNativeFunction(n,i,r)}continue}this[e]=t[e]}this.canvas||(this.canvas=this.initCanvas()),this.context||(this.context=this.initContext()),this.plugins||(this.plugins=this.initPlugins(t))}build(){throw new Error(`"build" not defined on ${this.constructor.name}`)}run(){throw new Error(`"run" not defined on ${this.constructor.name}`)}initCanvas(){throw new Error(`"initCanvas" not defined on ${this.constructor.name}`)}initContext(){throw new Error(`"initContext" not defined on ${this.constructor.name}`)}initPlugins(t){throw new Error(`"initPlugins" not defined on ${this.constructor.name}`)}addFunction(t,e={}){if(t.name&&t.source&&t.argumentTypes&&"returnType"in t)this.functions.push(t);else if("settings"in t&&"source"in t)this.functions.push(this.functionToIGPUFunction(t.source,t.settings));else{if("string"!=typeof t&&"function"!=typeof t)throw new Error("function not properly defined");this.functions.push(this.functionToIGPUFunction(t,e))}return this}addNativeFunction(t,e,r={}){const{argumentTypes:n,argumentNames:i}=r.argumentTypes?function(t){const e=Object.keys(t),r=[];for(let n=0;n<e.length;n++){const i=e[n];r.push(t[i])}return{argumentTypes:r,argumentNames:e}}(r.argumentTypes):this.constructor.nativeFunctionArguments(e)||{};return this.nativeFunctions.push({name:t,source:e,settings:r,argumentTypes:n,argumentNames:i,returnType:r.returnType||this.constructor.nativeFunctionReturnType(e)}),this}setupArguments(t){if(this.kernelArguments=[],this.argumentTypes)for(let t=0;t<this.argumentTypes.length;t++)this.kernelArguments.push({type:this.argumentTypes[t]});else if(!this.argumentTypes){this.argumentTypes=[];for(let e=0;e<t.length;e++){const r=n.getVariableType(t[e],this.strictIntegers),i="Integer"===r?"Number":r;this.argumentTypes.push(i),this.kernelArguments.push({type:i})}}this.argumentSizes=new Array(t.length),this.argumentBitRatios=new Int32Array(t.length);for(let e=0;e<t.length;e++){const r=t[e];this.argumentSizes[e]=r.constructor===i?r.size:null,this.argumentBitRatios[e]=this.getBitRatio(r)}if(this.argumentNames.length!==t.length)throw new Error("arguments are miss-aligned")}setupConstants(){this.kernelConstants=[];let t=null===this.constantTypes;if(t&&(this.constantTypes={}),this.constantBitRatios={},this.constants)for(let e in this.constants){if(t){const t=n.getVariableType(this.constants[e],this.strictIntegers);this.constantTypes[e]=t,this.kernelConstants.push({name:e,type:t})}else this.kernelConstants.push({name:e,type:this.constantTypes[e]});this.constantBitRatios[e]=this.getBitRatio(this.constants[e])}}setOptimizeFloatMemory(t){return this.optimizeFloatMemory=t,this}toKernelOutput(t){return t.hasOwnProperty("x")?t.hasOwnProperty("y")?t.hasOwnProperty("z")?[t.x,t.y,t.z]:[t.x,t.y]:[t.x]:t}setOutput(t){return this.output=this.toKernelOutput(t),this}setDebug(t){return this.debug=t,this}setGraphical(t){return this.graphical=t,this.precision="unsigned",this}setLoopMaxIterations(t){return this.loopMaxIterations=t,this}setConstants(t){return this.constants=t,this}setConstantTypes(t){return this.constantTypes=t,this}setFunctions(t){for(let e=0;e<t.length;e++)this.addFunction(t[e]);return this}setNativeFunctions(t){for(let e=0;e<t.length;e++){const r=t[e],{name:n,source:i}=r;this.addNativeFunction(n,i,r)}return this}setInjectedNative(t){return this.injectedNative=t,this}setPipeline(t){return this.pipeline=t,this}setPrecision(t){return this.precision=t,this}setDimensions(t){return n.warnDeprecated("method","setDimensions","setOutput"),this.output=t,this}setOutputToTexture(t){return n.warnDeprecated("method","setOutputToTexture","setPipeline"),this.pipeline=t,this}setImmutable(t){return this.immutable=t,this}setCanvas(t){return this.canvas=t,this}setStrictIntegers(t){return this.strictIntegers=t,this}setDynamicOutput(t){return this.dynamicOutput=t,this}setHardcodeConstants(t){return n.warnDeprecated("method","setHardcodeConstants"),this.setDynamicOutput(t),this.setDynamicArguments(t),this}setDynamicArguments(t){return this.dynamicArguments=t,this}setUseLegacyEncoder(t){return this.useLegacyEncoder=t,this}setWarnVarUsage(t){return n.warnDeprecated("method","setWarnVarUsage"),this}getCanvas(){return n.warnDeprecated("method","getCanvas"),this.canvas}getWebGl(){return n.warnDeprecated("method","getWebGl"),this.context}setContext(t){return this.context=t,this}setArgumentTypes(t){if(Array.isArray(t))this.argumentTypes=t;else{this.argumentTypes=[];for(const e in t){if(!t.hasOwnProperty(e))continue;const r=this.argumentNames.indexOf(e);if(-1===r)throw new Error(`unable to find argument ${e}`);this.argumentTypes[r]=t[e]}}return this}setTactic(t){return this.tactic=t,this}requestFallback(t){if(!this.onRequestFallback)throw new Error(`"onRequestFallback" not defined on ${this.constructor.name}`);return this.fallbackRequested=!0,this.onRequestFallback(t)}validateSettings(){throw new Error(`"validateSettings" not defined on ${this.constructor.name}`)}addSubKernel(t){if(null===this.subKernels&&(this.subKernels=[]),!t.source)throw new Error('subKernel missing "source" property');if(!t.property&&isNaN(t.property))throw new Error('subKernel missing "property" property');if(!t.name)throw new Error('subKernel missing "name" property');return this.subKernels.push(t),this}destroy(t){throw new Error(`"destroy" called on ${this.constructor.name}`)}getBitRatio(t){if("single"===this.precision)return 4;if(Array.isArray(t[0]))return this.getBitRatio(t[0]);if(t.constructor===i)return this.getBitRatio(t.value);switch(t.constructor){case Uint8ClampedArray:case Uint8Array:case Int8Array:return 1;case Uint16Array:case Int16Array:return 2;case Float32Array:case Int32Array:default:return 4}}getPixels(t){throw new Error(`"getPixels" called on ${this.constructor.name}`)}checkOutput(){if(!this.output||!n.isArray(this.output))throw new Error("kernel.output not an array");if(this.output.length<1)throw new Error("kernel.output is empty, needs at least 1 value");for(let t=0;t<this.output.length;t++)if(isNaN(this.output[t])||this.output[t]<1)throw new Error(`${this.constructor.name}.output[${t}] incorrectly defined as \`${this.output[t]}\`, needs to be numeric, and greater than 0`)}prependString(t){throw new Error(`"prependString" called on ${this.constructor.name}`)}hasPrependString(t){throw new Error(`"hasPrependString" called on ${this.constructor.name}`)}toJSON(){return{settings:{output:this.output,pipeline:this.pipeline,argumentNames:this.argumentNames,argumentsTypes:this.argumentTypes,constants:this.constants,pluginNames:this.plugins?this.plugins.map((t=>t.name)):null,returnType:this.returnType}}}buildSignature(t){const e=this.constructor;this.signature=e.getSignature(this,e.getArgumentTypes(this,t))}static getArgumentTypes(t,e){const r=new Array(e.length);for(let i=0;i<e.length;i++){const s=e[i],a=t.argumentTypes[i];if(s.type)r[i]=s.type;else switch(a){case"Number":case"Integer":case"Float":case"ArrayTexture(1)":r[i]=n.getVariableType(s);break;default:r[i]=a}}return r}static getSignature(t,e){throw new Error(`"getSignature" not implemented on ${this.name}`)}functionToIGPUFunction(t,e={}){if("string"!=typeof t&&"function"!=typeof t)throw new Error("source not a string or function");const r="string"==typeof t?t:t.toString();let i=[];return i=Array.isArray(e.argumentTypes)?e.argumentTypes:"object"==typeof e.argumentTypes?n.getArgumentNamesFromString(r).map((t=>e.argumentTypes[t]))||[]:e.argumentTypes||[],{name:n.getFunctionNameFromString(r)||null,source:r,argumentTypes:i,returnType:e.returnType||null}}onActivate(t){}}}},{"../input":110,"../utils":114}],37:[function(t,e,r){const n=`__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nfloat acosh(float x) {\n  return log(x + sqrt(x * x - 1.0));\n}\n\nfloat sinh(float x) {\n  return (pow(${Math.E}, x) - pow(${Math.E}, -x)) / 2.0;\n}\n\nfloat asinh(float x) {\n  return log(x + sqrt(x * x + 1.0));\n}\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat atanh(float x) {\n  x = (x + 1.0) / (x - 1.0);\n  if (x < 0.0) {\n    return 0.5 * log(-x);\n  }\n  return 0.5 * log(x);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat cosh(float x) {\n  return (pow(${Math.E}, x) + pow(${Math.E}, -x)) / 2.0; \n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat tanh(float x) {\n  float e = exp(2.0 * x);\n  return (e - 1.0) / (e + 1.0);\n}\n\nfloat trunc(float x) {\n  if (x >= 0.0) {\n    return floor(x); \n  } else {\n    return ceil(x);\n  }\n}\n\nvec4 _round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(_round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(_round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;e.exports={fragmentShader:n}},{}],38:[function(t,e,r){const{utils:n}=t("../../utils"),{FunctionNode:i}=t("../function-node"),s={Array:"sampler2D","Array(2)":"vec2","Array(3)":"vec3","Array(4)":"vec4","Matrix(2)":"mat2","Matrix(3)":"mat3","Matrix(4)":"mat4",Array2D:"sampler2D",Array3D:"sampler2D",Boolean:"bool",Float:"float",Input:"sampler2D",Integer:"int",Number:"float",LiteralInteger:"float",NumberTexture:"sampler2D",MemoryOptimizedNumberTexture:"sampler2D","ArrayTexture(1)":"sampler2D","ArrayTexture(2)":"sampler2D","ArrayTexture(3)":"sampler2D","ArrayTexture(4)":"sampler2D",HTMLVideo:"sampler2D",HTMLCanvas:"sampler2D",HTMLImage:"sampler2D",HTMLImageArray:"sampler2DArray"},a={"===":"==","!==":"!="};e.exports={WebGLFunctionNode:class extends i{constructor(t,e){super(t,e),e&&e.hasOwnProperty("fixIntegerDivisionAccuracy")&&(this.fixIntegerDivisionAccuracy=e.fixIntegerDivisionAccuracy)}astConditionalExpression(t,e){if("ConditionalExpression"!==t.type)throw this.astErrorOutput("Not a conditional expression",t);const r=this.getType(t.consequent),n=this.getType(t.alternate);return null===r&&null===n?(e.push("if ("),this.astGeneric(t.test,e),e.push(") {"),this.astGeneric(t.consequent,e),e.push(";"),e.push("} else {"),this.astGeneric(t.alternate,e),e.push(";"),e.push("}"),e):(e.push("("),this.astGeneric(t.test,e),e.push("?"),this.astGeneric(t.consequent,e),e.push(":"),this.astGeneric(t.alternate,e),e.push(")"),e)}astFunction(t,e){if(this.isRootKernel)e.push("void");else{this.returnType||this.findLastReturn()&&(this.returnType=this.getType(t.body),"LiteralInteger"===this.returnType&&(this.returnType="Number"));const{returnType:r}=this;if(r){const t=s[r];if(!t)throw new Error(`unknown type ${r}`);e.push(t)}else e.push("void")}if(e.push(" "),e.push(this.name),e.push("("),!this.isRootKernel)for(let r=0;r<this.argumentNames.length;++r){const i=this.argumentNames[r];r>0&&e.push(", ");let a=this.argumentTypes[this.argumentNames.indexOf(i)];if(!a)throw this.astErrorOutput(`Unknown argument ${i} type`,t);"LiteralInteger"===a&&(this.argumentTypes[r]=a="Number");const o=s[a];if(!o)throw this.astErrorOutput("Unexpected expression",t);const u=n.sanitizeName(i);"sampler2D"===o||"sampler2DArray"===o?e.push(`${o} user_${u},ivec2 user_${u}Size,ivec3 user_${u}Dim`):e.push(`${o} user_${u}`)}e.push(") {\n");for(let r=0;r<t.body.body.length;++r)this.astGeneric(t.body.body[r],e),e.push("\n");return e.push("}\n"),e}astReturnStatement(t,e){if(!t.argument)throw this.astErrorOutput("Unexpected return statement",t);this.pushState("skip-literal-correction");const r=this.getType(t.argument);this.popState("skip-literal-correction");const n=[];switch(this.returnType||(this.returnType="LiteralInteger"===r||"Integer"===r?"Number":r),this.returnType){case"LiteralInteger":case"Number":case"Float":switch(r){case"Integer":n.push("float("),this.astGeneric(t.argument,n),n.push(")");break;case"LiteralInteger":this.castLiteralToFloat(t.argument,n),"Integer"===this.getType(t)&&(n.unshift("float("),n.push(")"));break;default:this.astGeneric(t.argument,n)}break;case"Integer":switch(r){case"Float":case"Number":this.castValueToInteger(t.argument,n);break;case"LiteralInteger":this.castLiteralToInteger(t.argument,n);break;default:this.astGeneric(t.argument,n)}break;case"Array(4)":case"Array(3)":case"Array(2)":case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":case"Input":this.astGeneric(t.argument,n);break;default:throw this.astErrorOutput(`unhandled return type ${this.returnType}`,t)}return this.isRootKernel?(e.push(`kernelResult = ${n.join("")};`),e.push("return;")):this.isSubKernel?(e.push(`subKernelResult_${this.name} = ${n.join("")};`),e.push(`return subKernelResult_${this.name};`)):e.push(`return ${n.join("")};`),e}astLiteral(t,e){if(isNaN(t.value))throw this.astErrorOutput("Non-numeric literal not supported : "+t.value,t);const r=this.astKey(t);return Number.isInteger(t.value)?this.isState("casting-to-integer")||this.isState("building-integer")?(this.literalTypes[r]="Integer",e.push(`${t.value}`)):(this.isState("casting-to-float")||this.isState("building-float"),this.literalTypes[r]="Number",e.push(`${t.value}.0`)):this.isState("casting-to-integer")||this.isState("building-integer")?(this.literalTypes[r]="Integer",e.push(Math.round(t.value))):(this.literalTypes[r]="Number",e.push(`${t.value}`)),e}astBinaryExpression(t,e){if(this.checkAndUpconvertOperator(t,e))return e;if(this.fixIntegerDivisionAccuracy&&"/"===t.operator){switch(e.push("divWithIntCheck("),this.pushState("building-float"),this.getType(t.left)){case"Integer":this.castValueToFloat(t.left,e);break;case"LiteralInteger":this.castLiteralToFloat(t.left,e);break;default:this.astGeneric(t.left,e)}switch(e.push(", "),this.getType(t.right)){case"Integer":this.castValueToFloat(t.right,e);break;case"LiteralInteger":this.castLiteralToFloat(t.right,e);break;default:this.astGeneric(t.right,e)}return this.popState("building-float"),e.push(")"),e}e.push("(");const r=this.getType(t.left)||"Number",n=this.getType(t.right)||"Number";if(!r||!n)throw this.astErrorOutput("Unhandled binary expression",t);const i=r+" & "+n;switch(i){case"Integer & Integer":this.pushState("building-integer"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("building-integer");break;case"Number & Float":case"Float & Number":case"Float & Float":case"Number & Number":this.pushState("building-float"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("building-float");break;case"LiteralInteger & LiteralInteger":this.isState("casting-to-integer")||this.isState("building-integer")?(this.pushState("building-integer"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("building-integer")):(this.pushState("building-float"),this.castLiteralToFloat(t.left,e),e.push(a[t.operator]||t.operator),this.castLiteralToFloat(t.right,e),this.popState("building-float"));break;case"Integer & Float":case"Integer & Number":if((">"===t.operator||"<"===t.operator&&"Literal"===t.right.type)&&!Number.isInteger(t.right.value)){this.pushState("building-float"),this.castValueToFloat(t.left,e),e.push(a[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("building-float");break}if(this.pushState("building-integer"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.pushState("casting-to-integer"),"Literal"===t.right.type){const r=[];if(this.astGeneric(t.right,r),"Integer"!==this.getType(t.right))throw this.astErrorOutput("Unhandled binary expression with literal",t);e.push(r.join(""))}else e.push("int("),this.astGeneric(t.right,e),e.push(")");this.popState("casting-to-integer"),this.popState("building-integer");break;case"Integer & LiteralInteger":this.pushState("building-integer"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.castLiteralToInteger(t.right,e),this.popState("building-integer");break;case"Number & Integer":case"Float & Integer":this.pushState("building-float"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.castValueToFloat(t.right,e),this.popState("building-float");break;case"Float & LiteralInteger":case"Number & LiteralInteger":this.pushState("building-float"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.castLiteralToFloat(t.right,e),this.popState("building-float");break;case"LiteralInteger & Float":case"LiteralInteger & Number":this.isState("casting-to-integer")?(this.pushState("building-integer"),this.castLiteralToInteger(t.left,e),e.push(a[t.operator]||t.operator),this.castValueToInteger(t.right,e),this.popState("building-integer")):(this.pushState("building-float"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.pushState("casting-to-float"),this.astGeneric(t.right,e),this.popState("casting-to-float"),this.popState("building-float"));break;case"LiteralInteger & Integer":this.pushState("building-integer"),this.castLiteralToInteger(t.left,e),e.push(a[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("building-integer");break;case"Boolean & Boolean":this.pushState("building-boolean"),this.astGeneric(t.left,e),e.push(a[t.operator]||t.operator),this.astGeneric(t.right,e),this.popState("building-boolean");break;default:throw this.astErrorOutput(`Unhandled binary expression between ${i}`,t)}return e.push(")"),e}checkAndUpconvertOperator(t,e){const r=this.checkAndUpconvertBitwiseOperators(t,e);if(r)return r;const n={"%":this.fixIntegerDivisionAccuracy?"integerCorrectionModulo":"modulo","**":"pow"}[t.operator];if(!n)return null;switch(e.push(n),e.push("("),this.getType(t.left)){case"Integer":this.castValueToFloat(t.left,e);break;case"LiteralInteger":this.castLiteralToFloat(t.left,e);break;default:this.astGeneric(t.left,e)}switch(e.push(","),this.getType(t.right)){case"Integer":this.castValueToFloat(t.right,e);break;case"LiteralInteger":this.castLiteralToFloat(t.right,e);break;default:this.astGeneric(t.right,e)}return e.push(")"),e}checkAndUpconvertBitwiseOperators(t,e){const r={"&":"bitwiseAnd","|":"bitwiseOr","^":"bitwiseXOR","<<":"bitwiseZeroFillLeftShift",">>":"bitwiseSignedRightShift",">>>":"bitwiseZeroFillRightShift"}[t.operator];if(!r)return null;switch(e.push(r),e.push("("),this.getType(t.left)){case"Number":case"Float":this.castValueToInteger(t.left,e);break;case"LiteralInteger":this.castLiteralToInteger(t.left,e);break;default:this.astGeneric(t.left,e)}switch(e.push(","),this.getType(t.right)){case"Number":case"Float":this.castValueToInteger(t.right,e);break;case"LiteralInteger":this.castLiteralToInteger(t.right,e);break;default:this.astGeneric(t.right,e)}return e.push(")"),e}checkAndUpconvertBitwiseUnary(t,e){const r={"~":"bitwiseNot"}[t.operator];if(!r)return null;switch(e.push(r),e.push("("),this.getType(t.argument)){case"Number":case"Float":this.castValueToInteger(t.argument,e);break;case"LiteralInteger":this.castLiteralToInteger(t.argument,e);break;default:this.astGeneric(t.argument,e)}return e.push(")"),e}castLiteralToInteger(t,e){return this.pushState("casting-to-integer"),this.astGeneric(t,e),this.popState("casting-to-integer"),e}castLiteralToFloat(t,e){return this.pushState("casting-to-float"),this.astGeneric(t,e),this.popState("casting-to-float"),e}castValueToInteger(t,e){return this.pushState("casting-to-integer"),e.push("int("),this.astGeneric(t,e),e.push(")"),this.popState("casting-to-integer"),e}castValueToFloat(t,e){return this.pushState("casting-to-float"),e.push("float("),this.astGeneric(t,e),e.push(")"),this.popState("casting-to-float"),e}astIdentifierExpression(t,e){if("Identifier"!==t.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);const r=this.getType(t),i=n.sanitizeName(t.name);return"Infinity"===t.name?e.push("3.402823466e+38"):"Boolean"===r&&this.argumentNames.indexOf(i)>-1?e.push(`bool(user_${i})`):e.push(`user_${i}`),e}astForStatement(t,e){if("ForStatement"!==t.type)throw this.astErrorOutput("Invalid for statement",t);const r=[],n=[],i=[],s=[];let a=null;if(t.init){const{declarations:e}=t.init;e.length>1&&(a=!1),this.astGeneric(t.init,r);for(let t=0;t<e.length;t++)e[t].init&&"Literal"!==e[t].init.type&&(a=!1)}else a=!1;if(t.test?this.astGeneric(t.test,n):a=!1,t.update?this.astGeneric(t.update,i):a=!1,t.body&&(this.pushState("loop-body"),this.astGeneric(t.body,s),this.popState("loop-body")),null===a&&(a=this.isSafe(t.init)&&this.isSafe(t.test)),a){const t=r.join(""),a=";"!==t[t.length-1];e.push(`for (${t}${a?";":""}${n.join("")};${i.join("")}){\n`),e.push(s.join("")),e.push("}\n")}else{const t=this.getInternalVariableName("safeI");r.length>0&&e.push(r.join(""),"\n"),e.push(`for (int ${t}=0;${t}<LOOP_MAX;${t}++){\n`),n.length>0&&e.push(`if (!${n.join("")}) break;\n`),e.push(s.join("")),e.push(`\n${i.join("")};`),e.push("}\n")}return e}astWhileStatement(t,e){if("WhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);const r=this.getInternalVariableName("safeI");return e.push(`for (int ${r}=0;${r}<LOOP_MAX;${r}++){\n`),e.push("if (!"),this.astGeneric(t.test,e),e.push(") break;\n"),this.astGeneric(t.body,e),e.push("}\n"),e}astDoWhileStatement(t,e){if("DoWhileStatement"!==t.type)throw this.astErrorOutput("Invalid while statement",t);const r=this.getInternalVariableName("safeI");return e.push(`for (int ${r}=0;${r}<LOOP_MAX;${r}++){\n`),this.astGeneric(t.body,e),e.push("if (!"),this.astGeneric(t.test,e),e.push(") break;\n"),e.push("}\n"),e}astAssignmentExpression(t,e){if("%="===t.operator)this.astGeneric(t.left,e),e.push("="),e.push("mod("),this.astGeneric(t.left,e),e.push(","),this.astGeneric(t.right,e),e.push(")");else{if("**="!==t.operator){const r=this.getType(t.left),n=this.getType(t.right);return this.astGeneric(t.left,e),e.push(t.operator),"Integer"!==r&&"Integer"===n?(e.push("float("),this.astGeneric(t.right,e),e.push(")")):this.astGeneric(t.right,e),e}this.astGeneric(t.left,e),e.push("="),e.push("pow("),this.astGeneric(t.left,e),e.push(","),this.astGeneric(t.right,e),e.push(")")}}astBlockStatement(t,e){if(this.isState("loop-body")){this.pushState("block-body");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);this.popState("block-body")}else{e.push("{\n");for(let r=0;r<t.body.length;r++)this.astGeneric(t.body[r],e);e.push("}\n")}return e}astVariableDeclaration(t,e){const r=t.declarations;if(!r||!r[0]||!r[0].init)throw this.astErrorOutput("Unexpected expression",t);const i=[];let a=null;const o=[];let u=[];for(let e=0;e<r.length;e++){const i=r[e],h=i.init,l=this.getDeclaration(i.id),c=this.getType(i.init);let p=c;"LiteralInteger"===p&&(p="Integer"===l.suggestedType?"Integer":"Number");const d=s[p];if(!d)throw this.astErrorOutput(`Markup type ${p} not handled`,t);const g=[];if("Integer"===c&&"Integer"===p){if(l.valueType="Number",0===e||null===a)g.push("float ");else if(p!==a)throw new Error("Unhandled declaration");a=p,g.push(`user_${n.sanitizeName(i.id.name)}=`),g.push("float("),this.astGeneric(h,g),g.push(")")}else l.valueType=p,0===e||null===a?g.push(`${d} `):p!==a&&(o.push(u.join(",")),u=[],g.push(`${d} `)),a=p,g.push(`user_${n.sanitizeName(i.id.name)}=`),"Number"===c&&"Integer"===p?h.left&&"Literal"===h.left.type?this.astGeneric(h,g):(g.push("int("),this.astGeneric(h,g),g.push(")")):"LiteralInteger"===c&&"Integer"===p?this.castLiteralToInteger(h,g):this.astGeneric(h,g);u.push(g.join(""))}return u.length>0&&o.push(u.join(",")),i.push(o.join(";")),e.push(i.join("")),e.push(";"),e}astIfStatement(t,e){return e.push("if ("),this.astGeneric(t.test,e),e.push(")"),"BlockStatement"===t.consequent.type?this.astGeneric(t.consequent,e):(e.push(" {\n"),this.astGeneric(t.consequent,e),e.push("\n}\n")),t.alternate&&(e.push("else "),"BlockStatement"===t.alternate.type||"IfStatement"===t.alternate.type?this.astGeneric(t.alternate,e):(e.push(" {\n"),this.astGeneric(t.alternate,e),e.push("\n}\n"))),e}astSwitchStatement(t,e){if("SwitchStatement"!==t.type)throw this.astErrorOutput("Invalid switch statement",t);const{discriminant:r,cases:n}=t,i=this.getType(r),s=`switchDiscriminant${this.astKey(t,"_")}`;switch(i){case"Float":case"Number":e.push(`float ${s} = `),this.astGeneric(r,e),e.push(";\n");break;case"Integer":e.push(`int ${s} = `),this.astGeneric(r,e),e.push(";\n")}if(1===n.length&&!n[0].test)return this.astGeneric(n[0].consequent,e),e;let a=!1,o=[],u=!1,h=!1;for(let t=0;t<n.length;t++){if(n[t].test){if(0!==t&&h?a?(e.push(`${s} == `),a=!1):e.push(` else if (${s} == `):(h=!0,e.push(`if (${s} == `)),"Integer"===i)switch(this.getType(n[t].test)){case"Number":case"Float":this.castValueToInteger(n[t].test,e);break;case"LiteralInteger":this.castLiteralToInteger(n[t].test,e)}else{if("Float"!==i)throw new Error("unhanlded");switch(this.getType(n[t].test)){case"LiteralInteger":this.castLiteralToFloat(n[t].test,e);break;case"Integer":this.castValueToFloat(n[t].test,e)}}if(!n[t].consequent||0===n[t].consequent.length){a=!0,e.push(" || ");continue}e.push(") {\n")}else{if(n.length>t+1){u=!0,this.astGeneric(n[t].consequent,o);continue}e.push(" else {\n")}this.astGeneric(n[t].consequent,e),e.push("\n}")}return u&&(e.push(" else {"),e.push(o.join("")),e.push("}")),e}astThisExpression(t,e){return e.push("this"),e}astMemberExpression(t,e){const{property:r,name:i,signature:s,origin:a,type:o,xProperty:u,yProperty:h,zProperty:l}=this.getMemberExpressionDetails(t);switch(s){case"value.thread.value":case"this.thread.value":if("x"!==i&&"y"!==i&&"z"!==i)throw this.astErrorOutput("Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`",t);return e.push(`threadId.${i}`),e;case"this.output.value":if(this.dynamicOutput)switch(i){case"x":this.isState("casting-to-float")?e.push("float(uOutputDim.x)"):e.push("uOutputDim.x");break;case"y":this.isState("casting-to-float")?e.push("float(uOutputDim.y)"):e.push("uOutputDim.y");break;case"z":this.isState("casting-to-float")?e.push("float(uOutputDim.z)"):e.push("uOutputDim.z");break;default:throw this.astErrorOutput("Unexpected expression",t)}else switch(i){case"x":this.isState("casting-to-integer")?e.push(this.output[0]):e.push(this.output[0],".0");break;case"y":this.isState("casting-to-integer")?e.push(this.output[1]):e.push(this.output[1],".0");break;case"z":this.isState("casting-to-integer")?e.push(this.output[2]):e.push(this.output[2],".0");break;default:throw this.astErrorOutput("Unexpected expression",t)}return e;case"value":throw this.astErrorOutput("Unexpected expression",t);case"value[]":case"value[][]":case"value[][][]":case"value[][][][]":case"value.value":if("Math"===a)return e.push(Math[i]),e;const s=n.sanitizeName(i);switch(r){case"r":return e.push(`user_${s}.r`),e;case"g":return e.push(`user_${s}.g`),e;case"b":return e.push(`user_${s}.b`),e;case"a":return e.push(`user_${s}.a`),e}break;case"this.constants.value":if(void 0===u)switch(o){case"Array(2)":case"Array(3)":case"Array(4)":return e.push(`constants_${n.sanitizeName(i)}`),e}case"this.constants.value[]":case"this.constants.value[][]":case"this.constants.value[][][]":case"this.constants.value[][][][]":break;case"fn()[]":return this.astCallExpression(t.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(r)),e.push("]"),e;case"fn()[][]":return this.astCallExpression(t.object.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(t.object.property)),e.push("]"),e.push("["),e.push(this.memberExpressionPropertyMarkup(t.property)),e.push("]"),e;case"[][]":return this.astArrayExpression(t.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(r)),e.push("]"),e;default:throw this.astErrorOutput("Unexpected expression",t)}if(!1===t.computed)switch(o){case"Number":case"Integer":case"Float":case"Boolean":return e.push(`${a}_${n.sanitizeName(i)}`),e}const c=`${a}_${n.sanitizeName(i)}`;switch(o){case"Array(2)":case"Array(3)":case"Array(4)":this.astGeneric(t.object,e),e.push("["),e.push(this.memberExpressionPropertyMarkup(u)),e.push("]");break;case"HTMLImageArray":e.push(`getImage3D(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"ArrayTexture(1)":e.push(`getFloatFromSampler2D(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"Array1D(2)":case"Array2D(2)":case"Array3D(2)":e.push(`getMemoryOptimizedVec2(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"ArrayTexture(2)":e.push(`getVec2FromSampler2D(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"Array1D(3)":case"Array2D(3)":case"Array3D(3)":e.push(`getMemoryOptimizedVec3(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"ArrayTexture(3)":e.push(`getVec3FromSampler2D(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"Array1D(4)":case"Array2D(4)":case"Array3D(4)":e.push(`getMemoryOptimizedVec4(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"ArrayTexture(4)":case"HTMLCanvas":case"HTMLImage":case"HTMLVideo":e.push(`getVec4FromSampler2D(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"NumberTexture":case"Array":case"Array2D":case"Array3D":case"Array4D":case"Input":case"Number":case"Float":case"Integer":if("single"===this.precision)e.push(`getMemoryOptimized32(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");else{const t="user"===a?this.lookupFunctionArgumentBitRatio(this.name,i):this.constantBitRatios[i];switch(t){case 1:e.push(`get8(${c}, ${c}Size, ${c}Dim, `);break;case 2:e.push(`get16(${c}, ${c}Size, ${c}Dim, `);break;case 4:case 0:e.push(`get32(${c}, ${c}Size, ${c}Dim, `);break;default:throw new Error(`unhandled bit ratio of ${t}`)}this.memberExpressionXYZ(u,h,l,e),e.push(")")}break;case"MemoryOptimizedNumberTexture":e.push(`getMemoryOptimized32(${c}, ${c}Size, ${c}Dim, `),this.memberExpressionXYZ(u,h,l,e),e.push(")");break;case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":e.push(`${c}[${this.memberExpressionPropertyMarkup(h)}]`),h&&e.push(`[${this.memberExpressionPropertyMarkup(u)}]`);break;default:throw new Error(`unhandled member expression "${o}"`)}return e}astCallExpression(t,e){if(!t.callee)throw this.astErrorOutput("Unknown CallExpression",t);let r=null;const i=this.isAstMathFunction(t);if(r=i||t.callee.object&&"ThisExpression"===t.callee.object.type?t.callee.property.name:"SequenceExpression"!==t.callee.type||"Literal"!==t.callee.expressions[0].type||isNaN(t.callee.expressions[0].raw)?t.callee.name:t.callee.expressions[1].property.name,!r)throw this.astErrorOutput("Unhandled function, couldn't find name",t);switch(r){case"pow":r="_pow";break;case"round":r="_round"}if(this.calledFunctions.indexOf(r)<0&&this.calledFunctions.push(r),"random"===r&&this.plugins&&this.plugins.length>0)for(let t=0;t<this.plugins.length;t++){const r=this.plugins[t];if("Math.random()"===r.functionMatch&&r.functionReplace)return e.push(r.functionReplace),e}if(this.onFunctionCall&&this.onFunctionCall(this.name,r,t.arguments),e.push(r),e.push("("),i)for(let r=0;r<t.arguments.length;++r){const n=t.arguments[r],i=this.getType(n);r>0&&e.push(", "),"Integer"===i?this.castValueToFloat(n,e):this.astGeneric(n,e)}else{const i=this.lookupFunctionArgumentTypes(r)||[];for(let s=0;s<t.arguments.length;++s){const a=t.arguments[s];let o=i[s];s>0&&e.push(", ");const u=this.getType(a);switch(o||(this.triggerImplyArgumentType(r,s,u,this),o=u),u){case"Boolean":this.astGeneric(a,e);continue;case"Number":case"Float":if("Integer"===o){e.push("int("),this.astGeneric(a,e),e.push(")");continue}if("Number"===o||"Float"===o){this.astGeneric(a,e);continue}if("LiteralInteger"===o){this.castLiteralToFloat(a,e);continue}break;case"Integer":if("Number"===o||"Float"===o){e.push("float("),this.astGeneric(a,e),e.push(")");continue}if("Integer"===o){this.astGeneric(a,e);continue}break;case"LiteralInteger":if("Integer"===o){this.castLiteralToInteger(a,e);continue}if("Number"===o||"Float"===o){this.castLiteralToFloat(a,e);continue}if("LiteralInteger"===o){this.astGeneric(a,e);continue}break;case"Array(2)":case"Array(3)":case"Array(4)":if(o===u){if("Identifier"===a.type)e.push(`user_${n.sanitizeName(a.name)}`);else{if("ArrayExpression"!==a.type&&"MemberExpression"!==a.type&&"CallExpression"!==a.type)throw this.astErrorOutput(`Unhandled argument type ${a.type}`,t);this.astGeneric(a,e)}continue}break;case"HTMLCanvas":case"HTMLImage":case"HTMLImageArray":case"HTMLVideo":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":case"Array":case"Input":if(o===u){if("Identifier"!==a.type)throw this.astErrorOutput(`Unhandled argument type ${a.type}`,t);this.triggerImplyArgumentBitRatio(this.name,a.name,r,s);const i=n.sanitizeName(a.name);e.push(`user_${i},user_${i}Size,user_${i}Dim`);continue}}throw this.astErrorOutput(`Unhandled argument combination of ${u} and ${o} for argument named "${a.name}"`,t)}}return e.push(")"),e}astArrayExpression(t,e){const r=this.getType(t),n=t.elements.length;switch(r){case"Matrix(2)":case"Matrix(3)":case"Matrix(4)":e.push(`mat${n}(`);break;default:e.push(`vec${n}(`)}for(let r=0;r<n;++r){r>0&&e.push(", ");const n=t.elements[r];this.astGeneric(n,e)}return e.push(")"),e}memberExpressionXYZ(t,e,r,n){return r?n.push(this.memberExpressionPropertyMarkup(r),", "):n.push("0, "),e?n.push(this.memberExpressionPropertyMarkup(e),", "):n.push("0, "),n.push(this.memberExpressionPropertyMarkup(t)),n}memberExpressionPropertyMarkup(t){if(!t)throw new Error("Property not set");const e=[];switch(this.getType(t)){case"Number":case"Float":this.castValueToInteger(t,e);break;case"LiteralInteger":this.castLiteralToInteger(t,e);break;default:this.astGeneric(t,e)}return e.join("")}}}},{"../../utils":114,"../function-node":10}],39:[function(t,e,r){const{WebGLKernelValueBoolean:n}=t("./kernel-value/boolean"),{WebGLKernelValueFloat:i}=t("./kernel-value/float"),{WebGLKernelValueInteger:s}=t("./kernel-value/integer"),{WebGLKernelValueHTMLImage:a}=t("./kernel-value/html-image"),{WebGLKernelValueDynamicHTMLImage:o}=t("./kernel-value/dynamic-html-image"),{WebGLKernelValueHTMLVideo:u}=t("./kernel-value/html-video"),{WebGLKernelValueDynamicHTMLVideo:h}=t("./kernel-value/dynamic-html-video"),{WebGLKernelValueSingleInput:l}=t("./kernel-value/single-input"),{WebGLKernelValueDynamicSingleInput:c}=t("./kernel-value/dynamic-single-input"),{WebGLKernelValueUnsignedInput:p}=t("./kernel-value/unsigned-input"),{WebGLKernelValueDynamicUnsignedInput:d}=t("./kernel-value/dynamic-unsigned-input"),{WebGLKernelValueMemoryOptimizedNumberTexture:g}=t("./kernel-value/memory-optimized-number-texture"),{WebGLKernelValueDynamicMemoryOptimizedNumberTexture:f}=t("./kernel-value/dynamic-memory-optimized-number-texture"),{WebGLKernelValueNumberTexture:m}=t("./kernel-value/number-texture"),{WebGLKernelValueDynamicNumberTexture:y}=t("./kernel-value/dynamic-number-texture"),{WebGLKernelValueSingleArray:x}=t("./kernel-value/single-array"),{WebGLKernelValueDynamicSingleArray:b}=t("./kernel-value/dynamic-single-array"),{WebGLKernelValueSingleArray1DI:w}=t("./kernel-value/single-array1d-i"),{WebGLKernelValueDynamicSingleArray1DI:T}=t("./kernel-value/dynamic-single-array1d-i"),{WebGLKernelValueSingleArray2DI:v}=t("./kernel-value/single-array2d-i"),{WebGLKernelValueDynamicSingleArray2DI:S}=t("./kernel-value/dynamic-single-array2d-i"),{WebGLKernelValueSingleArray3DI:A}=t("./kernel-value/single-array3d-i"),{WebGLKernelValueDynamicSingleArray3DI:_}=t("./kernel-value/dynamic-single-array3d-i"),{WebGLKernelValueArray2:k}=t("./kernel-value/array2"),{WebGLKernelValueArray3:E}=t("./kernel-value/array3"),{WebGLKernelValueArray4:L}=t("./kernel-value/array4"),{WebGLKernelValueUnsignedArray:I}=t("./kernel-value/unsigned-array"),{WebGLKernelValueDynamicUnsignedArray:D}=t("./kernel-value/dynamic-unsigned-array"),$={unsigned:{dynamic:{Boolean:n,Integer:s,Float:i,Array:D,"Array(2)":k,"Array(3)":E,"Array(4)":L,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:d,NumberTexture:y,"ArrayTexture(1)":y,"ArrayTexture(2)":y,"ArrayTexture(3)":y,"ArrayTexture(4)":y,MemoryOptimizedNumberTexture:f,HTMLCanvas:o,HTMLImage:o,HTMLImageArray:!1,HTMLVideo:h},static:{Boolean:n,Float:i,Integer:s,Array:I,"Array(2)":k,"Array(3)":E,"Array(4)":L,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:p,NumberTexture:m,"ArrayTexture(1)":m,"ArrayTexture(2)":m,"ArrayTexture(3)":m,"ArrayTexture(4)":m,MemoryOptimizedNumberTexture:g,HTMLCanvas:a,HTMLImage:a,HTMLImageArray:!1,HTMLVideo:u}},single:{dynamic:{Boolean:n,Integer:s,Float:i,Array:b,"Array(2)":k,"Array(3)":E,"Array(4)":L,"Array1D(2)":T,"Array1D(3)":T,"Array1D(4)":T,"Array2D(2)":S,"Array2D(3)":S,"Array2D(4)":S,"Array3D(2)":_,"Array3D(3)":_,"Array3D(4)":_,Input:c,NumberTexture:y,"ArrayTexture(1)":y,"ArrayTexture(2)":y,"ArrayTexture(3)":y,"ArrayTexture(4)":y,MemoryOptimizedNumberTexture:f,HTMLCanvas:o,HTMLImage:o,HTMLImageArray:!1,HTMLVideo:h},static:{Boolean:n,Float:i,Integer:s,Array:x,"Array(2)":k,"Array(3)":E,"Array(4)":L,"Array1D(2)":w,"Array1D(3)":w,"Array1D(4)":w,"Array2D(2)":v,"Array2D(3)":v,"Array2D(4)":v,"Array3D(2)":A,"Array3D(3)":A,"Array3D(4)":A,Input:l,NumberTexture:m,"ArrayTexture(1)":m,"ArrayTexture(2)":m,"ArrayTexture(3)":m,"ArrayTexture(4)":m,MemoryOptimizedNumberTexture:g,HTMLCanvas:a,HTMLImage:a,HTMLImageArray:!1,HTMLVideo:u}}};e.exports={lookupKernelValueType:function(t,e,r,n){if(!t)throw new Error("type missing");if(!e)throw new Error("dynamic missing");if(!r)throw new Error("precision missing");n.type&&(t=n.type);const i=$[r][e];if(!1===i[t])return null;if(void 0===i[t])throw new Error(`Could not find a KernelValue for ${t}`);return i[t]},kernelValueMaps:$}},{"./kernel-value/array2":41,"./kernel-value/array3":42,"./kernel-value/array4":43,"./kernel-value/boolean":44,"./kernel-value/dynamic-html-image":45,"./kernel-value/dynamic-html-video":46,"./kernel-value/dynamic-memory-optimized-number-texture":47,"./kernel-value/dynamic-number-texture":48,"./kernel-value/dynamic-single-array":49,"./kernel-value/dynamic-single-array1d-i":50,"./kernel-value/dynamic-single-array2d-i":51,"./kernel-value/dynamic-single-array3d-i":52,"./kernel-value/dynamic-single-input":53,"./kernel-value/dynamic-unsigned-array":54,"./kernel-value/dynamic-unsigned-input":55,"./kernel-value/float":56,"./kernel-value/html-image":57,"./kernel-value/html-video":58,"./kernel-value/integer":60,"./kernel-value/memory-optimized-number-texture":61,"./kernel-value/number-texture":62,"./kernel-value/single-array":63,"./kernel-value/single-array1d-i":64,"./kernel-value/single-array2d-i":65,"./kernel-value/single-array3d-i":66,"./kernel-value/single-input":67,"./kernel-value/unsigned-array":68,"./kernel-value/unsigned-input":69}],40:[function(t,e,r){const{WebGLKernelValue:n}=t("./index"),{Input:i}=t("../../../input");e.exports={WebGLKernelArray:class extends n{checkSize(t,e){if(!this.kernel.validate)return;const{maxTextureSize:r}=this.kernel.constructor.features;if(t>r||e>r)throw t>e?new Error(`Argument texture width of ${t} larger than maximum size of ${r} for your GPU`):t<e?new Error(`Argument texture height of ${e} larger than maximum size of ${r} for your GPU`):new Error(`Argument texture height and width of ${e} larger than maximum size of ${r} for your GPU`)}setup(){this.requestTexture(),this.setupTexture(),this.defineTexture()}requestTexture(){this.texture=this.onRequestTexture()}defineTexture(){const{context:t}=this;t.activeTexture(this.contextHandle),t.bindTexture(t.TEXTURE_2D,this.texture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST)}setupTexture(){this.contextHandle=this.onRequestContextHandle(),this.index=this.onRequestIndex(),this.dimensionsId=this.id+"Dim",this.sizeId=this.id+"Size"}getBitRatio(t){if(Array.isArray(t[0]))return this.getBitRatio(t[0]);if(t.constructor===i)return this.getBitRatio(t.value);switch(t.constructor){case Uint8ClampedArray:case Uint8Array:case Int8Array:return 1;case Uint16Array:case Int16Array:return 2;case Float32Array:case Int32Array:default:return 4}}destroy(){this.prevArg&&this.prevArg.delete(),this.context.deleteTexture(this.texture)}}}},{"../../../input":110,"./index":59}],41:[function(t,e,r){const{WebGLKernelValue:n}=t("./index");e.exports={WebGLKernelValueArray2:class extends n{constructor(t,e){super(t,e),this.uploadValue=t}getSource(t){return"constants"===this.origin?`const vec2 ${this.id} = vec2(${t[0]},${t[1]});\n`:`uniform vec2 ${this.id};\n`}getStringValueHandler(){return"constants"===this.origin?"":`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform2fv(this.id,this.uploadValue=t)}}}},{"./index":59}],42:[function(t,e,r){const{WebGLKernelValue:n}=t("./index");e.exports={WebGLKernelValueArray3:class extends n{constructor(t,e){super(t,e),this.uploadValue=t}getSource(t){return"constants"===this.origin?`const vec3 ${this.id} = vec3(${t[0]},${t[1]},${t[2]});\n`:`uniform vec3 ${this.id};\n`}getStringValueHandler(){return"constants"===this.origin?"":`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform3fv(this.id,this.uploadValue=t)}}}},{"./index":59}],43:[function(t,e,r){const{WebGLKernelValue:n}=t("./index");e.exports={WebGLKernelValueArray4:class extends n{constructor(t,e){super(t,e),this.uploadValue=t}getSource(t){return"constants"===this.origin?`const vec4 ${this.id} = vec4(${t[0]},${t[1]},${t[2]},${t[3]});\n`:`uniform vec4 ${this.id};\n`}getStringValueHandler(){return"constants"===this.origin?"":`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform4fv(this.id,this.uploadValue=t)}}}},{"./index":59}],44:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValue:i}=t("./index");e.exports={WebGLKernelValueBoolean:class extends i{constructor(t,e){super(t,e),this.uploadValue=t}getSource(t){return"constants"===this.origin?`const bool ${this.id} = ${t};\n`:`uniform bool ${this.id};\n`}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform1i(this.id,this.uploadValue=t)}}}},{"../../../utils":114,"./index":59}],45:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueHTMLImage:i}=t("./html-image");e.exports={WebGLKernelValueDynamicHTMLImage:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){const{width:e,height:r}=t;this.checkSize(e,r),this.dimensions=[e,r,1],this.textureSize=[e,r],this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./html-image":57}],46:[function(t,e,r){const{WebGLKernelValueDynamicHTMLImage:n}=t("./dynamic-html-image");e.exports={WebGLKernelValueDynamicHTMLVideo:class extends n{}}},{"./dynamic-html-image":45}],47:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueMemoryOptimizedNumberTexture:i}=t("./memory-optimized-number-texture");e.exports={WebGLKernelValueDynamicMemoryOptimizedNumberTexture:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.dimensions=t.dimensions,this.checkSize(t.size[0],t.size[1]),this.textureSize=t.size,this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./memory-optimized-number-texture":61}],48:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueNumberTexture:i}=t("./number-texture");e.exports={WebGLKernelValueDynamicNumberTexture:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.dimensions=t.dimensions,this.checkSize(t.size[0],t.size[1]),this.textureSize=t.size,this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./number-texture":62}],49:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray:i}=t("./single-array");e.exports={WebGLKernelValueDynamicSingleArray:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.dimensions=n.getDimensions(t,!0),this.textureSize=n.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./single-array":63}],50:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray1DI:i}=t("./single-array1d-i");e.exports={WebGLKernelValueDynamicSingleArray1DI:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.setShape(t),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./single-array1d-i":64}],51:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray2DI:i}=t("./single-array2d-i");e.exports={WebGLKernelValueDynamicSingleArray2DI:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.setShape(t),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./single-array2d-i":65}],52:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray3DI:i}=t("./single-array3d-i");e.exports={WebGLKernelValueDynamicSingleArray3DI:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.setShape(t),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./single-array3d-i":66}],53:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleInput:i}=t("./single-input");e.exports={WebGLKernelValueDynamicSingleInput:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){let[e,r,i]=t.size;this.dimensions=new Int32Array([e||1,r||1,i||1]),this.textureSize=n.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./single-input":67}],54:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueUnsignedArray:i}=t("./unsigned-array");e.exports={WebGLKernelValueDynamicUnsignedArray:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){this.dimensions=n.getDimensions(t,!0),this.textureSize=n.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]);const e=this.getTransferArrayType(t);this.preUploadValue=new e(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./unsigned-array":68}],55:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueUnsignedInput:i}=t("./unsigned-input");e.exports={WebGLKernelValueDynamicUnsignedInput:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}updateValue(t){let[e,r,i]=t.size;this.dimensions=new Int32Array([e||1,r||1,i||1]),this.textureSize=n.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]);const s=this.getTransferArrayType(t.value);this.preUploadValue=new s(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./unsigned-input":69}],56:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValue:i}=t("./index");e.exports={WebGLKernelValueFloat:class extends i{constructor(t,e){super(t,e),this.uploadValue=t}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(t){return"constants"===this.origin?Number.isInteger(t)?`const float ${this.id} = ${t}.0;\n`:`const float ${this.id} = ${t};\n`:`uniform float ${this.id};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform1f(this.id,this.uploadValue=t)}}}},{"../../../utils":114,"./index":59}],57:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueHTMLImage:class extends i{constructor(t,e){super(t,e);const{width:r,height:n}=t;this.checkSize(r,n),this.dimensions=[r,n,1],this.textureSize=[r,n],this.uploadValue=t}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!0),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,this.uploadValue=t),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],58:[function(t,e,r){const{WebGLKernelValueHTMLImage:n}=t("./html-image");e.exports={WebGLKernelValueHTMLVideo:class extends n{}}},{"./html-image":57}],59:[function(t,e,r){const{utils:n}=t("../../../utils"),{KernelValue:i}=t("../../kernel-value");e.exports={WebGLKernelValue:class extends i{constructor(t,e){super(t,e),this.dimensionsId=null,this.sizeId=null,this.initialValueConstructor=t.constructor,this.onRequestTexture=e.onRequestTexture,this.onRequestIndex=e.onRequestIndex,this.uploadValue=null,this.textureSize=null,this.bitRatio=null,this.prevArg=null}get id(){return`${this.origin}_${n.sanitizeName(this.name)}`}setup(){}getTransferArrayType(t){if(Array.isArray(t[0]))return this.getTransferArrayType(t[0]);switch(t.constructor){case Array:case Int32Array:case Int16Array:case Int8Array:return Float32Array;case Uint8ClampedArray:case Uint8Array:case Uint16Array:case Uint32Array:case Float32Array:case Float64Array:return t.constructor}return console.warn("Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros"),t.constructor}getStringValueHandler(){throw new Error(`"getStringValueHandler" not implemented on ${this.constructor.name}`)}getVariablePrecisionString(){return this.kernel.getVariablePrecisionString(this.textureSize||void 0,this.tactic||void 0)}destroy(){}}}},{"../../../utils":114,"../../kernel-value":35}],60:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValue:i}=t("./index");e.exports={WebGLKernelValueInteger:class extends i{constructor(t,e){super(t,e),this.uploadValue=t}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(t){return"constants"===this.origin?`const int ${this.id} = ${parseInt(t)};\n`:`uniform int ${this.id};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform1i(this.id,this.uploadValue=t)}}}},{"../../../utils":114,"./index":59}],61:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array"),s="Source and destination textures are the same.  Use immutable = true and manually cleanup kernel output texture memory with texture.delete()";e.exports={WebGLKernelValueMemoryOptimizedNumberTexture:class extends i{constructor(t,e){super(t,e);const[r,n]=t.size;this.checkSize(r,n),this.dimensions=t.dimensions,this.textureSize=t.size,this.uploadValue=t.texture,this.forceUploadEachRun=!0}setup(){this.setupTexture()}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName}.texture;\n`}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);if(this.checkContext&&t.context!==this.context)throw new Error(`Value ${this.name} (${this.type}) must be from same context`);const{kernel:e,context:r}=this;if(e.pipeline)if(e.immutable)e.updateTextureArgumentRefs(this,t);else{if(e.texture&&e.texture.texture===t.texture)throw new Error(s);if(e.mappedTextures){const{mappedTextures:r}=e;for(let e=0;e<r.length;e++)if(r[e].texture===t.texture)throw new Error(s)}}r.activeTexture(this.contextHandle),r.bindTexture(r.TEXTURE_2D,this.uploadValue=t.texture),this.kernel.setUniform1i(this.id,this.index)}},sameError:s}},{"../../../utils":114,"./array":40}],62:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array"),{sameError:s}=t("./memory-optimized-number-texture");e.exports={WebGLKernelValueNumberTexture:class extends i{constructor(t,e){super(t,e);const[r,n]=t.size;this.checkSize(r,n);const{size:i,dimensions:s}=t;this.bitRatio=this.getBitRatio(t),this.dimensions=s,this.textureSize=i,this.uploadValue=t.texture,this.forceUploadEachRun=!0}setup(){this.setupTexture()}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName}.texture;\n`}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);if(this.checkContext&&t.context!==this.context)throw new Error(`Value ${this.name} (${this.type}) must be from same context`);const{kernel:e,context:r}=this;if(e.pipeline)if(e.immutable)e.updateTextureArgumentRefs(this,t);else{if(e.texture&&e.texture.texture===t.texture)throw new Error(s);if(e.mappedTextures){const{mappedTextures:r}=e;for(let e=0;e<r.length;e++)if(r[e].texture===t.texture)throw new Error(s)}}r.activeTexture(this.contextHandle),r.bindTexture(r.TEXTURE_2D,this.uploadValue=t.texture),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40,"./memory-optimized-number-texture":61}],63:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueSingleArray:class extends i{constructor(t,e){super(t,e),this.bitRatio=4,this.dimensions=n.getDimensions(t,!0),this.textureSize=n.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return n.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],64:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueSingleArray1DI:class extends i{constructor(t,e){super(t,e),this.bitRatio=4,this.setShape(t)}setShape(t){const e=n.getDimensions(t,!0);this.textureSize=n.getMemoryOptimizedFloatTextureSize(e,this.bitRatio),this.dimensions=new Int32Array([e[1],1,1]),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return n.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flatten2dArrayTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],65:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueSingleArray2DI:class extends i{constructor(t,e){super(t,e),this.bitRatio=4,this.setShape(t)}setShape(t){const e=n.getDimensions(t,!0);this.textureSize=n.getMemoryOptimizedFloatTextureSize(e,this.bitRatio),this.dimensions=new Int32Array([e[1],e[2],1]),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return n.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flatten3dArrayTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],66:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueSingleArray3DI:class extends i{constructor(t,e){super(t,e),this.bitRatio=4,this.setShape(t)}setShape(t){const e=n.getDimensions(t,!0);this.textureSize=n.getMemoryOptimizedFloatTextureSize(e,this.bitRatio),this.dimensions=new Int32Array([e[1],e[2],e[3]]),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return n.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}, uploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flatten4dArrayTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],67:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueSingleInput:class extends i{constructor(t,e){super(t,e),this.bitRatio=4;let[r,i,s]=t.size;this.dimensions=new Int32Array([r||1,i||1,s||1]),this.textureSize=n.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength)}getStringValueHandler(){return n.linesToString([`const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,`flattenTo(${this.varName}.value, uploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t.value,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],68:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueUnsignedArray:class extends i{constructor(t,e){super(t,e),this.bitRatio=this.getBitRatio(t),this.dimensions=n.getDimensions(t,!0),this.textureSize=n.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]),this.TranserArrayType=this.getTransferArrayType(t),this.preUploadValue=new this.TranserArrayType(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer)}getStringValueHandler(){return n.linesToString([`const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,`const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,`flattenTo(${this.varName}, preUploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t,this.preUploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.UNSIGNED_BYTE,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],69:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("./array");e.exports={WebGLKernelValueUnsignedInput:class extends i{constructor(t,e){super(t,e),this.bitRatio=this.getBitRatio(t);const[r,i,s]=t.size;this.dimensions=new Int32Array([r||1,i||1,s||1]),this.textureSize=n.getMemoryOptimizedPackedTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*(4/this.bitRatio),this.checkSize(this.textureSize[0],this.textureSize[1]),this.TranserArrayType=this.getTransferArrayType(t.value),this.preUploadValue=new this.TranserArrayType(this.uploadArrayLength),this.uploadValue=new Uint8Array(this.preUploadValue.buffer)}getStringValueHandler(){return n.linesToString([`const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,`const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,`flattenTo(${this.varName}.value, preUploadValue_${this.name})`])}getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(value.constructor);const{context:e}=this;n.flattenTo(t.value,this.preUploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.UNSIGNED_BYTE,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"./array":40}],70:[function(t,e,r){const{GLKernel:n}=t("../gl/kernel"),{FunctionBuilder:i}=t("../function-builder"),{WebGLFunctionNode:s}=t("./function-node"),{utils:a}=t("../../utils"),o=t("../../plugins/math-random-uniformly-distributed"),{fragmentShader:u}=t("./fragment-shader"),{vertexShader:h}=t("./vertex-shader"),{glKernelString:l}=t("../gl/kernel-string"),{lookupKernelValueType:c}=t("./kernel-value-maps");let p=null,d=null,g=null,f=null,m=null;const y=[o],x=[],b={};e.exports={WebGLKernel:class extends n{static get isSupported(){return null!==p||(this.setupFeatureChecks(),p=this.isContextMatch(g)),p}static setupFeatureChecks(){"undefined"!=typeof document?d=document.createElement("canvas"):"undefined"!=typeof OffscreenCanvas&&(d=new OffscreenCanvas(0,0)),d&&(g=d.getContext("webgl")||d.getContext("experimental-webgl"),g&&g.getExtension&&(f={OES_texture_float:g.getExtension("OES_texture_float"),OES_texture_float_linear:g.getExtension("OES_texture_float_linear"),OES_element_index_uint:g.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:g.getExtension("WEBGL_draw_buffers")},m=this.getFeatures()))}static isContextMatch(t){return"undefined"!=typeof WebGLRenderingContext&&t instanceof WebGLRenderingContext}static getIsTextureFloat(){return Boolean(f.OES_texture_float)}static getIsDrawBuffers(){return Boolean(f.WEBGL_draw_buffers)}static getChannelCount(){return f.WEBGL_draw_buffers?g.getParameter(f.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL):1}static getMaxTextureSize(){return g.getParameter(g.MAX_TEXTURE_SIZE)}static lookupKernelValueType(t,e,r,n){return c(t,e,r,n)}static get testCanvas(){return d}static get testContext(){return g}static get features(){return m}static get fragmentShader(){return u}static get vertexShader(){return h}constructor(t,e){super(t,e),this.program=null,this.pipeline=e.pipeline,this.endianness=a.systemEndianness(),this.extensions={},this.argumentTextureCount=0,this.constantTextureCount=0,this.fragShader=null,this.vertShader=null,this.drawBuffersMap=null,this.maxTexSize=null,this.onRequestSwitchKernel=null,this.texture=null,this.mappedTextures=null,this.mergeSettings(t.settings||e),this.threadDim=null,this.framebuffer=null,this.buffer=null,this.textureCache=[],this.programUniformLocationCache={},this.uniform1fCache={},this.uniform1iCache={},this.uniform2fCache={},this.uniform2fvCache={},this.uniform2ivCache={},this.uniform3fvCache={},this.uniform3ivCache={},this.uniform4fvCache={},this.uniform4ivCache={}}initCanvas(){if("undefined"!=typeof document){const t=document.createElement("canvas");return t.width=2,t.height=2,t}if("undefined"!=typeof OffscreenCanvas)return new OffscreenCanvas(0,0)}initContext(){const t={alpha:!1,depth:!1,antialias:!1};return this.canvas.getContext("webgl",t)||this.canvas.getContext("experimental-webgl",t)}initPlugins(t){const e=[],{source:r}=this;if("string"==typeof r)for(let t=0;t<y.length;t++){const n=y[t];r.match(n.functionMatch)&&e.push(n)}else if("object"==typeof r&&t.pluginNames)for(let r=0;r<y.length;r++){const n=y[r];t.pluginNames.some((t=>t===n.name))&&e.push(n)}return e}initExtensions(){this.extensions={OES_texture_float:this.context.getExtension("OES_texture_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear"),OES_element_index_uint:this.context.getExtension("OES_element_index_uint"),WEBGL_draw_buffers:this.context.getExtension("WEBGL_draw_buffers"),WEBGL_color_buffer_float:this.context.getExtension("WEBGL_color_buffer_float")}}validateSettings(t){if(!this.validate)return void(this.texSize=a.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output));const{features:e}=this.constructor;if(!0===this.optimizeFloatMemory&&!e.isTextureFloat)throw new Error("Float textures are not supported");if("single"===this.precision&&!e.isFloatRead)throw new Error("Single precision not supported");if(!this.graphical&&null===this.precision&&e.isTextureFloat&&(this.precision=e.isFloatRead?"single":"unsigned"),this.subKernels&&this.subKernels.length>0&&!this.extensions.WEBGL_draw_buffers)throw new Error("could not instantiate draw buffers extension");if(null===this.fixIntegerDivisionAccuracy?this.fixIntegerDivisionAccuracy=!e.isIntegerDivisionAccurate:this.fixIntegerDivisionAccuracy&&e.isIntegerDivisionAccurate&&(this.fixIntegerDivisionAccuracy=!1),this.checkOutput(),!this.output||0===this.output.length){if(1!==t.length)throw new Error("Auto output only supported for kernels with only one input");const e=a.getVariableType(t[0],this.strictIntegers);switch(e){case"Array":this.output=a.getDimensions(e);break;case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":this.output=t[0].output;break;default:throw new Error("Auto output not supported for input type: "+e)}}if(this.graphical){if(2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");return"precision"===this.precision&&(this.precision="unsigned",console.warn("Cannot use graphical mode and single precision at the same time")),void(this.texSize=a.clone(this.output))}null===this.precision&&e.isTextureFloat&&(this.precision="single"),this.texSize=a.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output),this.checkTextureSize()}updateMaxTexSize(){const{texSize:t,canvas:e}=this;if(null===this.maxTexSize){let r=x.indexOf(e);-1===r&&(r=x.length,x.push(e),b[r]=[t[0],t[1]]),this.maxTexSize=b[r]}this.maxTexSize[0]<t[0]&&(this.maxTexSize[0]=t[0]),this.maxTexSize[1]<t[1]&&(this.maxTexSize[1]=t[1])}setupArguments(t){this.kernelArguments=[],this.argumentTextureCount=0;const e=null===this.argumentTypes;if(e&&(this.argumentTypes=[]),this.argumentSizes=[],this.argumentBitRatios=[],t.length<this.argumentNames.length)throw new Error("not enough arguments for kernel");if(t.length>this.argumentNames.length)throw new Error("too many arguments for kernel");const{context:r}=this;let n=0;const i=()=>this.createTexture(),s=()=>this.constantTextureCount+n++,o=t=>{this.switchKernels({type:"argumentMismatch",needed:t})},u=()=>r.TEXTURE0+this.constantTextureCount+this.argumentTextureCount++;for(let n=0;n<t.length;n++){const h=t[n],l=this.argumentNames[n];let c;e?(c=a.getVariableType(h,this.strictIntegers),this.argumentTypes.push(c)):c=this.argumentTypes[n];const p=this.constructor.lookupKernelValueType(c,this.dynamicArguments?"dynamic":"static",this.precision,t[n]);if(null===p)return this.requestFallback(t);const d=new p(h,{name:l,type:c,tactic:this.tactic,origin:"user",context:r,checkContext:this.checkContext,kernel:this,strictIntegers:this.strictIntegers,onRequestTexture:i,onRequestIndex:s,onUpdateValueMismatch:o,onRequestContextHandle:u});this.kernelArguments.push(d),d.setup(),this.argumentSizes.push(d.textureSize),this.argumentBitRatios[n]=d.bitRatio}}createTexture(){const t=this.context.createTexture();return this.textureCache.push(t),t}setupConstants(t){const{context:e}=this;this.kernelConstants=[],this.forceUploadKernelConstants=[];let r=null===this.constantTypes;r&&(this.constantTypes={}),this.constantBitRatios={};let n=0;for(const i in this.constants){const s=this.constants[i];let o;r?(o=a.getVariableType(s,this.strictIntegers),this.constantTypes[i]=o):o=this.constantTypes[i];const u=this.constructor.lookupKernelValueType(o,"static",this.precision,s);if(null===u)return this.requestFallback(t);const h=new u(s,{name:i,type:o,tactic:this.tactic,origin:"constants",context:this.context,checkContext:this.checkContext,kernel:this,strictIntegers:this.strictIntegers,onRequestTexture:()=>this.createTexture(),onRequestIndex:()=>n++,onRequestContextHandle:()=>e.TEXTURE0+this.constantTextureCount++});this.constantBitRatios[i]=h.bitRatio,this.kernelConstants.push(h),h.setup(),h.forceUploadEachRun&&this.forceUploadKernelConstants.push(h)}}build(){if(this.built)return;if(this.initExtensions(),this.validateSettings(arguments),this.setupConstants(arguments),this.fallbackRequested)return;if(this.setupArguments(arguments),this.fallbackRequested)return;this.updateMaxTexSize(),this.translateSource();const t=this.pickRenderStrategy(arguments);if(t)return t;const{texSize:e,context:r,canvas:n}=this;r.enable(r.SCISSOR_TEST),this.pipeline&&this.precision,r.viewport(0,0,this.maxTexSize[0],this.maxTexSize[1]),n.width=this.maxTexSize[0],n.height=this.maxTexSize[1];const i=this.threadDim=Array.from(this.output);for(;i.length<3;)i.push(1);const s=this.getVertexShader(arguments),a=r.createShader(r.VERTEX_SHADER);r.shaderSource(a,s),r.compileShader(a),this.vertShader=a;const o=this.getFragmentShader(arguments),u=r.createShader(r.FRAGMENT_SHADER);if(r.shaderSource(u,o),r.compileShader(u),this.fragShader=u,this.debug&&(console.log("GLSL Shader Output:"),console.log(o)),!r.getShaderParameter(a,r.COMPILE_STATUS))throw new Error("Error compiling vertex shader: "+r.getShaderInfoLog(a));if(!r.getShaderParameter(u,r.COMPILE_STATUS))throw new Error("Error compiling fragment shader: "+r.getShaderInfoLog(u));const h=this.program=r.createProgram();r.attachShader(h,a),r.attachShader(h,u),r.linkProgram(h),this.framebuffer=r.createFramebuffer(),this.framebuffer.width=e[0],this.framebuffer.height=e[1],this.rawValueFramebuffers={};const l=new Float32Array([-1,-1,1,-1,-1,1,1,1]),c=new Float32Array([0,0,1,0,0,1,1,1]),p=l.byteLength;let d=this.buffer;d?r.bindBuffer(r.ARRAY_BUFFER,d):(d=this.buffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,d),r.bufferData(r.ARRAY_BUFFER,l.byteLength+c.byteLength,r.STATIC_DRAW)),r.bufferSubData(r.ARRAY_BUFFER,0,l),r.bufferSubData(r.ARRAY_BUFFER,p,c);const g=r.getAttribLocation(this.program,"aPos");r.enableVertexAttribArray(g),r.vertexAttribPointer(g,2,r.FLOAT,!1,0,0);const f=r.getAttribLocation(this.program,"aTexCoord");r.enableVertexAttribArray(f),r.vertexAttribPointer(f,2,r.FLOAT,!1,0,p),r.bindFramebuffer(r.FRAMEBUFFER,this.framebuffer);let m=0;r.useProgram(this.program);for(let t in this.constants)this.kernelConstants[m++].updateValue(this.constants[t]);this._setupOutputTexture(),null!==this.subKernels&&this.subKernels.length>0&&(this._mappedTextureSwitched={},this._setupSubOutputTextures()),this.buildSignature(arguments),this.built=!0}translateSource(){const t=i.fromKernel(this,s,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy});this.translatedSource=t.getPrototypeString("kernel"),this.setupReturnTypes(t)}setupReturnTypes(t){if(this.graphical||this.returnType||(this.returnType=t.getKernelResultType()),this.subKernels&&this.subKernels.length>0)for(let e=0;e<this.subKernels.length;e++){const r=this.subKernels[e];r.returnType||(r.returnType=t.getSubKernelResultType(e))}}run(){const{kernelArguments:t,texSize:e,forceUploadKernelConstants:r,context:n}=this;n.useProgram(this.program),n.scissor(0,0,e[0],e[1]),this.dynamicOutput&&(this.setUniform3iv("uOutputDim",new Int32Array(this.threadDim)),this.setUniform2iv("uTexSize",e)),this.setUniform2f("ratio",e[0]/this.maxTexSize[0],e[1]/this.maxTexSize[1]);for(let t=0;t<r.length;t++){const e=r[t];if(e.updateValue(this.constants[e.name]),this.switchingKernels)return}for(let e=0;e<t.length;e++)if(t[e].updateValue(arguments[e]),this.switchingKernels)return;if(this.plugins)for(let t=0;t<this.plugins.length;t++){const e=this.plugins[t];e.onBeforeRun&&e.onBeforeRun(this)}if(this.graphical)return this.pipeline?(n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),this.immutable&&this._replaceOutputTexture(),n.drawArrays(n.TRIANGLE_STRIP,0,4),this.immutable?this.texture.clone():this.texture):(n.bindRenderbuffer(n.RENDERBUFFER,null),n.bindFramebuffer(n.FRAMEBUFFER,null),void n.drawArrays(n.TRIANGLE_STRIP,0,4));n.bindFramebuffer(n.FRAMEBUFFER,this.framebuffer),this.immutable&&this._replaceOutputTexture(),null!==this.subKernels&&(this.immutable&&this._replaceSubOutputTextures(),this.drawBuffers()),n.drawArrays(n.TRIANGLE_STRIP,0,4)}drawBuffers(){this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap)}getInternalFormat(){return this.context.RGBA}getTextureFormat(){const{context:t}=this;if(this.getInternalFormat()===t.RGBA)return t.RGBA;throw new Error("Unknown internal format")}_replaceOutputTexture(){if(this.texture.beforeMutate()||this._textureSwitched){const t=this.context;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture.texture,0),this._textureSwitched=!1}}_setupOutputTexture(){const t=this.context,e=this.texSize;if(this.texture)return void t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture.texture,0);const r=this.createTexture();t.activeTexture(t.TEXTURE0+this.constantTextureCount+this.argumentTextureCount),t.bindTexture(t.TEXTURE_2D,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST);const n=this.getInternalFormat();"single"===this.precision?t.texImage2D(t.TEXTURE_2D,0,n,e[0],e[1],0,t.RGBA,t.FLOAT,null):t.texImage2D(t.TEXTURE_2D,0,n,e[0],e[1],0,n,t.UNSIGNED_BYTE,null),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0),this.texture=new this.TextureConstructor({texture:r,size:e,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this})}_replaceSubOutputTextures(){const t=this.context;for(let e=0;e<this.mappedTextures.length;e++){const r=this.mappedTextures[e];(r.beforeMutate()||this._mappedTextureSwitched[e])&&(t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e+1,t.TEXTURE_2D,r.texture,0),this._mappedTextureSwitched[e]=!1)}}_setupSubOutputTextures(){const t=this.context;if(this.mappedTextures){for(let e=0;e<this.subKernels.length;e++)t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e+1,t.TEXTURE_2D,this.mappedTextures[e].texture,0);return}const e=this.texSize;this.drawBuffersMap=[t.COLOR_ATTACHMENT0],this.mappedTextures=[];for(let r=0;r<this.subKernels.length;r++){const n=this.createTexture();this.drawBuffersMap.push(t.COLOR_ATTACHMENT0+r+1),t.activeTexture(t.TEXTURE0+this.constantTextureCount+this.argumentTextureCount+r),t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),"single"===this.precision?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.FLOAT,null):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.UNSIGNED_BYTE,null),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r+1,t.TEXTURE_2D,n,0),this.mappedTextures.push(new this.TextureConstructor({texture:n,size:e,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this}))}}setUniform1f(t,e){if(this.uniform1fCache.hasOwnProperty(t)&&e===this.uniform1fCache[t])return;this.uniform1fCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform1f(r,e)}setUniform1i(t,e){if(this.uniform1iCache.hasOwnProperty(t)&&e===this.uniform1iCache[t])return;this.uniform1iCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform1i(r,e)}setUniform2f(t,e,r){if(this.uniform2fCache.hasOwnProperty(t)){const n=this.uniform2fCache[t];if(e===n[0]&&r===n[1])return}this.uniform2fCache[t]=[e,r];const n=this.getUniformLocation(t);this.context.uniform2f(n,e,r)}setUniform2fv(t,e){if(this.uniform2fvCache.hasOwnProperty(t)){const r=this.uniform2fvCache[t];if(e[0]===r[0]&&e[1]===r[1])return}this.uniform2fvCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform2fv(r,e)}setUniform2iv(t,e){if(this.uniform2ivCache.hasOwnProperty(t)){const r=this.uniform2ivCache[t];if(e[0]===r[0]&&e[1]===r[1])return}this.uniform2ivCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform2iv(r,e)}setUniform3fv(t,e){if(this.uniform3fvCache.hasOwnProperty(t)){const r=this.uniform3fvCache[t];if(e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2])return}this.uniform3fvCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform3fv(r,e)}setUniform3iv(t,e){if(this.uniform3ivCache.hasOwnProperty(t)){const r=this.uniform3ivCache[t];if(e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2])return}this.uniform3ivCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform3iv(r,e)}setUniform4fv(t,e){if(this.uniform4fvCache.hasOwnProperty(t)){const r=this.uniform4fvCache[t];if(e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2]&&e[3]===r[3])return}this.uniform4fvCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform4fv(r,e)}setUniform4iv(t,e){if(this.uniform4ivCache.hasOwnProperty(t)){const r=this.uniform4ivCache[t];if(e[0]===r[0]&&e[1]===r[1]&&e[2]===r[2]&&e[3]===r[3])return}this.uniform4ivCache[t]=e;const r=this.getUniformLocation(t);this.context.uniform4iv(r,e)}getUniformLocation(t){return this.programUniformLocationCache.hasOwnProperty(t)?this.programUniformLocationCache[t]:this.programUniformLocationCache[t]=this.context.getUniformLocation(this.program,t)}_getFragShaderArtifactMap(t){return{HEADER:this._getHeaderString(),LOOP_MAX:this._getLoopMaxString(),PLUGINS:this._getPluginsString(),CONSTANTS:this._getConstantsString(),DECODE32_ENDIANNESS:this._getDecode32EndiannessString(),ENCODE32_ENDIANNESS:this._getEncode32EndiannessString(),DIVIDE_WITH_INTEGER_CHECK:this._getDivideWithIntegerCheckString(),INJECTED_NATIVE:this._getInjectedNative(),MAIN_CONSTANTS:this._getMainConstantsString(),MAIN_ARGUMENTS:this._getMainArgumentsString(t),KERNEL:this.getKernelString(),MAIN_RESULT:this.getMainResultString(),FLOAT_TACTIC_DECLARATION:this.getFloatTacticDeclaration(),INT_TACTIC_DECLARATION:this.getIntTacticDeclaration(),SAMPLER_2D_TACTIC_DECLARATION:this.getSampler2DTacticDeclaration(),SAMPLER_2D_ARRAY_TACTIC_DECLARATION:this.getSampler2DArrayTacticDeclaration()}}_getVertShaderArtifactMap(t){return{FLOAT_TACTIC_DECLARATION:this.getFloatTacticDeclaration(),INT_TACTIC_DECLARATION:this.getIntTacticDeclaration(),SAMPLER_2D_TACTIC_DECLARATION:this.getSampler2DTacticDeclaration(),SAMPLER_2D_ARRAY_TACTIC_DECLARATION:this.getSampler2DArrayTacticDeclaration()}}_getHeaderString(){return null!==this.subKernels?"#extension GL_EXT_draw_buffers : require\n":""}_getLoopMaxString(){return this.loopMaxIterations?` ${parseInt(this.loopMaxIterations)};\n`:" 1000;\n"}_getPluginsString(){return this.plugins?this.plugins.map((t=>t.source&&this.source.match(t.functionMatch)?t.source:"")).join("\n"):"\n"}_getConstantsString(){const t=[],{threadDim:e,texSize:r}=this;return this.dynamicOutput?t.push("uniform ivec3 uOutputDim","uniform ivec2 uTexSize"):t.push(`ivec3 uOutputDim = ivec3(${e[0]}, ${e[1]}, ${e[2]})`,`ivec2 uTexSize = ivec2(${r[0]}, ${r[1]})`),a.linesToString(t)}_getTextureCoordinate(){const t=this.subKernels;return null===t||t.length<1?"varying vec2 vTexCoord;\n":"out vec2 vTexCoord;\n"}_getDecode32EndiannessString(){return"LE"===this.endianness?"":"  texel.rgba = texel.abgr;\n"}_getEncode32EndiannessString(){return"LE"===this.endianness?"":"  texel.rgba = texel.abgr;\n"}_getDivideWithIntegerCheckString(){return this.fixIntegerDivisionAccuracy?"float divWithIntCheck(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x) / int(y));\n  }\n  return x / y;\n}\n\nfloat integerCorrectionModulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -(number - (divisor * floor(divWithIntCheck(number, divisor))));\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return number - (divisor * floor(divWithIntCheck(number, divisor)));\n}":""}_getMainArgumentsString(t){const e=[],{argumentNames:r}=this;for(let n=0;n<r.length;n++)e.push(this.kernelArguments[n].getSource(t[n]));return e.join("")}_getInjectedNative(){return this.injectedNative||""}_getMainConstantsString(){const t=[],{constants:e}=this;if(e){let r=0;for(const n in e)this.constants.hasOwnProperty(n)&&t.push(this.kernelConstants[r++].getSource(this.constants[n]))}return t.join("")}getRawValueFramebuffer(t,e){if(this.rawValueFramebuffers[t]||(this.rawValueFramebuffers[t]={}),!this.rawValueFramebuffers[t][e]){const r=this.context.createFramebuffer();r.width=t,r.height=e,this.rawValueFramebuffers[t][e]=r}return this.rawValueFramebuffers[t][e]}getKernelResultDeclaration(){switch(this.returnType){case"Array(2)":return"vec2 kernelResult";case"Array(3)":return"vec3 kernelResult";case"Array(4)":return"vec4 kernelResult";case"LiteralInteger":case"Float":case"Number":case"Integer":return"float kernelResult";default:if(this.graphical)return"float kernelResult";throw new Error(`unrecognized output type "${this.returnType}"`)}}getKernelString(){const t=[this.getKernelResultDeclaration()],{subKernels:e}=this;if(null!==e)switch(this.returnType){case"Number":case"Float":case"Integer":for(let r=0;r<e.length;r++){const n=e[r];t.push("Integer"===n.returnType?`int subKernelResult_${n.name} = 0`:`float subKernelResult_${n.name} = 0.0`)}break;case"Array(2)":for(let r=0;r<e.length;r++)t.push(`vec2 subKernelResult_${e[r].name}`);break;case"Array(3)":for(let r=0;r<e.length;r++)t.push(`vec3 subKernelResult_${e[r].name}`);break;case"Array(4)":for(let r=0;r<e.length;r++)t.push(`vec4 subKernelResult_${e[r].name}`)}return a.linesToString(t)+this.translatedSource}getMainResultGraphical(){return a.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragColor = actualColor"])}getMainResultPackedPixels(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return this.getMainResultKernelPackedPixels()+this.getMainResultSubKernelPackedPixels();default:throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`)}}getMainResultKernelPackedPixels(){return a.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  gl_FragData[0] = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(kernelResult)`])}getMainResultSubKernelPackedPixels(){const t=[];if(!this.subKernels)return"";for(let e=0;e<this.subKernels.length;e++)"Integer"===this.subKernels[e].returnType?t.push(`  gl_FragData[${e+1}] = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(float(subKernelResult_${this.subKernels[e].name}))`):t.push(`  gl_FragData[${e+1}] = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(subKernelResult_${this.subKernels[e].name})`);return a.linesToString(t)}getMainResultMemoryOptimizedFloats(){const t=["  index *= 4"];switch(this.returnType){case"Number":case"Integer":case"Float":const e=["r","g","b","a"];for(let r=0;r<e.length;r++){const n=e[r];this.getMainResultKernelMemoryOptimizedFloats(t,n),this.getMainResultSubKernelMemoryOptimizedFloats(t,n),r+1<e.length&&t.push("  index += 1")}break;default:throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`)}return a.linesToString(t)}getMainResultKernelMemoryOptimizedFloats(t,e){t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  gl_FragData[0].${e} = kernelResult`)}getMainResultSubKernelMemoryOptimizedFloats(t,e){if(!this.subKernels)return t;for(let r=0;r<this.subKernels.length;r++)"Integer"===this.subKernels[r].returnType?t.push(`  gl_FragData[${r+1}].${e} = float(subKernelResult_${this.subKernels[r].name})`):t.push(`  gl_FragData[${r+1}].${e} = subKernelResult_${this.subKernels[r].name}`)}getMainResultKernelNumberTexture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult"]}getMainResultSubKernelNumberTexture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e){const r=this.subKernels[e];"Integer"===r.returnType?t.push(`  gl_FragData[${e+1}][0] = float(subKernelResult_${r.name})`):t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${r.name}`)}return t}getMainResultKernelArray2Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult[0]","  gl_FragData[0][1] = kernelResult[1]"]}getMainResultSubKernelArray2Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`);return t}getMainResultKernelArray3Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0][0] = kernelResult[0]","  gl_FragData[0][1] = kernelResult[1]","  gl_FragData[0][2] = kernelResult[2]"]}getMainResultSubKernelArray3Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`,`  gl_FragData[${e+1}][2] = subKernelResult_${this.subKernels[e].name}[2]`);return t}getMainResultKernelArray4Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  gl_FragData[0] = kernelResult"]}getMainResultSubKernelArray4Texture(){const t=[];if(!this.subKernels)return t;switch(this.returnType){case"Number":case"Float":case"Integer":for(let e=0;e<this.subKernels.length;++e)"Integer"===this.subKernels[e].returnType?t.push(`  gl_FragData[${e+1}] = float(subKernelResult_${this.subKernels[e].name})`):t.push(`  gl_FragData[${e+1}] = subKernelResult_${this.subKernels[e].name}`);break;case"Array(2)":for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`);break;case"Array(3)":for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`,`  gl_FragData[${e+1}][2] = subKernelResult_${this.subKernels[e].name}[2]`);break;case"Array(4)":for(let e=0;e<this.subKernels.length;++e)t.push(`  gl_FragData[${e+1}][0] = subKernelResult_${this.subKernels[e].name}[0]`,`  gl_FragData[${e+1}][1] = subKernelResult_${this.subKernels[e].name}[1]`,`  gl_FragData[${e+1}][2] = subKernelResult_${this.subKernels[e].name}[2]`,`  gl_FragData[${e+1}][3] = subKernelResult_${this.subKernels[e].name}[3]`)}return t}replaceArtifacts(t,e){return t.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\n/g,((t,r)=>{if(e.hasOwnProperty(r))return e[r];throw`unhandled artifact ${r}`}))}getFragmentShader(t){return null!==this.compiledFragmentShader?this.compiledFragmentShader:this.compiledFragmentShader=this.replaceArtifacts(this.constructor.fragmentShader,this._getFragShaderArtifactMap(t))}getVertexShader(t){return null!==this.compiledVertexShader?this.compiledVertexShader:this.compiledVertexShader=this.replaceArtifacts(this.constructor.vertexShader,this._getVertShaderArtifactMap(t))}toString(){const t=a.linesToString(["const gl = context"]);return l(this.constructor,arguments,this,t)}destroy(t){if(!this.context)return;this.buffer&&this.context.deleteBuffer(this.buffer),this.framebuffer&&this.context.deleteFramebuffer(this.framebuffer);for(const t in this.rawValueFramebuffers){for(const e in this.rawValueFramebuffers[t])this.context.deleteFramebuffer(this.rawValueFramebuffers[t][e]),delete this.rawValueFramebuffers[t][e];delete this.rawValueFramebuffers[t]}if(this.vertShader&&this.context.deleteShader(this.vertShader),this.fragShader&&this.context.deleteShader(this.fragShader),this.program&&this.context.deleteProgram(this.program),this.texture){this.texture.delete();const t=this.textureCache.indexOf(this.texture.texture);t>-1&&this.textureCache.splice(t,1),this.texture=null}if(this.mappedTextures&&this.mappedTextures.length){for(let t=0;t<this.mappedTextures.length;t++){const e=this.mappedTextures[t];e.delete();const r=this.textureCache.indexOf(e.texture);r>-1&&this.textureCache.splice(r,1)}this.mappedTextures=null}if(this.kernelArguments)for(let t=0;t<this.kernelArguments.length;t++)this.kernelArguments[t].destroy();if(this.kernelConstants)for(let t=0;t<this.kernelConstants.length;t++)this.kernelConstants[t].destroy();for(;this.textureCache.length>0;){const t=this.textureCache.pop();this.context.deleteTexture(t)}if(t){const t=x.indexOf(this.canvas);t>=0&&(x[t]=null,b[t]=null)}if(this.destroyExtensions(),delete this.context,delete this.canvas,!this.gpu)return;const e=this.gpu.kernels.indexOf(this);-1!==e&&this.gpu.kernels.splice(e,1)}destroyExtensions(){this.extensions.OES_texture_float=null,this.extensions.OES_texture_float_linear=null,this.extensions.OES_element_index_uint=null,this.extensions.WEBGL_draw_buffers=null}static destroyContext(t){const e=t.getExtension("WEBGL_lose_context");e&&e.loseContext()}toJSON(){const t=super.toJSON();return t.functionNodes=i.fromKernel(this,s).toJSON(),t.settings.threadDim=this.threadDim,t}}}},{"../../plugins/math-random-uniformly-distributed":112,"../../utils":114,"../function-builder":9,"../gl/kernel":13,"../gl/kernel-string":12,"./fragment-shader":37,"./function-node":38,"./kernel-value-maps":39,"./vertex-shader":71}],71:[function(t,e,r){e.exports={vertexShader:"__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"}},{}],72:[function(t,e,r){const n=`#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nfloat atan2(float v1, float v2) {\n  if (v1 == 0.0 || v2 == 0.0) return 0.0;\n  return atan(v1 / v2);\n}\n\nfloat cbrt(float x) {\n  if (x >= 0.0) {\n    return pow(x, 1.0 / 3.0);\n  } else {\n    return -pow(x, 1.0 / 3.0);\n  }\n}\n\nfloat expm1(float x) {\n  return pow(${Math.E}, x) - 1.0; \n}\n\nfloat fround(highp float x) {\n  return x;\n}\n\nfloat imul(float v1, float v2) {\n  return float(int(v1) * int(v2));\n}\n\nfloat log10(float x) {\n  return log2(x) * (1.0 / log2(10.0));\n}\n\nfloat log1p(float x) {\n  return log(1.0 + x);\n}\n\nfloat _pow(float v1, float v2) {\n  if (v2 == 0.0) return 1.0;\n  return pow(v1, v2);\n}\n\nfloat _round(float x) {\n  return floor(x + 0.5);\n}\n\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nfloat modulo(float number, float divisor) {\n  if (number < 0.0) {\n    number = abs(number);\n    if (divisor < 0.0) {\n      divisor = abs(divisor);\n    }\n    return -mod(number, divisor);\n  }\n  if (divisor < 0.0) {\n    divisor = abs(divisor);\n  }\n  return mod(number, divisor);\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;e.exports={fragmentShader:n}},{}],73:[function(t,e,r){const{utils:n}=t("../../utils"),{WebGLFunctionNode:i}=t("../web-gl/function-node");e.exports={WebGL2FunctionNode:class extends i{astIdentifierExpression(t,e){if("Identifier"!==t.type)throw this.astErrorOutput("IdentifierExpression - not an Identifier",t);const r=this.getType(t),i=n.sanitizeName(t.name);return"Infinity"===t.name?e.push("intBitsToFloat(2139095039)"):"Boolean"===r&&this.argumentNames.indexOf(i)>-1?e.push(`bool(user_${i})`):e.push(`user_${i}`),e}}}},{"../../utils":114,"../web-gl/function-node":38}],74:[function(t,e,r){const{WebGL2KernelValueBoolean:n}=t("./kernel-value/boolean"),{WebGL2KernelValueFloat:i}=t("./kernel-value/float"),{WebGL2KernelValueInteger:s}=t("./kernel-value/integer"),{WebGL2KernelValueHTMLImage:a}=t("./kernel-value/html-image"),{WebGL2KernelValueDynamicHTMLImage:o}=t("./kernel-value/dynamic-html-image"),{WebGL2KernelValueHTMLImageArray:u}=t("./kernel-value/html-image-array"),{WebGL2KernelValueDynamicHTMLImageArray:h}=t("./kernel-value/dynamic-html-image-array"),{WebGL2KernelValueHTMLVideo:l}=t("./kernel-value/html-video"),{WebGL2KernelValueDynamicHTMLVideo:c}=t("./kernel-value/dynamic-html-video"),{WebGL2KernelValueSingleInput:p}=t("./kernel-value/single-input"),{WebGL2KernelValueDynamicSingleInput:d}=t("./kernel-value/dynamic-single-input"),{WebGL2KernelValueUnsignedInput:g}=t("./kernel-value/unsigned-input"),{WebGL2KernelValueDynamicUnsignedInput:f}=t("./kernel-value/dynamic-unsigned-input"),{WebGL2KernelValueMemoryOptimizedNumberTexture:m}=t("./kernel-value/memory-optimized-number-texture"),{WebGL2KernelValueDynamicMemoryOptimizedNumberTexture:y}=t("./kernel-value/dynamic-memory-optimized-number-texture"),{WebGL2KernelValueNumberTexture:x}=t("./kernel-value/number-texture"),{WebGL2KernelValueDynamicNumberTexture:b}=t("./kernel-value/dynamic-number-texture"),{WebGL2KernelValueSingleArray:w}=t("./kernel-value/single-array"),{WebGL2KernelValueDynamicSingleArray:T}=t("./kernel-value/dynamic-single-array"),{WebGL2KernelValueSingleArray1DI:v}=t("./kernel-value/single-array1d-i"),{WebGL2KernelValueDynamicSingleArray1DI:S}=t("./kernel-value/dynamic-single-array1d-i"),{WebGL2KernelValueSingleArray2DI:A}=t("./kernel-value/single-array2d-i"),{WebGL2KernelValueDynamicSingleArray2DI:_}=t("./kernel-value/dynamic-single-array2d-i"),{WebGL2KernelValueSingleArray3DI:k}=t("./kernel-value/single-array3d-i"),{WebGL2KernelValueDynamicSingleArray3DI:E}=t("./kernel-value/dynamic-single-array3d-i"),{WebGL2KernelValueArray2:L}=t("./kernel-value/array2"),{WebGL2KernelValueArray3:I}=t("./kernel-value/array3"),{WebGL2KernelValueArray4:D}=t("./kernel-value/array4"),{WebGL2KernelValueUnsignedArray:$}=t("./kernel-value/unsigned-array"),{WebGL2KernelValueDynamicUnsignedArray:O}=t("./kernel-value/dynamic-unsigned-array"),C={unsigned:{dynamic:{Boolean:n,Integer:s,Float:i,Array:O,"Array(2)":L,"Array(3)":I,"Array(4)":D,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:f,NumberTexture:b,"ArrayTexture(1)":b,"ArrayTexture(2)":b,"ArrayTexture(3)":b,"ArrayTexture(4)":b,MemoryOptimizedNumberTexture:y,HTMLCanvas:o,HTMLImage:o,HTMLImageArray:h,HTMLVideo:c},static:{Boolean:n,Float:i,Integer:s,Array:$,"Array(2)":L,"Array(3)":I,"Array(4)":D,"Array1D(2)":!1,"Array1D(3)":!1,"Array1D(4)":!1,"Array2D(2)":!1,"Array2D(3)":!1,"Array2D(4)":!1,"Array3D(2)":!1,"Array3D(3)":!1,"Array3D(4)":!1,Input:g,NumberTexture:x,"ArrayTexture(1)":x,"ArrayTexture(2)":x,"ArrayTexture(3)":x,"ArrayTexture(4)":x,MemoryOptimizedNumberTexture:y,HTMLCanvas:a,HTMLImage:a,HTMLImageArray:u,HTMLVideo:l}},single:{dynamic:{Boolean:n,Integer:s,Float:i,Array:T,"Array(2)":L,"Array(3)":I,"Array(4)":D,"Array1D(2)":S,"Array1D(3)":S,"Array1D(4)":S,"Array2D(2)":_,"Array2D(3)":_,"Array2D(4)":_,"Array3D(2)":E,"Array3D(3)":E,"Array3D(4)":E,Input:d,NumberTexture:b,"ArrayTexture(1)":b,"ArrayTexture(2)":b,"ArrayTexture(3)":b,"ArrayTexture(4)":b,MemoryOptimizedNumberTexture:y,HTMLCanvas:o,HTMLImage:o,HTMLImageArray:h,HTMLVideo:c},static:{Boolean:n,Float:i,Integer:s,Array:w,"Array(2)":L,"Array(3)":I,"Array(4)":D,"Array1D(2)":v,"Array1D(3)":v,"Array1D(4)":v,"Array2D(2)":A,"Array2D(3)":A,"Array2D(4)":A,"Array3D(2)":k,"Array3D(3)":k,"Array3D(4)":k,Input:p,NumberTexture:x,"ArrayTexture(1)":x,"ArrayTexture(2)":x,"ArrayTexture(3)":x,"ArrayTexture(4)":x,MemoryOptimizedNumberTexture:m,HTMLCanvas:a,HTMLImage:a,HTMLImageArray:u,HTMLVideo:l}}};e.exports={kernelValueMaps:C,lookupKernelValueType:function(t,e,r,n){if(!t)throw new Error("type missing");if(!e)throw new Error("dynamic missing");if(!r)throw new Error("precision missing");n.type&&(t=n.type);const i=C[r][e];if(!1===i[t])return null;if(void 0===i[t])throw new Error(`Could not find a KernelValue for ${t}`);return i[t]}}},{"./kernel-value/array2":75,"./kernel-value/array3":76,"./kernel-value/array4":77,"./kernel-value/boolean":78,"./kernel-value/dynamic-html-image":80,"./kernel-value/dynamic-html-image-array":79,"./kernel-value/dynamic-html-video":81,"./kernel-value/dynamic-memory-optimized-number-texture":82,"./kernel-value/dynamic-number-texture":83,"./kernel-value/dynamic-single-array":84,"./kernel-value/dynamic-single-array1d-i":85,"./kernel-value/dynamic-single-array2d-i":86,"./kernel-value/dynamic-single-array3d-i":87,"./kernel-value/dynamic-single-input":88,"./kernel-value/dynamic-unsigned-array":89,"./kernel-value/dynamic-unsigned-input":90,"./kernel-value/float":91,"./kernel-value/html-image":93,"./kernel-value/html-image-array":92,"./kernel-value/html-video":94,"./kernel-value/integer":95,"./kernel-value/memory-optimized-number-texture":96,"./kernel-value/number-texture":97,"./kernel-value/single-array":98,"./kernel-value/single-array1d-i":99,"./kernel-value/single-array2d-i":100,"./kernel-value/single-array3d-i":101,"./kernel-value/single-input":102,"./kernel-value/unsigned-array":103,"./kernel-value/unsigned-input":104}],75:[function(t,e,r){const{WebGLKernelValueArray2:n}=t("../../web-gl/kernel-value/array2");e.exports={WebGL2KernelValueArray2:class extends n{}}},{"../../web-gl/kernel-value/array2":41}],76:[function(t,e,r){const{WebGLKernelValueArray3:n}=t("../../web-gl/kernel-value/array3");e.exports={WebGL2KernelValueArray3:class extends n{}}},{"../../web-gl/kernel-value/array3":42}],77:[function(t,e,r){const{WebGLKernelValueArray4:n}=t("../../web-gl/kernel-value/array4");e.exports={WebGL2KernelValueArray4:class extends n{}}},{"../../web-gl/kernel-value/array4":43}],78:[function(t,e,r){const{WebGLKernelValueBoolean:n}=t("../../web-gl/kernel-value/boolean");e.exports={WebGL2KernelValueBoolean:class extends n{}}},{"../../web-gl/kernel-value/boolean":44}],79:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueHTMLImageArray:i}=t("./html-image-array");e.exports={WebGL2KernelValueDynamicHTMLImageArray:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2DArray ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}updateValue(t){const{width:e,height:r}=t[0];this.checkSize(e,r),this.dimensions=[e,r,t.length],this.textureSize=[e,r],this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"./html-image-array":92}],80:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueDynamicHTMLImage:i}=t("../../web-gl/kernel-value/dynamic-html-image");e.exports={WebGL2KernelValueDynamicHTMLImage:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-html-image":45}],81:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueDynamicHTMLImage:i}=t("./dynamic-html-image");e.exports={WebGL2KernelValueDynamicHTMLVideo:class extends i{}}},{"../../../utils":114,"./dynamic-html-image":80}],82:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueDynamicMemoryOptimizedNumberTexture:i}=t("../../web-gl/kernel-value/dynamic-memory-optimized-number-texture");e.exports={WebGL2KernelValueDynamicMemoryOptimizedNumberTexture:class extends i{getSource(){return n.linesToString([`uniform sampler2D ${this.id}`,`uniform ivec2 ${this.sizeId}`,`uniform ivec3 ${this.dimensionsId}`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-memory-optimized-number-texture":47}],83:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueDynamicNumberTexture:i}=t("../../web-gl/kernel-value/dynamic-number-texture");e.exports={WebGL2KernelValueDynamicNumberTexture:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-number-texture":48}],84:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueSingleArray:i}=t("../../web-gl2/kernel-value/single-array");e.exports={WebGL2KernelValueDynamicSingleArray:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}updateValue(t){this.dimensions=n.getDimensions(t,!0),this.textureSize=n.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array":98}],85:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueSingleArray1DI:i}=t("../../web-gl2/kernel-value/single-array1d-i");e.exports={WebGL2KernelValueDynamicSingleArray1DI:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}updateValue(t){this.setShape(t),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array1d-i":99}],86:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueSingleArray2DI:i}=t("../../web-gl2/kernel-value/single-array2d-i");e.exports={WebGL2KernelValueDynamicSingleArray2DI:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}updateValue(t){this.setShape(t),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array2d-i":100}],87:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueSingleArray3DI:i}=t("../../web-gl2/kernel-value/single-array3d-i");e.exports={WebGL2KernelValueDynamicSingleArray3DI:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}updateValue(t){this.setShape(t),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"../../web-gl2/kernel-value/single-array3d-i":101}],88:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueSingleInput:i}=t("../../web-gl2/kernel-value/single-input");e.exports={WebGL2KernelValueDynamicSingleInput:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}updateValue(t){let[e,r,i]=t.size;this.dimensions=new Int32Array([e||1,r||1,i||1]),this.textureSize=n.getMemoryOptimizedFloatTextureSize(this.dimensions,this.bitRatio),this.uploadArrayLength=this.textureSize[0]*this.textureSize[1]*this.bitRatio,this.checkSize(this.textureSize[0],this.textureSize[1]),this.uploadValue=new Float32Array(this.uploadArrayLength),this.kernel.setUniform3iv(this.dimensionsId,this.dimensions),this.kernel.setUniform2iv(this.sizeId,this.textureSize),super.updateValue(t)}}}},{"../../../utils":114,"../../web-gl2/kernel-value/single-input":102}],89:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueDynamicUnsignedArray:i}=t("../../web-gl/kernel-value/dynamic-unsigned-array");e.exports={WebGL2KernelValueDynamicUnsignedArray:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-unsigned-array":54}],90:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueDynamicUnsignedInput:i}=t("../../web-gl/kernel-value/dynamic-unsigned-input");e.exports={WebGL2KernelValueDynamicUnsignedInput:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`uniform ${t} ivec2 ${this.sizeId}`,`uniform ${t} ivec3 ${this.dimensionsId}`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/dynamic-unsigned-input":55}],91:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueFloat:i}=t("../../web-gl/kernel-value/float");e.exports={WebGL2KernelValueFloat:class extends i{}}},{"../../../utils":114,"../../web-gl/kernel-value/float":56}],92:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelArray:i}=t("../../web-gl/kernel-value/array");e.exports={WebGL2KernelValueHTMLImageArray:class extends i{constructor(t,e){super(t,e),this.checkSize(t[0].width,t[0].height),this.dimensions=[t[0].width,t[0].height,t.length],this.textureSize=[t[0].width,t[0].height]}defineTexture(){const{context:t}=this;t.activeTexture(this.contextHandle),t.bindTexture(t.TEXTURE_2D_ARRAY,this.texture),t.texParameteri(t.TEXTURE_2D_ARRAY,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D_ARRAY,t.TEXTURE_MIN_FILTER,t.NEAREST)}getStringValueHandler(){return`const uploadValue_${this.name} = ${this.varName};\n`}getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2DArray ${this.id}`,`${t} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${t} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){const{context:e}=this;e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D_ARRAY,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!0),e.texImage3D(e.TEXTURE_2D_ARRAY,0,e.RGBA,t[0].width,t[0].height,t.length,0,e.RGBA,e.UNSIGNED_BYTE,null);for(let r=0;r<t.length;r++){const n=0,i=0,s=1;e.texSubImage3D(e.TEXTURE_2D_ARRAY,0,n,i,r,t[r].width,t[r].height,s,e.RGBA,e.UNSIGNED_BYTE,this.uploadValue=t[r])}this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"../../web-gl/kernel-value/array":40}],93:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueHTMLImage:i}=t("../../web-gl/kernel-value/html-image");e.exports={WebGL2KernelValueHTMLImage:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`${t} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${t} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/html-image":57}],94:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGL2KernelValueHTMLImage:i}=t("./html-image");e.exports={WebGL2KernelValueHTMLVideo:class extends i{}}},{"../../../utils":114,"./html-image":93}],95:[function(t,e,r){const{WebGLKernelValueInteger:n}=t("../../web-gl/kernel-value/integer");e.exports={WebGL2KernelValueInteger:class extends n{getSource(t){const e=this.getVariablePrecisionString();return"constants"===this.origin?`const ${e} int ${this.id} = ${parseInt(t)};\n`:`uniform ${e} int ${this.id};\n`}updateValue(t){"constants"!==this.origin&&this.kernel.setUniform1i(this.id,this.uploadValue=t)}}}},{"../../web-gl/kernel-value/integer":60}],96:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueMemoryOptimizedNumberTexture:i}=t("../../web-gl/kernel-value/memory-optimized-number-texture");e.exports={WebGL2KernelValueMemoryOptimizedNumberTexture:class extends i{getSource(){const{id:t,sizeId:e,textureSize:r,dimensionsId:i,dimensions:s}=this,a=this.getVariablePrecisionString();return n.linesToString([`uniform sampler2D ${t}`,`${a} ivec2 ${e} = ivec2(${r[0]}, ${r[1]})`,`${a} ivec3 ${i} = ivec3(${s[0]}, ${s[1]}, ${s[2]})`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/memory-optimized-number-texture":61}],97:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueNumberTexture:i}=t("../../web-gl/kernel-value/number-texture");e.exports={WebGL2KernelValueNumberTexture:class extends i{getSource(){const{id:t,sizeId:e,textureSize:r,dimensionsId:i,dimensions:s}=this,a=this.getVariablePrecisionString();return n.linesToString([`uniform ${a} sampler2D ${t}`,`${a} ivec2 ${e} = ivec2(${r[0]}, ${r[1]})`,`${a} ivec3 ${i} = ivec3(${s[0]}, ${s[1]}, ${s[2]})`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/number-texture":62}],98:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray:i}=t("../../web-gl/kernel-value/single-array");e.exports={WebGL2KernelValueSingleArray:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`${t} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${t} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"../../web-gl/kernel-value/single-array":63}],99:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray1DI:i}=t("../../web-gl/kernel-value/single-array1d-i");e.exports={WebGL2KernelValueSingleArray1DI:class extends i{updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"../../web-gl/kernel-value/single-array1d-i":64}],100:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray2DI:i}=t("../../web-gl/kernel-value/single-array2d-i");e.exports={WebGL2KernelValueSingleArray2DI:class extends i{updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"../../web-gl/kernel-value/single-array2d-i":65}],101:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleArray3DI:i}=t("../../web-gl/kernel-value/single-array3d-i");e.exports={WebGL2KernelValueSingleArray3DI:class extends i{updateValue(t){if(t.constructor!==this.initialValueConstructor)return void this.onUpdateValueMismatch(t.constructor);const{context:e}=this;n.flattenTo(t,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"../../web-gl/kernel-value/single-array3d-i":66}],102:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueSingleInput:i}=t("../../web-gl/kernel-value/single-input");e.exports={WebGL2KernelValueSingleInput:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`${t} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${t} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}updateValue(t){const{context:e}=this;n.flattenTo(t.value,this.uploadValue),e.activeTexture(this.contextHandle),e.bindTexture(e.TEXTURE_2D,this.texture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!1),e.texImage2D(e.TEXTURE_2D,0,e.RGBA32F,this.textureSize[0],this.textureSize[1],0,e.RGBA,e.FLOAT,this.uploadValue),this.kernel.setUniform1i(this.id,this.index)}}}},{"../../../utils":114,"../../web-gl/kernel-value/single-input":67}],103:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueUnsignedArray:i}=t("../../web-gl/kernel-value/unsigned-array");e.exports={WebGL2KernelValueUnsignedArray:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`${t} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${t} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/unsigned-array":68}],104:[function(t,e,r){const{utils:n}=t("../../../utils"),{WebGLKernelValueUnsignedInput:i}=t("../../web-gl/kernel-value/unsigned-input");e.exports={WebGL2KernelValueUnsignedInput:class extends i{getSource(){const t=this.getVariablePrecisionString();return n.linesToString([`uniform ${t} sampler2D ${this.id}`,`${t} ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,`${t} ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`])}}}},{"../../../utils":114,"../../web-gl/kernel-value/unsigned-input":69}],105:[function(t,e,r){const{WebGLKernel:n}=t("../web-gl/kernel"),{WebGL2FunctionNode:i}=t("./function-node"),{FunctionBuilder:s}=t("../function-builder"),{utils:a}=t("../../utils"),{fragmentShader:o}=t("./fragment-shader"),{vertexShader:u}=t("./vertex-shader"),{lookupKernelValueType:h}=t("./kernel-value-maps");let l=null,c=null,p=null,d=null,g=null;e.exports={WebGL2Kernel:class extends n{static get isSupported(){return null!==l||(this.setupFeatureChecks(),l=this.isContextMatch(p)),l}static setupFeatureChecks(){"undefined"!=typeof document?c=document.createElement("canvas"):"undefined"!=typeof OffscreenCanvas&&(c=new OffscreenCanvas(0,0)),c&&(p=c.getContext("webgl2"),p&&p.getExtension&&(d={EXT_color_buffer_float:p.getExtension("EXT_color_buffer_float"),OES_texture_float_linear:p.getExtension("OES_texture_float_linear")},g=this.getFeatures()))}static isContextMatch(t){return"undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext}static getFeatures(){const t=this.testContext;return Object.freeze({isFloatRead:this.getIsFloatRead(),isIntegerDivisionAccurate:this.getIsIntegerDivisionAccurate(),isSpeedTacticSupported:this.getIsSpeedTacticSupported(),kernelMap:!0,isTextureFloat:!0,isDrawBuffers:!0,channelCount:this.getChannelCount(),maxTextureSize:this.getMaxTextureSize(),lowIntPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.LOW_INT),lowFloatPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.LOW_FLOAT),mediumIntPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_INT),mediumFloatPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT),highIntPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_INT),highFloatPrecision:t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT)})}static getIsTextureFloat(){return!0}static getChannelCount(){return p.getParameter(p.MAX_DRAW_BUFFERS)}static getMaxTextureSize(){return p.getParameter(p.MAX_TEXTURE_SIZE)}static lookupKernelValueType(t,e,r,n){return h(t,e,r,n)}static get testCanvas(){return c}static get testContext(){return p}static get features(){return g}static get fragmentShader(){return o}static get vertexShader(){return u}initContext(){return this.canvas.getContext("webgl2",{alpha:!1,depth:!1,antialias:!1})}initExtensions(){this.extensions={EXT_color_buffer_float:this.context.getExtension("EXT_color_buffer_float"),OES_texture_float_linear:this.context.getExtension("OES_texture_float_linear")}}validateSettings(t){if(!this.validate)return void(this.texSize=a.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output));const{features:e}=this.constructor;if("single"===this.precision&&!e.isFloatRead)throw new Error("Float texture outputs are not supported");if(this.graphical||null!==this.precision||(this.precision=e.isFloatRead?"single":"unsigned"),null===this.fixIntegerDivisionAccuracy?this.fixIntegerDivisionAccuracy=!e.isIntegerDivisionAccurate:this.fixIntegerDivisionAccuracy&&e.isIntegerDivisionAccurate&&(this.fixIntegerDivisionAccuracy=!1),this.checkOutput(),!this.output||0===this.output.length){if(1!==t.length)throw new Error("Auto output only supported for kernels with only one input");const e=a.getVariableType(t[0],this.strictIntegers);switch(e){case"Array":this.output=a.getDimensions(e);break;case"NumberTexture":case"MemoryOptimizedNumberTexture":case"ArrayTexture(1)":case"ArrayTexture(2)":case"ArrayTexture(3)":case"ArrayTexture(4)":this.output=t[0].output;break;default:throw new Error("Auto output not supported for input type: "+e)}}if(this.graphical){if(2!==this.output.length)throw new Error("Output must have 2 dimensions on graphical mode");return"single"===this.precision&&(console.warn("Cannot use graphical mode and single precision at the same time"),this.precision="unsigned"),void(this.texSize=a.clone(this.output))}!this.graphical&&null===this.precision&&e.isTextureFloat&&(this.precision="single"),this.texSize=a.getKernelTextureSize({optimizeFloatMemory:this.optimizeFloatMemory,precision:this.precision},this.output),this.checkTextureSize()}translateSource(){const t=s.fromKernel(this,i,{fixIntegerDivisionAccuracy:this.fixIntegerDivisionAccuracy});this.translatedSource=t.getPrototypeString("kernel"),this.setupReturnTypes(t)}drawBuffers(){this.context.drawBuffers(this.drawBuffersMap)}getTextureFormat(){const{context:t}=this;switch(this.getInternalFormat()){case t.R32F:return t.RED;case t.RG32F:return t.RG;case t.RGBA32F:case t.RGBA:return t.RGBA;default:throw new Error("Unknown internal format")}}getInternalFormat(){const{context:t}=this;if("single"===this.precision){if(this.pipeline)switch(this.returnType){case"Number":case"Float":case"Integer":return this.optimizeFloatMemory?t.RGBA32F:t.R32F;case"Array(2)":return t.RG32F;case"Array(3)":case"Array(4)":return t.RGBA32F;default:throw new Error("Unhandled return type")}return t.RGBA32F}return t.RGBA}_setupOutputTexture(){const t=this.context;if(this.texture)return void t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture.texture,0);t.bindFramebuffer(t.FRAMEBUFFER,this.framebuffer);const e=t.createTexture(),r=this.texSize;t.activeTexture(t.TEXTURE0+this.constantTextureCount+this.argumentTextureCount),t.bindTexture(t.TEXTURE_2D,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.REPEAT),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST);const n=this.getInternalFormat();"single"===this.precision?t.texStorage2D(t.TEXTURE_2D,1,n,r[0],r[1]):t.texImage2D(t.TEXTURE_2D,0,n,r[0],r[1],0,n,t.UNSIGNED_BYTE,null),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0),this.texture=new this.TextureConstructor({texture:e,size:r,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this})}_setupSubOutputTextures(){const t=this.context;if(this.mappedTextures){for(let e=0;e<this.subKernels.length;e++)t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e+1,t.TEXTURE_2D,this.mappedTextures[e].texture,0);return}const e=this.texSize;this.drawBuffersMap=[t.COLOR_ATTACHMENT0],this.mappedTextures=[];for(let r=0;r<this.subKernels.length;r++){const n=this.createTexture();this.drawBuffersMap.push(t.COLOR_ATTACHMENT0+r+1),t.activeTexture(t.TEXTURE0+this.constantTextureCount+this.argumentTextureCount+r),t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST);const i=this.getInternalFormat();"single"===this.precision?t.texStorage2D(t.TEXTURE_2D,1,i,e[0],e[1]):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e[0],e[1],0,t.RGBA,t.UNSIGNED_BYTE,null),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r+1,t.TEXTURE_2D,n,0),this.mappedTextures.push(new this.TextureConstructor({texture:n,size:e,dimensions:this.threadDim,output:this.output,context:this.context,internalFormat:this.getInternalFormat(),textureFormat:this.getTextureFormat(),kernel:this}))}}_getHeaderString(){return""}_getTextureCoordinate(){const t=this.subKernels,e=this.getVariablePrecisionString(this.texSize,this.tactic);return null===t||t.length<1?`in ${e} vec2 vTexCoord;\n`:`out ${e} vec2 vTexCoord;\n`}_getMainArgumentsString(t){const e=[],r=this.argumentNames;for(let n=0;n<r.length;n++)e.push(this.kernelArguments[n].getSource(t[n]));return e.join("")}getKernelString(){const t=[this.getKernelResultDeclaration()],e=this.subKernels;if(null!==e)switch(t.push("layout(location = 0) out vec4 data0"),this.returnType){case"Number":case"Float":case"Integer":for(let r=0;r<e.length;r++){const n=e[r];t.push("Integer"===n.returnType?`int subKernelResult_${n.name} = 0`:`float subKernelResult_${n.name} = 0.0`,`layout(location = ${r+1}) out vec4 data${r+1}`)}break;case"Array(2)":for(let r=0;r<e.length;r++)t.push(`vec2 subKernelResult_${e[r].name}`,`layout(location = ${r+1}) out vec4 data${r+1}`);break;case"Array(3)":for(let r=0;r<e.length;r++)t.push(`vec3 subKernelResult_${e[r].name}`,`layout(location = ${r+1}) out vec4 data${r+1}`);break;case"Array(4)":for(let r=0;r<e.length;r++)t.push(`vec4 subKernelResult_${e[r].name}`,`layout(location = ${r+1}) out vec4 data${r+1}`)}else t.push("out vec4 data0");return a.linesToString(t)+this.translatedSource}getMainResultGraphical(){return a.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = actualColor"])}getMainResultPackedPixels(){switch(this.returnType){case"LiteralInteger":case"Number":case"Integer":case"Float":return this.getMainResultKernelPackedPixels()+this.getMainResultSubKernelPackedPixels();default:throw new Error(`packed output only usable with Numbers, "${this.returnType}" specified`)}}getMainResultKernelPackedPixels(){return a.linesToString(["  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  data0 = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(kernelResult)`])}getMainResultSubKernelPackedPixels(){const t=[];if(!this.subKernels)return"";for(let e=0;e<this.subKernels.length;e++)"Integer"===this.subKernels[e].returnType?t.push(`  data${e+1} = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(float(subKernelResult_${this.subKernels[e].name}))`):t.push(`  data${e+1} = ${this.useLegacyEncoder?"legacyEncode32":"encode32"}(subKernelResult_${this.subKernels[e].name})`);return a.linesToString(t)}getMainResultKernelMemoryOptimizedFloats(t,e){t.push("  threadId = indexTo3D(index, uOutputDim)","  kernel()",`  data0.${e} = kernelResult`)}getMainResultSubKernelMemoryOptimizedFloats(t,e){if(!this.subKernels)return t;for(let r=0;r<this.subKernels.length;r++){const n=this.subKernels[r];"Integer"===n.returnType?t.push(`  data${r+1}.${e} = float(subKernelResult_${n.name})`):t.push(`  data${r+1}.${e} = subKernelResult_${n.name}`)}}getMainResultKernelNumberTexture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult"]}getMainResultSubKernelNumberTexture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e){const r=this.subKernels[e];"Integer"===r.returnType?t.push(`  data${e+1}[0] = float(subKernelResult_${r.name})`):t.push(`  data${e+1}[0] = subKernelResult_${r.name}`)}return t}getMainResultKernelArray2Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult[0]","  data0[1] = kernelResult[1]"]}getMainResultSubKernelArray2Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e){const r=this.subKernels[e];t.push(`  data${e+1}[0] = subKernelResult_${r.name}[0]`,`  data${e+1}[1] = subKernelResult_${r.name}[1]`)}return t}getMainResultKernelArray3Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0[0] = kernelResult[0]","  data0[1] = kernelResult[1]","  data0[2] = kernelResult[2]"]}getMainResultSubKernelArray3Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e){const r=this.subKernels[e];t.push(`  data${e+1}[0] = subKernelResult_${r.name}[0]`,`  data${e+1}[1] = subKernelResult_${r.name}[1]`,`  data${e+1}[2] = subKernelResult_${r.name}[2]`)}return t}getMainResultKernelArray4Texture(){return["  threadId = indexTo3D(index, uOutputDim)","  kernel()","  data0 = kernelResult"]}getMainResultSubKernelArray4Texture(){const t=[];if(!this.subKernels)return t;for(let e=0;e<this.subKernels.length;++e)t.push(`  data${e+1} = subKernelResult_${this.subKernels[e].name}`);return t}destroyExtensions(){this.extensions.EXT_color_buffer_float=null,this.extensions.OES_texture_float_linear=null}toJSON(){const t=super.toJSON();return t.functionNodes=s.fromKernel(this,i).toJSON(),t.settings.threadDim=this.threadDim,t}}}},{"../../utils":114,"../function-builder":9,"../web-gl/kernel":70,"./fragment-shader":72,"./function-node":73,"./kernel-value-maps":74,"./vertex-shader":106}],106:[function(t,e,r){e.exports={vertexShader:"#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}"}},{}],107:[function(t,e,r){const n=t("./index"),i=n.GPU;for(const t in n)n.hasOwnProperty(t)&&"GPU"!==t&&(i[t]=n[t]);function s(t){t.GPU||Object.defineProperty(t,"GPU",{get:()=>i})}"undefined"!=typeof window&&s(window),"undefined"!=typeof self&&s(self),e.exports=n},{"./index":109}],108:[function(t,e,r){const{gpuMock:n}=t("gpu-mock.js"),{utils:i}=t("./utils"),{Kernel:s}=t("./backend/kernel"),{CPUKernel:a}=t("./backend/cpu/kernel"),{HeadlessGLKernel:o}=t("./backend/headless-gl/kernel"),{WebGL2Kernel:u}=t("./backend/web-gl2/kernel"),{WebGLKernel:h}=t("./backend/web-gl/kernel"),{kernelRunShortcut:l}=t("./kernel-run-shortcut"),c=[o,u,h],p=["gpu","cpu"],d={headlessgl:o,webgl2:u,webgl:h};let g=!0;function f(t){if(!t)return{};const e=Object.assign({},t);return t.hasOwnProperty("floatOutput")&&(i.warnDeprecated("setting","floatOutput","precision"),e.precision=t.floatOutput?"single":"unsigned"),t.hasOwnProperty("outputToTexture")&&(i.warnDeprecated("setting","outputToTexture","pipeline"),e.pipeline=Boolean(t.outputToTexture)),t.hasOwnProperty("outputImmutable")&&(i.warnDeprecated("setting","outputImmutable","immutable"),e.immutable=Boolean(t.outputImmutable)),t.hasOwnProperty("floatTextures")&&(i.warnDeprecated("setting","floatTextures","optimizeFloatMemory"),e.optimizeFloatMemory=Boolean(t.floatTextures)),e}e.exports={GPU:class{static disableValidation(){g=!1}static enableValidation(){g=!0}static get isGPUSupported(){return c.some((t=>t.isSupported))}static get isKernelMapSupported(){return c.some((t=>t.isSupported&&t.features.kernelMap))}static get isOffscreenCanvasSupported(){return"undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas||"undefined"!=typeof importScripts}static get isWebGLSupported(){return h.isSupported}static get isWebGL2Supported(){return u.isSupported}static get isHeadlessGLSupported(){return o.isSupported}static get isCanvasSupported(){return"undefined"!=typeof HTMLCanvasElement}static get isGPUHTMLImageArraySupported(){return u.isSupported}static get isSinglePrecisionSupported(){return c.some((t=>t.isSupported&&t.features.isFloatRead&&t.features.isTextureFloat))}constructor(t){if(t=t||{},this.canvas=t.canvas||null,this.context=t.context||null,this.mode=t.mode,this.Kernel=null,this.kernels=[],this.functions=[],this.nativeFunctions=[],this.injectedNative=null,"dev"!==this.mode){if(this.chooseKernel(),t.functions)for(let e=0;e<t.functions.length;e++)this.addFunction(t.functions[e]);if(t.nativeFunctions)for(const e in t.nativeFunctions){if(!t.nativeFunctions.hasOwnProperty(e))continue;const r=t.nativeFunctions[e],{name:n,source:i}=r;this.addNativeFunction(n,i,r)}}}chooseKernel(){if(this.Kernel)return;let t=null;if(this.context){for(let e=0;e<c.length;e++){const r=c[e];if(r.isContextMatch(this.context)){if(!r.isSupported)throw new Error(`Kernel type ${r.name} not supported`);t=r;break}}if(null===t)throw new Error("unknown Context")}else if(this.mode){if(this.mode in d)g&&!d[this.mode].isSupported||(t=d[this.mode]);else if("gpu"===this.mode){for(let e=0;e<c.length;e++)if(c[e].isSupported){t=c[e];break}}else"cpu"===this.mode&&(t=a);if(!t)throw new Error(`A requested mode of "${this.mode}" and is not supported`)}else{for(let e=0;e<c.length;e++)if(c[e].isSupported){t=c[e];break}t||(t=a)}this.mode||(this.mode=t.mode),this.Kernel=t}createKernel(t,e){if(void 0===t)throw new Error("Missing source parameter");if("object"!=typeof t&&!i.isFunction(t)&&"string"!=typeof t)throw new Error("source parameter not a function");const r=this.kernels;if("dev"===this.mode){const i=n(t,f(e));return r.push(i),i}t="function"==typeof t?t.toString():t;const s={},o=f(e)||{};function u(e){console.warn("Falling back to CPU");const r=new a(t,{argumentTypes:p.argumentTypes,constantTypes:p.constantTypes,graphical:p.graphical,loopMaxIterations:p.loopMaxIterations,constants:p.constants,dynamicOutput:p.dynamicOutput,dynamicArgument:p.dynamicArguments,output:p.output,precision:p.precision,pipeline:p.pipeline,immutable:p.immutable,optimizeFloatMemory:p.optimizeFloatMemory,fixIntegerDivisionAccuracy:p.fixIntegerDivisionAccuracy,functions:p.functions,nativeFunctions:p.nativeFunctions,injectedNative:p.injectedNative,subKernels:p.subKernels,strictIntegers:p.strictIntegers,debug:p.debug});r.build.apply(r,e);const n=r.run.apply(r,e);return p.replaceKernel(r),n}e&&"object"==typeof e.argumentTypes&&(o.argumentTypes=Object.keys(e.argumentTypes).map((t=>e.argumentTypes[t])));const h=Object.assign({context:this.context,canvas:this.canvas,functions:this.functions,nativeFunctions:this.nativeFunctions,injectedNative:this.injectedNative,gpu:this,validate:g,onRequestFallback:u,onRequestSwitchKernel:function e(n,i,a){a.debug&&console.warn("Switching kernels");let o=null;if(a.signature&&!s[a.signature]&&(s[a.signature]=a),a.dynamicOutput)for(let t=n.length-1;t>=0;t--){const e=n[t];"outputPrecisionMismatch"===e.type&&(o=e.needed)}const h=a.constructor,l=h.getArgumentTypes(a,i),c=h.getSignature(a,l),d=s[c];if(d)return d.onActivate(a),d;const f=s[c]=new h(t,{argumentTypes:l,constantTypes:a.constantTypes,graphical:a.graphical,loopMaxIterations:a.loopMaxIterations,constants:a.constants,dynamicOutput:a.dynamicOutput,dynamicArgument:a.dynamicArguments,context:a.context,canvas:a.canvas,output:o||a.output,precision:a.precision,pipeline:a.pipeline,immutable:a.immutable,optimizeFloatMemory:a.optimizeFloatMemory,fixIntegerDivisionAccuracy:a.fixIntegerDivisionAccuracy,functions:a.functions,nativeFunctions:a.nativeFunctions,injectedNative:a.injectedNative,subKernels:a.subKernels,strictIntegers:a.strictIntegers,debug:a.debug,gpu:a.gpu,validate:g,returnType:a.returnType,tactic:a.tactic,onRequestFallback:u,onRequestSwitchKernel:e,texture:a.texture,mappedTextures:a.mappedTextures,drawBuffersMap:a.drawBuffersMap});return f.build.apply(f,i),p.replaceKernel(f),r.push(f),f}},o),c=new this.Kernel(t,h),p=l(c);return this.canvas||(this.canvas=c.canvas),this.context||(this.context=c.context),r.push(c),p}createKernelMap(){let t,e;const r=typeof arguments[arguments.length-2];if("function"===r||"string"===r?(t=arguments[arguments.length-2],e=arguments[arguments.length-1]):t=arguments[arguments.length-1],"dev"!==this.mode&&(!this.Kernel.isSupported||!this.Kernel.features.kernelMap)&&this.mode&&p.indexOf(this.mode)<0)throw new Error(`kernelMap not supported on ${this.Kernel.name}`);const n=f(e);if(e&&"object"==typeof e.argumentTypes&&(n.argumentTypes=Object.keys(e.argumentTypes).map((t=>e.argumentTypes[t]))),Array.isArray(arguments[0])){n.subKernels=[];const t=arguments[0];for(let e=0;e<t.length;e++){const r=t[e].toString(),s=i.getFunctionNameFromString(r);n.subKernels.push({name:s,source:r,property:e})}}else{n.subKernels=[];const t=arguments[0];for(let e in t){if(!t.hasOwnProperty(e))continue;const r=t[e].toString(),s=i.getFunctionNameFromString(r);n.subKernels.push({name:s||e,source:r,property:e})}}return this.createKernel(t,n)}combineKernels(){const t=arguments[arguments.length-1];if("cpu"===arguments[0].kernel.constructor.mode)return t;const e=arguments[0].canvas,r=arguments[0].context,n=arguments.length-1;for(let t=0;t<n;t++)arguments[t].setCanvas(e).setContext(r).setPipeline(!0);return function(){const e=t.apply(this,arguments);return e.toArray?e.toArray():e}}setFunctions(t){return this.functions=t,this}setNativeFunctions(t){return this.nativeFunctions=t,this}addFunction(t,e){return this.functions.push({source:t,settings:e}),this}addNativeFunction(t,e,r){if(this.kernels.length>0)throw new Error('Cannot call "addNativeFunction" after "createKernels" has been called.');return this.nativeFunctions.push(Object.assign({name:t,source:e},r)),this}injectNative(t){return this.injectedNative=t,this}destroy(){return new Promise(((t,e)=>{this.kernels||t(),setTimeout((()=>{try{for(let t=0;t<this.kernels.length;t++)this.kernels[t].destroy(!0);let t=this.kernels[0];t&&(t.kernel&&(t=t.kernel),t.constructor.destroyContext&&t.constructor.destroyContext(this.context))}catch(t){e(t)}t()}),0)}))}},kernelOrder:c,kernelTypes:p}},{"./backend/cpu/kernel":8,"./backend/headless-gl/kernel":34,"./backend/kernel":36,"./backend/web-gl/kernel":70,"./backend/web-gl2/kernel":105,"./kernel-run-shortcut":111,"./utils":114,"gpu-mock.js":4}],109:[function(t,e,r){const{GPU:n}=t("./gpu"),{alias:i}=t("./alias"),{utils:s}=t("./utils"),{Input:a,input:o}=t("./input"),{Texture:u}=t("./texture"),{FunctionBuilder:h}=t("./backend/function-builder"),{FunctionNode:l}=t("./backend/function-node"),{CPUFunctionNode:c}=t("./backend/cpu/function-node"),{CPUKernel:p}=t("./backend/cpu/kernel"),{HeadlessGLKernel:d}=t("./backend/headless-gl/kernel"),{WebGLFunctionNode:g}=t("./backend/web-gl/function-node"),{WebGLKernel:f}=t("./backend/web-gl/kernel"),{kernelValueMaps:m}=t("./backend/web-gl/kernel-value-maps"),{WebGL2FunctionNode:y}=t("./backend/web-gl2/function-node"),{WebGL2Kernel:x}=t("./backend/web-gl2/kernel"),{kernelValueMaps:b}=t("./backend/web-gl2/kernel-value-maps"),{GLKernel:w}=t("./backend/gl/kernel"),{Kernel:T}=t("./backend/kernel"),{FunctionTracer:v}=t("./backend/function-tracer"),S=t("./plugins/math-random-uniformly-distributed");e.exports={alias:i,CPUFunctionNode:c,CPUKernel:p,GPU:n,FunctionBuilder:h,FunctionNode:l,HeadlessGLKernel:d,Input:a,input:o,Texture:u,utils:s,WebGL2FunctionNode:y,WebGL2Kernel:x,webGL2KernelValueMaps:b,WebGLFunctionNode:g,WebGLKernel:f,webGLKernelValueMaps:m,GLKernel:w,Kernel:T,FunctionTracer:v,plugins:{mathRandom:S}}},{"./alias":5,"./backend/cpu/function-node":6,"./backend/cpu/kernel":8,"./backend/function-builder":9,"./backend/function-node":10,"./backend/function-tracer":11,"./backend/gl/kernel":13,"./backend/headless-gl/kernel":34,"./backend/kernel":36,"./backend/web-gl/function-node":38,"./backend/web-gl/kernel":70,"./backend/web-gl/kernel-value-maps":39,"./backend/web-gl2/function-node":73,"./backend/web-gl2/kernel":105,"./backend/web-gl2/kernel-value-maps":74,"./gpu":108,"./input":110,"./plugins/math-random-uniformly-distributed":112,"./texture":113,"./utils":114}],110:[function(t,e,r){class n{constructor(t,e){this.value=t,Array.isArray(e)?this.size=e:(this.size=new Int32Array(3),e.z?this.size=new Int32Array([e.x,e.y,e.z]):e.y?this.size=new Int32Array([e.x,e.y]):this.size=new Int32Array([e.x]));const[r,n,i]=this.size;if(i){if(this.value.length!==r*n*i)throw new Error(`Input size ${this.value.length} does not match ${r} * ${n} * ${i} = ${n*r*i}`)}else if(n){if(this.value.length!==r*n)throw new Error(`Input size ${this.value.length} does not match ${r} * ${n} = ${n*r}`)}else if(this.value.length!==r)throw new Error(`Input size ${this.value.length} does not match ${r}`)}toArray(){const{utils:e}=t("./utils"),[r,n,i]=this.size;return i?e.erectMemoryOptimized3DFloat(this.value.subarray?this.value:new Float32Array(this.value),r,n,i):n?e.erectMemoryOptimized2DFloat(this.value.subarray?this.value:new Float32Array(this.value),r,n):this.value}}e.exports={Input:n,input:function(t,e){return new n(t,e)}}},{"./utils":114}],111:[function(t,e,r){const{utils:n}=t("./utils");function i(t,e){if(e.kernel)return void(e.kernel=t);const r=n.allPropertiesOf(t);for(let n=0;n<r.length;n++){const i=r[n];"_"===i[0]&&"_"===i[1]||("function"==typeof t[i]?"add"===i.substring(0,3)||"set"===i.substring(0,3)?e[i]=function(){return e.kernel[i].apply(e.kernel,arguments),e}:e[i]=function(){return e.kernel[i].apply(e.kernel,arguments)}:(e.__defineGetter__(i,(()=>e.kernel[i])),e.__defineSetter__(i,(t=>{e.kernel[i]=t}))))}e.kernel=t}e.exports={kernelRunShortcut:function(t){let e=function(){return t.build.apply(t,arguments),e=function(){let e=t.run.apply(t,arguments);if(t.switchingKernels){const n=t.resetSwitchingKernels(),i=t.onRequestSwitchKernel(n,arguments,t);r.kernel=t=i,e=i.run.apply(i,arguments)}return t.renderKernels?t.renderKernels():t.renderOutput?t.renderOutput():e},e.apply(t,arguments)};const r=function(){return e.apply(t,arguments)};return r.exec=function(){return new Promise(((t,r)=>{try{t(e.apply(this,arguments))}catch(t){r(t)}}))},r.replaceKernel=function(e){i(t=e,r)},i(t,r),r}}},{"./utils":114}],112:[function(t,e,r){const n={name:"math-random-uniformly-distributed",onBeforeRun:t=>{t.setUniform1f("randomSeed1",Math.random()),t.setUniform1f("randomSeed2",Math.random())},functionMatch:"Math.random()",functionReplace:"nrand(vTexCoord)",functionReturnType:"Number",source:"// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}"};e.exports=n},{}],113:[function(t,e,r){e.exports={Texture:class{constructor(t){const{texture:e,size:r,dimensions:n,output:i,context:s,type:a="NumberTexture",kernel:o,internalFormat:u,textureFormat:h}=t;if(!i)throw new Error('settings property "output" required.');if(!s)throw new Error('settings property "context" required.');if(!e)throw new Error('settings property "texture" required.');if(!o)throw new Error('settings property "kernel" required.');this.texture=e,e._refs?e._refs++:e._refs=1,this.size=r,this.dimensions=n,this.output=i,this.context=s,this.kernel=o,this.type=a,this._deleted=!1,this.internalFormat=u,this.textureFormat=h}toArray(){throw new Error(`Not implemented on ${this.constructor.name}`)}clone(){throw new Error(`Not implemented on ${this.constructor.name}`)}delete(){throw new Error(`Not implemented on ${this.constructor.name}`)}clear(){throw new Error(`Not implemented on ${this.constructor.name}`)}}}},{}],114:[function(t,e,r){const n=t("acorn"),{Input:i}=t("./input"),{Texture:s}=t("./texture"),a=/function ([^(]*)/,o=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,u=/([^\s,]+)/g,h={systemEndianness:()=>d,getSystemEndianness(){const t=new ArrayBuffer(4),e=new Uint32Array(t),r=new Uint8Array(t);if(e[0]=3735928559,239===r[0])return"LE";if(222===r[0])return"BE";throw new Error("unknown endianness")},isFunction:t=>"function"==typeof t,isFunctionString:t=>"string"==typeof t&&"function"===t.slice(0,"function".length).toLowerCase(),getFunctionNameFromString(t){const e=a.exec(t);return e&&0!==e.length?e[1].trim():null},getFunctionBodyFromString:t=>t.substring(t.indexOf("{")+1,t.lastIndexOf("}")),getArgumentNamesFromString(t){const e=t.replace(o,"");let r=e.slice(e.indexOf("(")+1,e.indexOf(")")).match(u);return null===r&&(r=[]),r},clone(t){if(null===t||"object"!=typeof t||t.hasOwnProperty("isActiveClone"))return t;const e=t.constructor();for(let r in t)Object.prototype.hasOwnProperty.call(t,r)&&(t.isActiveClone=null,e[r]=h.clone(t[r]),delete t.isActiveClone);return e},isArray:t=>!isNaN(t.length),getVariableType(t,e){if(h.isArray(t))return t.length>0&&"IMG"===t[0].nodeName?"HTMLImageArray":"Array";switch(t.constructor){case Boolean:return"Boolean";case Number:return e&&Number.isInteger(t)?"Integer":"Float";case s:return t.type;case i:return"Input"}switch(t.nodeName){case"IMG":case"CANVAS":return"HTMLImage";case"VIDEO":return"HTMLVideo"}return t.hasOwnProperty("type")?t.type:"Unknown"},getKernelTextureSize(t,e){let[r,n,i]=e,s=(r||1)*(n||1)*(i||1);return t.optimizeFloatMemory&&"single"===t.precision&&(r=s=Math.ceil(s/4)),n>1&&r*n===s?new Int32Array([r,n]):h.closestSquareDimensions(s)},closestSquareDimensions(t){const e=Math.sqrt(t);let r=Math.ceil(e),n=Math.floor(e);for(;r*n<t;)r--,n=Math.ceil(t/r);return new Int32Array([n,Math.ceil(t/n)])},getMemoryOptimizedFloatTextureSize(t,e){const r=h.roundTo((t[0]||1)*(t[1]||1)*(t[2]||1)*(t[3]||1),4)/e;return h.closestSquareDimensions(r)},getMemoryOptimizedPackedTextureSize(t,e){const[r,n,i]=t,s=h.roundTo((r||1)*(n||1)*(i||1),4)/(4/e);return h.closestSquareDimensions(s)},roundTo:(t,e)=>Math.floor((t+e-1)/e)*e,getDimensions(t,e){let r;if(h.isArray(t)){const e=[];let n=t;for(;h.isArray(n);)e.push(n.length),n=n[0];r=e.reverse()}else if(t instanceof s)r=t.output;else{if(!(t instanceof i))throw new Error(`Unknown dimensions of ${t}`);r=t.size}if(e)for(r=Array.from(r);r.length<3;)r.push(1);return new Int32Array(r)},flatten2dArrayTo(t,e){let r=0;for(let n=0;n<t.length;n++)e.set(t[n],r),r+=t[n].length},flatten3dArrayTo(t,e){let r=0;for(let n=0;n<t.length;n++)for(let i=0;i<t[n].length;i++)e.set(t[n][i],r),r+=t[n][i].length},flatten4dArrayTo(t,e){let r=0;for(let n=0;n<t.length;n++)for(let i=0;i<t[n].length;i++)for(let s=0;s<t[n][i].length;s++)e.set(t[n][i][s],r),r+=t[n][i][s].length},flattenTo(t,e){h.isArray(t[0])?h.isArray(t[0][0])?h.isArray(t[0][0][0])?h.flatten4dArrayTo(t,e):h.flatten3dArrayTo(t,e):h.flatten2dArrayTo(t,e):e.set(t)},splitArray(t,e){const r=[];for(let n=0;n<t.length;n+=e)r.push(new t.constructor(t.buffer,4*n+t.byteOffset,e));return r},getAstString(t,e){const r=Array.isArray(t)?t:t.split(/\r?\n/g),n=e.loc.start,i=e.loc.end,s=[];if(n.line===i.line)s.push(r[n.line-1].substring(n.column,i.column));else{s.push(r[n.line-1].slice(n.column));for(let t=n.line;t<i.line;t++)s.push(r[t]);s.push(r[i.line-1].slice(0,i.column))}return s.join("\n")},allPropertiesOf(t){const e=[];do{e.push.apply(e,Object.getOwnPropertyNames(t))}while(t=Object.getPrototypeOf(t));return e},linesToString:t=>t.length>0?t.join(";\n")+";\n":"\n",warnDeprecated(t,e,r){r?console.warn(`You are using a deprecated ${t} "${e}". It has been replaced with "${r}". Fixing, but please upgrade as it will soon be removed.`):console.warn(`You are using a deprecated ${t} "${e}". It has been removed. Fixing, but please upgrade as it will soon be removed.`)},flipPixels:(t,e,r)=>{const n=r/2|0,i=4*e,s=new Uint8ClampedArray(4*e),a=t.slice(0);for(let t=0;t<n;++t){const e=t*i,n=(r-t-1)*i;s.set(a.subarray(e,e+i)),a.copyWithin(e,n,n+i),a.set(s,n)}return a},erectPackedFloat:(t,e)=>t.subarray(0,e),erect2DPackedFloat:(t,e,r)=>{const n=new Array(r);for(let i=0;i<r;i++){const r=i*e,s=r+e;n[i]=t.subarray(r,s)}return n},erect3DPackedFloat:(t,e,r,n)=>{const i=new Array(n);for(let s=0;s<n;s++){const n=new Array(r);for(let i=0;i<r;i++){const a=s*r*e+i*e,o=a+e;n[i]=t.subarray(a,o)}i[s]=n}return i},erectMemoryOptimizedFloat:(t,e)=>t.subarray(0,e),erectMemoryOptimized2DFloat:(t,e,r)=>{const n=new Array(r);for(let i=0;i<r;i++){const r=i*e;n[i]=t.subarray(r,r+e)}return n},erectMemoryOptimized3DFloat:(t,e,r,n)=>{const i=new Array(n);for(let s=0;s<n;s++){const n=new Array(r);for(let i=0;i<r;i++){const a=s*r*e+i*e;n[i]=t.subarray(a,a+e)}i[s]=n}return i},erectFloat:(t,e)=>{const r=new Float32Array(e);let n=0;for(let i=0;i<e;i++)r[i]=t[n],n+=4;return r},erect2DFloat:(t,e,r)=>{const n=new Array(r);let i=0;for(let s=0;s<r;s++){const r=new Float32Array(e);for(let n=0;n<e;n++)r[n]=t[i],i+=4;n[s]=r}return n},erect3DFloat:(t,e,r,n)=>{const i=new Array(n);let s=0;for(let a=0;a<n;a++){const n=new Array(r);for(let i=0;i<r;i++){const r=new Float32Array(e);for(let n=0;n<e;n++)r[n]=t[s],s+=4;n[i]=r}i[a]=n}return i},erectArray2:(t,e)=>{const r=new Array(e),n=4*e;let i=0;for(let e=0;e<n;e+=4)r[i++]=t.subarray(e,e+2);return r},erect2DArray2:(t,e,r)=>{const n=new Array(r),i=4*e;for(let s=0;s<r;s++){const r=new Array(e),a=s*i;let o=0;for(let e=0;e<i;e+=4)r[o++]=t.subarray(e+a,e+a+2);n[s]=r}return n},erect3DArray2:(t,e,r,n)=>{const i=4*e,s=new Array(n);for(let a=0;a<n;a++){const n=new Array(r);for(let s=0;s<r;s++){const o=new Array(e),u=a*i*r+s*i;let h=0;for(let e=0;e<i;e+=4)o[h++]=t.subarray(e+u,e+u+2);n[s]=o}s[a]=n}return s},erectArray3:(t,e)=>{const r=new Array(e),n=4*e;let i=0;for(let e=0;e<n;e+=4)r[i++]=t.subarray(e,e+3);return r},erect2DArray3:(t,e,r)=>{const n=4*e,i=new Array(r);for(let s=0;s<r;s++){const r=new Array(e),a=s*n;let o=0;for(let e=0;e<n;e+=4)r[o++]=t.subarray(e+a,e+a+3);i[s]=r}return i},erect3DArray3:(t,e,r,n)=>{const i=4*e,s=new Array(n);for(let a=0;a<n;a++){const n=new Array(r);for(let s=0;s<r;s++){const o=new Array(e),u=a*i*r+s*i;let h=0;for(let e=0;e<i;e+=4)o[h++]=t.subarray(e+u,e+u+3);n[s]=o}s[a]=n}return s},erectArray4:(t,e)=>{const r=new Array(t),n=4*e;let i=0;for(let e=0;e<n;e+=4)r[i++]=t.subarray(e,e+4);return r},erect2DArray4:(t,e,r)=>{const n=4*e,i=new Array(r);for(let s=0;s<r;s++){const r=new Array(e),a=s*n;let o=0;for(let e=0;e<n;e+=4)r[o++]=t.subarray(e+a,e+a+4);i[s]=r}return i},erect3DArray4:(t,e,r,n)=>{const i=4*e,s=new Array(n);for(let a=0;a<n;a++){const n=new Array(r);for(let s=0;s<r;s++){const o=new Array(e),u=a*i*r+s*i;let h=0;for(let e=0;e<i;e+=4)o[h++]=t.subarray(e+u,e+u+4);n[s]=o}s[a]=n}return s},flattenFunctionToString:(t,e)=>{const{findDependency:r,thisLookup:i,doNotDefine:s}=e;let a=e.flattened;a||(a=e.flattened={});const o=n.parse(t),u=[];let l=0;const c=function t(e){if(Array.isArray(e)){const r=[];for(let n=0;n<e.length;n++)r.push(t(e[n]));return r.join("")}switch(e.type){case"Program":return t(e.body)+("VariableDeclaration"===e.body[0].type?";":"");case"FunctionDeclaration":return`function ${e.id.name}(${e.params.map(t).join(", ")}) ${t(e.body)}`;case"BlockStatement":{const r=[];l+=2;for(let n=0;n<e.body.length;n++){const i=t(e.body[n]);i&&r.push(" ".repeat(l)+i,";\n")}return l-=2,`{\n${r.join("")}}`}case"VariableDeclaration":const n=h.normalizeDeclarations(e).map(t).filter((t=>null!==t));return n.length<1?"":`${e.kind} ${n.join(",")}`;case"VariableDeclarator":return e.init.object&&"ThisExpression"===e.init.object.type?i(e.init.property.name,!0)?`${e.id.name} = ${t(e.init)}`:null:`${e.id.name} = ${t(e.init)}`;case"CallExpression":if("subarray"===e.callee.property.name)return`${t(e.callee.object)}.${t(e.callee.property)}(${e.arguments.map((e=>t(e))).join(", ")})`;if("gl"===e.callee.object.name||"context"===e.callee.object.name)return`${t(e.callee.object)}.${t(e.callee.property)}(${e.arguments.map((e=>t(e))).join(", ")})`;if("ThisExpression"===e.callee.object.type)return u.push(r("this",e.callee.property.name)),`${e.callee.property.name}(${e.arguments.map((e=>t(e))).join(", ")})`;if(e.callee.object.name){const n=r(e.callee.object.name,e.callee.property.name);return null===n?`${e.callee.object.name}.${e.callee.property.name}(${e.arguments.map((e=>t(e))).join(", ")})`:(u.push(n),`${e.callee.property.name}(${e.arguments.map((e=>t(e))).join(", ")})`)}if("MemberExpression"===e.callee.object.type)return`${t(e.callee.object)}.${e.callee.property.name}(${e.arguments.map((e=>t(e))).join(", ")})`;throw new Error("unknown ast.callee");case"ReturnStatement":return`return ${t(e.argument)}`;case"BinaryExpression":return`(${t(e.left)}${e.operator}${t(e.right)})`;case"UnaryExpression":return e.prefix?`${e.operator} ${t(e.argument)}`:`${t(e.argument)} ${e.operator}`;case"ExpressionStatement":return`${t(e.expression)}`;case"SequenceExpression":return`(${t(e.expressions)})`;case"ArrowFunctionExpression":return`(${e.params.map(t).join(", ")}) => ${t(e.body)}`;case"Literal":return e.raw;case"Identifier":return e.name;case"MemberExpression":return"ThisExpression"===e.object.type?i(e.property.name):e.computed?`${t(e.object)}[${t(e.property)}]`:t(e.object)+"."+t(e.property);case"ThisExpression":return"this";case"NewExpression":return`new ${t(e.callee)}(${e.arguments.map((e=>t(e))).join(", ")})`;case"ForStatement":return`for (${t(e.init)};${t(e.test)};${t(e.update)}) ${t(e.body)}`;case"AssignmentExpression":return`${t(e.left)}${e.operator}${t(e.right)}`;case"UpdateExpression":return`${t(e.argument)}${e.operator}`;case"IfStatement":return`if (${t(e.test)}) ${t(e.consequent)}`;case"ThrowStatement":return`throw ${t(e.argument)}`;case"ObjectPattern":return e.properties.map(t).join(", ");case"ArrayPattern":return e.elements.map(t).join(", ");case"DebuggerStatement":return"debugger;";case"ConditionalExpression":return`${t(e.test)}?${t(e.consequent)}:${t(e.alternate)}`;case"Property":if("init"===e.kind)return t(e.key)}throw new Error(`unhandled ast.type of ${e.type}`)}(o);if(u.length>0){const t=[];for(let r=0;r<u.length;r++){const n=u[r];a[n]||(a[n]=!0),n&&t.push(h.flattenFunctionToString(n,e)+"\n")}return t.join("")+c}return c},normalizeDeclarations:t=>{if("VariableDeclaration"!==t.type)throw new Error('Ast is not of type "VariableDeclaration"');const e=[];for(let r=0;r<t.declarations.length;r++){const n=t.declarations[r];if(n.id&&"ObjectPattern"===n.id.type&&n.id.properties){const{properties:t}=n.id;for(let r=0;r<t.length;r++){const i=t[r];if("ObjectPattern"===i.value.type&&i.value.properties)for(let t=0;t<i.value.properties.length;t++){const r=i.value.properties[t];if("Property"!==r.type)throw new Error("unexpected state");e.push({type:"VariableDeclarator",id:{type:"Identifier",name:r.key.name},init:{type:"MemberExpression",object:{type:"MemberExpression",object:n.init,property:{type:"Identifier",name:i.key.name},computed:!1},property:{type:"Identifier",name:r.key.name},computed:!1}})}else{if("Identifier"!==i.value.type)throw new Error("unexpected state");e.push({type:"VariableDeclarator",id:{type:"Identifier",name:i.value&&i.value.name?i.value.name:i.key.name},init:{type:"MemberExpression",object:n.init,property:{type:"Identifier",name:i.key.name},computed:!1}})}}}else if(n.id&&"ArrayPattern"===n.id.type&&n.id.elements){const{elements:t}=n.id;for(let r=0;r<t.length;r++){const i=t[r];if("Identifier"!==i.type)throw new Error("unexpected state");e.push({type:"VariableDeclarator",id:{type:"Identifier",name:i.name},init:{type:"MemberExpression",object:n.init,property:{type:"Literal",value:r,raw:r.toString(),start:i.start,end:i.end},computed:!0}})}}else e.push(n)}return e},splitHTMLImageToRGB:(t,e)=>{const r=t.createKernel((function(t){return 255*t[this.thread.y][this.thread.x].r}),{output:[e.width,e.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),n=t.createKernel((function(t){return 255*t[this.thread.y][this.thread.x].g}),{output:[e.width,e.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),i=t.createKernel((function(t){return 255*t[this.thread.y][this.thread.x].b}),{output:[e.width,e.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),s=t.createKernel((function(t){return 255*t[this.thread.y][this.thread.x].a}),{output:[e.width,e.height],precision:"unsigned",argumentTypes:{a:"HTMLImage"}}),a=[r(e),n(e),i(e),s(e)];return a.rKernel=r,a.gKernel=n,a.bKernel=i,a.aKernel=s,a.gpu=t,a},splitRGBAToCanvases:(t,e,r,n)=>{const i=t.createKernel((function(t){const e=t[this.thread.y][this.thread.x];this.color(e.r/255,0,0,255)}),{output:[r,n],graphical:!0,argumentTypes:{v:"Array2D(4)"}});i(e);const s=t.createKernel((function(t){const e=t[this.thread.y][this.thread.x];this.color(0,e.g/255,0,255)}),{output:[r,n],graphical:!0,argumentTypes:{v:"Array2D(4)"}});s(e);const a=t.createKernel((function(t){const e=t[this.thread.y][this.thread.x];this.color(0,0,e.b/255,255)}),{output:[r,n],graphical:!0,argumentTypes:{v:"Array2D(4)"}});a(e);const o=t.createKernel((function(t){const e=t[this.thread.y][this.thread.x];this.color(255,255,255,e.a/255)}),{output:[r,n],graphical:!0,argumentTypes:{v:"Array2D(4)"}});return o(e),[i.canvas,s.canvas,a.canvas,o.canvas]},getMinifySafeName:t=>{try{const e=n.parse(`const value = ${t.toString()}`),{init:r}=e.body[0].declarations[0];return r.body.name||r.body.body[0].argument.name}catch(t){throw new Error("Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }")}},sanitizeName:function(t){return l.test(t)&&(t=t.replace(l,"S_S")),c.test(t)?t=t.replace(c,"U_U"):p.test(t)&&(t=t.replace(p,"u_u")),t}},l=/\$/,c=/__/,p=/_/,d=h.getSystemEndianness();e.exports={utils:h}},{"./input":110,"./texture":113,acorn:1}]},{},[107])(107)}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,r),s.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{"use strict";var t,e,i,s,a,o,u,h,l;r.r(n),r.d(n,{Box:()=>e,CartSimulation:()=>s,DataRecorder:()=>d,Line:()=>i,LinearModel:()=>o,LinearModelTrain:()=>h,LinearRegression:()=>a,NeuralModel:()=>c,NeuralModelVisualizer:()=>p,Runner:()=>u,Utils:()=>l,Vector2:()=>t}),t=class{constructor(t,e){this.x=t,this.y=e}},e=class{constructor(t,e){this.min=t,this.max=e}getSize(){return new t(this.max.x-this.min.x,this.max.y-this.min.y)}draw(t){var e;return e=this.getSize(),t.lineWidth=3,t.strokeRect(this.min.x,this.min.y,e.x,e.y)}},i=class{constructor(t,e){this.origin=t,this.end=e}size(){return Math.sqrt(Math.pow(this.origin.x-this.end.x,2)+Math.pow(this.origin.y-this.end.y,2))}draw(t){return t.lineWidth=3,t.beginPath(),t.moveTo(this.origin.x,this.origin.y),t.lineTo(this.end.x,this.end.y),t.stroke()}},s=class{constructor(){this.barrierDistance=400,this.boxHalfSize=50,this.moveAcceleration=.2,this.limitAngle=.7,this.cart=new e(new t(-this.boxHalfSize,-30),new t(this.boxHalfSize,30)),this.pendulum=new i(new t(0,0),new t(0,100)),this.barrierLeft=new i(new t(-this.barrierDistance,-1e3),new t(-this.barrierDistance,1e3)),this.barrierRight=new i(new t(this.barrierDistance,-1e3),new t(this.barrierDistance,1e3)),this.reset()}reset(){var t;return this.gameOver=!1,this.score=0,this.position=0,this.leftPressed=!1,this.rightPressed=!1,this.acceleration=0,this.friction=.99,this.velocity=2*Math.random()-1,this.velocity+=null!=(t=this.velocity<0)?t:-{.2:.2},this.angle=0}draw(t){return this.barrierLeft.draw(t),this.barrierRight.draw(t),t.translate(this.position,0),t.strokeStyle="#FF0000",t.lineWidth=1,t.beginPath(),t.moveTo(100*Math.sin(-this.limitAngle),100*Math.cos(-this.limitAngle)),t.lineTo(0,0),t.lineTo(100*Math.sin(this.limitAngle),100*Math.cos(this.limitAngle)),t.stroke(),t.strokeStyle="#000000",t.lineWidth=3,this.pendulum.end.x=100*Math.sin(this.angle),this.pendulum.end.y=100*Math.cos(this.angle),this.pendulum.draw(t),this.cart.draw(t)}update(){if(!this.gameOver)return this.leftPressed?this.acceleration=-this.moveAcceleration:this.rightPressed?this.acceleration=this.moveAcceleration:this.acceleration=0,this.velocity+=this.acceleration,this.velocity*=this.friction,this.position+=this.velocity,this.angle+=.03*this.angle+.005*-this.velocity,this.score++,(this.angle>this.limitAngle||this.angle<-this.limitAngle)&&(this.gameOver=!0),this.position+this.boxHalfSize>this.barrierDistance||this.position-this.boxHalfSize<-this.barrierDistance?this.gameOver=!0:void 0}},a=class t{constructor(t,e){this.ori=t,this.decl=e}jitter(t){return this.ori+=(Math.random()-.5)*t,this.decl+=(Math.random()-.5)*t}clone(){return new t(this.ori,this.decl)}},o=class t{constructor(){this.vel=new a(0,0),this.angle=new a(0,0),this.pos=new a(0,0),this.e=0}jitter(t){return this.vel.jitter(t),this.angle.jitter(t),this.pos.jitter(t),this.e+=(Math.random()-.5)*t}clone(){var e;return(e=new t).vel=this.pos.clone(),e.angle=this.pos.clone(),e.pos=this.pos.clone(),e.e=this.e,e}control(t){var e,r;return e=this.vel.decl*t.velocity+this.vel.ori,r=this.angle.decl*t.angle+this.angle.ori+e+(this.pos.decl*t.position+this.pos.ori),t.leftPressed=r<this.e,t.rightPressed=r>this.e}},u=class{static runHeadless(t,e,r){var n,i,a;for(e=void 0!==e?e:Infinity,n=new s,r&&(a=performance.now());!n.gameOver&&n.score<e;)void 0!==t&&t(n),n.update();return r&&(i=performance.now(),console.log(" - Simulation ended with "+n.score+" points, took "+(i-a)+".")),n.score}static runGraphical(t,e,r){var n,i,a,o;return n=new s,i=t.getContext("2d"),a=0,(o=function(){return void 0!==e&&e(n),n.update(),n.gameOver&&(void 0!==r&&r(n,a),n.score>a&&(a=n.score),n.reset()),i.save(),i.clearRect(0,0,t.width,t.height),i.font="15px Arial",i.textAlign="left",i.fillText("Points: "+n.score,10,20),i.fillText("Max: "+a,10,40),i.transform(1,0,0,-1,0,t.height),i.translate(t.width/2,t.height/2),n.draw(i),i.restore(),requestAnimationFrame(o)})()}},h=class t{static trainIterative(e,r,n,i){var s,a,u,h,l,c,p,d;for(e=void 0!==e?e:500,r=void 0!==r?r:100,n=void 0!==n?n:5,i=void 0!==i?i:2e3,console.log(" - Training process starting. ",{epochs:e,iterations:r,runs:n}),s=new o,a=t.testModel(s,n,i),u=0;u<e;){for(console.log(" - Running epoch ",u," score ",a),h=null,l=0,c=0;c<r;)(p=s.clone()).jitter(1),(d=t.testModel(p,n,i))>l&&(h=p,l=d),c++;if(l>=a&&(s=h,a=l),a>=i)break;u++}return console.log(" - Training finished with score ",a," model ",s),s}static trainRandom(e,r,n){var i,s,a,u,h;for(e=void 0!==e?e:1e5,r=void 0!==r?r:5,n=void 0!==n?n:2e3,console.log(" - Training process starting. ",{iterations:e,runs:r}),i=null,s=0,a=0;a<e&&((u=new o).jitter(2),(h=t.testModel(u,r,n))>s&&(i=u,s=h),console.log(" - Iteration ",a," score ",s),!(s>=n));)a++;return console.log(" - Training finished with score ",s," model ",i),i}static testModel(t,e,r){var n,i,s;for(s=0,i=0;i<e;)n=function(e){t.control(e)},s+=u.runHeadless(n,r),i++;return s/e}},l=class{static writeFile(t,e){var r,n;"object"==typeof t&&(t=JSON.stringify(t,null,"\t")),r=new Blob([t],{type:"octet/stream"}),(n=document.createElement("a")).download=e,n.href=window.URL.createObjectURL(r),n.style.display="none",n.onclick=function(){document.body.removeChild(this)},document.body.appendChild(n),n.click()}static readFile(t){var e;return(e=document.createElement("input")).type="file",e.style.display="none",document.body.appendChild(e),e.onchange=function(){var r,n;if(0!==(r=e.files).length)return(n=new FileReader).onload=function(){var e;return e=n.result,t(e)},n.readAsText(r[0]),document.body.removeChild(e)},e.click()}};var c,p,d,g=r(137);c=class{constructor(){this.config={binaryThresh:.5,hiddenLayers:[3],activation:"sigmoid",leakyReluAlpha:.01},this.trainConfig={iterations:2e4,errorThresh:.005,learningRate:.3,momentum:.1,timeout:Infinity},this.net=new g.NeuralNetwork(this.config)}train(t){return this.net.train(t,this.trainConfig)}control(t){var e,r;return e=[t.velocity,t.angle,t.position],r=this.net.run(e),console.log(r),t.leftPressed=r[0]>.5,t.rightPressed=r[1]>.5}},p=class{constructor(t,e){this.net=t,this.inputLayer=this.net.inputLookup,this.outputLayer=this.net.outputs,this.sizes=this.net.sizes,this.width=400,this.height=400,this.container=e,this.canvas=null,this.context=null,this.colors={nodeOutline:"black",inputLayerNode:"blue",outputLayerNode:"green",hiddenLayerNode:"orange",forwardArrow:"black",backArrow:"violet"}}createCanvas(){return this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height,"object"==typeof this.container&&(this.container.appendChild(this.canvas),this.context=this.canvas.getContext("2d"),!0)}drawNode(t,e,r){this.context.beginPath(),this.context.strokeStyle=this.colors.nodeOutline,this.context.lineWidth=5,this.context.arc(t,e,r,0,2*Math.PI),this.context.stroke(),this.context.fillStyle=this.colors.hiddenLayerNode,this.context.fill(),this.context.closePath()}drawArrow(t,e,r){var n,i,s,a;n=t.x,s=t.y,i=e.x,a=e.y,this.context.beginPath(),this.context.lineWidth=1,this.context.fillStyle="rgba(0,0,0, "+r+")",this.context.strokeStyle="rgba(0,0,0, "+r+")",this.context.moveTo(n,s),this.context.lineTo(i,a),this.context.stroke(),this.context.closePath()}getNode(t,e){var r,n,i,s,a,o,u,h,l,c,p;for(i=0,r=0;r<this.sizes.length;)i=(l=this.sizes[r])>i?l:i,r++;for(n in c=Math.round(this.canvas.width/this.sizes.length),(a=15)<(p=Math.round(this.canvas.height/(i+1)))&&(a=.25*p),o=c-2*a,u=p-1*a,this.sizes)for(h=(i-this.sizes[n])/2*p,s=0;s<this.sizes[n];){if(n===t&&s===e)return{x:n*c+o,y:s*p+u+h,radius:a};s++}return!1}render(){var t,e,r,n,i,s;for(t in null!==this.canvas&&null!==this.context||this.createCanvas(),this.sizes){for(i=0;i<this.sizes[t];){for(r=this.getNode(t,i),e=1*t+1,s=0;s<this.sizes[e];)n=this.getNode(e,s),this.drawArrow(r,n,Math.abs(this.net.weights[e][s][i])/2),s++;i++}if(t>=this.sizes.length-2)break}for(t in this.sizes)for(i=0;i<this.sizes[t];)r=this.getNode(t,i),this.drawNode(r.x,r.y,r.radius),i++}},d=class{constructor(){this.active=!0,this.data=[],this.bestScore=0,this.bestData=[]}getData(){return this.bestData}end(t){if(this.active)return t>this.bestScore&&(this.bestData=this.data,this.bestScore=t),this.data=[]}record(t){if(this.active)return this.data.push({input:[t.velocity,t.angle,t.position],output:[t.leftPressed,t.rightPressed]})}}})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,